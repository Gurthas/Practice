/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TResultOrderListOfSubOrder
		implements org.apache.thrift.TBase<TResultOrderListOfSubOrder, TResultOrderListOfSubOrder._Fields>,
		java.io.Serializable, Cloneable, Comparable<TResultOrderListOfSubOrder> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TResultOrderListOfSubOrder");

	private static final org.apache.thrift.protocol.TField ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderCode", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField ORDER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderTime", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField STORE_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"storeTitle", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField STORE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"storeId", org.apache.thrift.protocol.TType.I32, (short) 4);
	private static final org.apache.thrift.protocol.TField IS_VALID_STORE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isValidStore", org.apache.thrift.protocol.TType.I32, (short) 5);
	private static final org.apache.thrift.protocol.TField WDGJ_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"wdgjStatus", org.apache.thrift.protocol.TType.I32, (short) 6);
	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 7);
	private static final org.apache.thrift.protocol.TField STATUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusName", org.apache.thrift.protocol.TType.STRING, (short) 8);
	private static final org.apache.thrift.protocol.TField PAY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payPrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 9);
	private static final org.apache.thrift.protocol.TField IS_PAID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isPaid", org.apache.thrift.protocol.TType.I32, (short) 10);
	private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"finishTime", org.apache.thrift.protocol.TType.STRING, (short) 11);
	private static final org.apache.thrift.protocol.TField RELATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"relationId", org.apache.thrift.protocol.TType.I32, (short) 12);
	private static final org.apache.thrift.protocol.TField FROM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"fromType", org.apache.thrift.protocol.TType.I32, (short) 13);
	private static final org.apache.thrift.protocol.TField IS_GROUPON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isGroupon", org.apache.thrift.protocol.TType.I32, (short) 14);
	private static final org.apache.thrift.protocol.TField SHOW_LOGISTICS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"showLogistics", org.apache.thrift.protocol.TType.I32, (short) 15);
	private static final org.apache.thrift.protocol.TField SHOW_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"showConfirm", org.apache.thrift.protocol.TType.I32, (short) 16);
	private static final org.apache.thrift.protocol.TField ORDER_ITEM_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderItemCount", org.apache.thrift.protocol.TType.I32, (short) 17);
	private static final org.apache.thrift.protocol.TField SHOW_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"showComment", org.apache.thrift.protocol.TType.I32, (short) 18);
	private static final org.apache.thrift.protocol.TField ITEM_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"itemInfos", org.apache.thrift.protocol.TType.LIST, (short) 19);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TResultOrderListOfSubOrderStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TResultOrderListOfSubOrderTupleSchemeFactory());
	}

	public String orderCode; // required
	public String orderTime; // required
	public String storeTitle; // required
	public int storeId; // required
	public int isValidStore; // required
	public int wdgjStatus; // required
	public int status; // required
	public String statusName; // required
	public double payPrice; // required
	public int isPaid; // required
	public String finishTime; // required
	public int relationId; // required
	public int fromType; // required
	public int isGroupon; // required
	public int showLogistics; // required
	public int showConfirm; // required
	public int orderItemCount; // required
	public int showComment; // required
	public List<TResultOrderListOfItemInfo> itemInfos; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ORDER_CODE((short) 1, "orderCode"), ORDER_TIME((short) 2, "orderTime"), STORE_TITLE((short) 3,
				"storeTitle"), STORE_ID((short) 4, "storeId"), IS_VALID_STORE((short) 5, "isValidStore"), WDGJ_STATUS(
						(short) 6,
						"wdgjStatus"), STATUS((short) 7, "status"), STATUS_NAME((short) 8, "statusName"), PAY_PRICE(
								(short) 9, "payPrice"), IS_PAID((short) 10, "isPaid"), FINISH_TIME((short) 11,
										"finishTime"), RELATION_ID((short) 12, "relationId"), FROM_TYPE((short) 13,
												"fromType"), IS_GROUPON((short) 14, "isGroupon"), SHOW_LOGISTICS(
														(short) 15, "showLogistics"), SHOW_CONFIRM((short) 16,
																"showConfirm"), ORDER_ITEM_COUNT((short) 17,
																		"orderItemCount"), SHOW_COMMENT((short) 18,
																				"showComment"), ITEM_INFOS((short) 19,
																						"itemInfos");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ORDER_CODE
				return ORDER_CODE;
			case 2: // ORDER_TIME
				return ORDER_TIME;
			case 3: // STORE_TITLE
				return STORE_TITLE;
			case 4: // STORE_ID
				return STORE_ID;
			case 5: // IS_VALID_STORE
				return IS_VALID_STORE;
			case 6: // WDGJ_STATUS
				return WDGJ_STATUS;
			case 7: // STATUS
				return STATUS;
			case 8: // STATUS_NAME
				return STATUS_NAME;
			case 9: // PAY_PRICE
				return PAY_PRICE;
			case 10: // IS_PAID
				return IS_PAID;
			case 11: // FINISH_TIME
				return FINISH_TIME;
			case 12: // RELATION_ID
				return RELATION_ID;
			case 13: // FROM_TYPE
				return FROM_TYPE;
			case 14: // IS_GROUPON
				return IS_GROUPON;
			case 15: // SHOW_LOGISTICS
				return SHOW_LOGISTICS;
			case 16: // SHOW_CONFIRM
				return SHOW_CONFIRM;
			case 17: // ORDER_ITEM_COUNT
				return ORDER_ITEM_COUNT;
			case 18: // SHOW_COMMENT
				return SHOW_COMMENT;
			case 19: // ITEM_INFOS
				return ITEM_INFOS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __STOREID_ISSET_ID = 0;
	private static final int __ISVALIDSTORE_ISSET_ID = 1;
	private static final int __WDGJSTATUS_ISSET_ID = 2;
	private static final int __STATUS_ISSET_ID = 3;
	private static final int __PAYPRICE_ISSET_ID = 4;
	private static final int __ISPAID_ISSET_ID = 5;
	private static final int __RELATIONID_ISSET_ID = 6;
	private static final int __FROMTYPE_ISSET_ID = 7;
	private static final int __ISGROUPON_ISSET_ID = 8;
	private static final int __SHOWLOGISTICS_ISSET_ID = 9;
	private static final int __SHOWCONFIRM_ISSET_ID = 10;
	private static final int __ORDERITEMCOUNT_ISSET_ID = 11;
	private static final int __SHOWCOMMENT_ISSET_ID = 12;
	private short __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ORDER_CODE,
				new org.apache.thrift.meta_data.FieldMetaData("orderCode",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ORDER_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("orderTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STORE_TITLE,
				new org.apache.thrift.meta_data.FieldMetaData("storeTitle",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STORE_ID,
				new org.apache.thrift.meta_data.FieldMetaData("storeId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_VALID_STORE,
				new org.apache.thrift.meta_data.FieldMetaData("isValidStore",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.WDGJ_STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("wdgjStatus",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("statusName",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PAY_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("payPrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.IS_PAID,
				new org.apache.thrift.meta_data.FieldMetaData("isPaid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.FINISH_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("finishTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RELATION_ID,
				new org.apache.thrift.meta_data.FieldMetaData("relationId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.FROM_TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("fromType",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_GROUPON,
				new org.apache.thrift.meta_data.FieldMetaData("isGroupon",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SHOW_LOGISTICS,
				new org.apache.thrift.meta_data.FieldMetaData("showLogistics",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SHOW_CONFIRM,
				new org.apache.thrift.meta_data.FieldMetaData("showConfirm",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ORDER_ITEM_COUNT,
				new org.apache.thrift.meta_data.FieldMetaData("orderItemCount",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SHOW_COMMENT,
				new org.apache.thrift.meta_data.FieldMetaData("showComment",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ITEM_INFOS,
				new org.apache.thrift.meta_data.FieldMetaData("itemInfos",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
										TResultOrderListOfItemInfo.class))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultOrderListOfSubOrder.class, metaDataMap);
	}

	public TResultOrderListOfSubOrder() {
	}

	public TResultOrderListOfSubOrder(String orderCode, String orderTime, String storeTitle, int storeId,
			int isValidStore, int wdgjStatus, int status, String statusName, double payPrice, int isPaid,
			String finishTime, int relationId, int fromType, int isGroupon, int showLogistics, int showConfirm,
			int orderItemCount, int showComment, List<TResultOrderListOfItemInfo> itemInfos) {
		this();
		this.orderCode = orderCode;
		this.orderTime = orderTime;
		this.storeTitle = storeTitle;
		this.storeId = storeId;
		setStoreIdIsSet(true);
		this.isValidStore = isValidStore;
		setIsValidStoreIsSet(true);
		this.wdgjStatus = wdgjStatus;
		setWdgjStatusIsSet(true);
		this.status = status;
		setStatusIsSet(true);
		this.statusName = statusName;
		this.payPrice = payPrice;
		setPayPriceIsSet(true);
		this.isPaid = isPaid;
		setIsPaidIsSet(true);
		this.finishTime = finishTime;
		this.relationId = relationId;
		setRelationIdIsSet(true);
		this.fromType = fromType;
		setFromTypeIsSet(true);
		this.isGroupon = isGroupon;
		setIsGrouponIsSet(true);
		this.showLogistics = showLogistics;
		setShowLogisticsIsSet(true);
		this.showConfirm = showConfirm;
		setShowConfirmIsSet(true);
		this.orderItemCount = orderItemCount;
		setOrderItemCountIsSet(true);
		this.showComment = showComment;
		setShowCommentIsSet(true);
		this.itemInfos = itemInfos;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TResultOrderListOfSubOrder(TResultOrderListOfSubOrder other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetOrderCode()) {
			this.orderCode = other.orderCode;
		}
		if (other.isSetOrderTime()) {
			this.orderTime = other.orderTime;
		}
		if (other.isSetStoreTitle()) {
			this.storeTitle = other.storeTitle;
		}
		this.storeId = other.storeId;
		this.isValidStore = other.isValidStore;
		this.wdgjStatus = other.wdgjStatus;
		this.status = other.status;
		if (other.isSetStatusName()) {
			this.statusName = other.statusName;
		}
		this.payPrice = other.payPrice;
		this.isPaid = other.isPaid;
		if (other.isSetFinishTime()) {
			this.finishTime = other.finishTime;
		}
		this.relationId = other.relationId;
		this.fromType = other.fromType;
		this.isGroupon = other.isGroupon;
		this.showLogistics = other.showLogistics;
		this.showConfirm = other.showConfirm;
		this.orderItemCount = other.orderItemCount;
		this.showComment = other.showComment;
		if (other.isSetItemInfos()) {
			List<TResultOrderListOfItemInfo> __this__itemInfos = new ArrayList<TResultOrderListOfItemInfo>(
					other.itemInfos.size());
			for (TResultOrderListOfItemInfo other_element : other.itemInfos) {
				__this__itemInfos.add(new TResultOrderListOfItemInfo(other_element));
			}
			this.itemInfos = __this__itemInfos;
		}
	}

	public TResultOrderListOfSubOrder deepCopy() {
		return new TResultOrderListOfSubOrder(this);
	}

	@Override
	public void clear() {
		this.orderCode = null;
		this.orderTime = null;
		this.storeTitle = null;
		setStoreIdIsSet(false);
		this.storeId = 0;
		setIsValidStoreIsSet(false);
		this.isValidStore = 0;
		setWdgjStatusIsSet(false);
		this.wdgjStatus = 0;
		setStatusIsSet(false);
		this.status = 0;
		this.statusName = null;
		setPayPriceIsSet(false);
		this.payPrice = 0.0;
		setIsPaidIsSet(false);
		this.isPaid = 0;
		this.finishTime = null;
		setRelationIdIsSet(false);
		this.relationId = 0;
		setFromTypeIsSet(false);
		this.fromType = 0;
		setIsGrouponIsSet(false);
		this.isGroupon = 0;
		setShowLogisticsIsSet(false);
		this.showLogistics = 0;
		setShowConfirmIsSet(false);
		this.showConfirm = 0;
		setOrderItemCountIsSet(false);
		this.orderItemCount = 0;
		setShowCommentIsSet(false);
		this.showComment = 0;
		this.itemInfos = null;
	}

	public String getOrderCode() {
		return this.orderCode;
	}

	public TResultOrderListOfSubOrder setOrderCode(String orderCode) {
		this.orderCode = orderCode;
		return this;
	}

	public void unsetOrderCode() {
		this.orderCode = null;
	}

	/**
	 * Returns true if field orderCode is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderCode() {
		return this.orderCode != null;
	}

	public void setOrderCodeIsSet(boolean value) {
		if (!value) {
			this.orderCode = null;
		}
	}

	public String getOrderTime() {
		return this.orderTime;
	}

	public TResultOrderListOfSubOrder setOrderTime(String orderTime) {
		this.orderTime = orderTime;
		return this;
	}

	public void unsetOrderTime() {
		this.orderTime = null;
	}

	/**
	 * Returns true if field orderTime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderTime() {
		return this.orderTime != null;
	}

	public void setOrderTimeIsSet(boolean value) {
		if (!value) {
			this.orderTime = null;
		}
	}

	public String getStoreTitle() {
		return this.storeTitle;
	}

	public TResultOrderListOfSubOrder setStoreTitle(String storeTitle) {
		this.storeTitle = storeTitle;
		return this;
	}

	public void unsetStoreTitle() {
		this.storeTitle = null;
	}

	/**
	 * Returns true if field storeTitle is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetStoreTitle() {
		return this.storeTitle != null;
	}

	public void setStoreTitleIsSet(boolean value) {
		if (!value) {
			this.storeTitle = null;
		}
	}

	public int getStoreId() {
		return this.storeId;
	}

	public TResultOrderListOfSubOrder setStoreId(int storeId) {
		this.storeId = storeId;
		setStoreIdIsSet(true);
		return this;
	}

	public void unsetStoreId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOREID_ISSET_ID);
	}

	/**
	 * Returns true if field storeId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetStoreId() {
		return EncodingUtils.testBit(__isset_bitfield, __STOREID_ISSET_ID);
	}

	public void setStoreIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOREID_ISSET_ID, value);
	}

	public int getIsValidStore() {
		return this.isValidStore;
	}

	public TResultOrderListOfSubOrder setIsValidStore(int isValidStore) {
		this.isValidStore = isValidStore;
		setIsValidStoreIsSet(true);
		return this;
	}

	public void unsetIsValidStore() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISVALIDSTORE_ISSET_ID);
	}

	/**
	 * Returns true if field isValidStore is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetIsValidStore() {
		return EncodingUtils.testBit(__isset_bitfield, __ISVALIDSTORE_ISSET_ID);
	}

	public void setIsValidStoreIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISVALIDSTORE_ISSET_ID, value);
	}

	public int getWdgjStatus() {
		return this.wdgjStatus;
	}

	public TResultOrderListOfSubOrder setWdgjStatus(int wdgjStatus) {
		this.wdgjStatus = wdgjStatus;
		setWdgjStatusIsSet(true);
		return this;
	}

	public void unsetWdgjStatus() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WDGJSTATUS_ISSET_ID);
	}

	/**
	 * Returns true if field wdgjStatus is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetWdgjStatus() {
		return EncodingUtils.testBit(__isset_bitfield, __WDGJSTATUS_ISSET_ID);
	}

	public void setWdgjStatusIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WDGJSTATUS_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public TResultOrderListOfSubOrder setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatus() {
		return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public String getStatusName() {
		return this.statusName;
	}

	public TResultOrderListOfSubOrder setStatusName(String statusName) {
		this.statusName = statusName;
		return this;
	}

	public void unsetStatusName() {
		this.statusName = null;
	}

	/**
	 * Returns true if field statusName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetStatusName() {
		return this.statusName != null;
	}

	public void setStatusNameIsSet(boolean value) {
		if (!value) {
			this.statusName = null;
		}
	}

	public double getPayPrice() {
		return this.payPrice;
	}

	public TResultOrderListOfSubOrder setPayPrice(double payPrice) {
		this.payPrice = payPrice;
		setPayPriceIsSet(true);
		return this;
	}

	public void unsetPayPrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field payPrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPayPrice() {
		return EncodingUtils.testBit(__isset_bitfield, __PAYPRICE_ISSET_ID);
	}

	public void setPayPriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYPRICE_ISSET_ID, value);
	}

	public int getIsPaid() {
		return this.isPaid;
	}

	public TResultOrderListOfSubOrder setIsPaid(int isPaid) {
		this.isPaid = isPaid;
		setIsPaidIsSet(true);
		return this;
	}

	public void unsetIsPaid() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPAID_ISSET_ID);
	}

	/**
	 * Returns true if field isPaid is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsPaid() {
		return EncodingUtils.testBit(__isset_bitfield, __ISPAID_ISSET_ID);
	}

	public void setIsPaidIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPAID_ISSET_ID, value);
	}

	public String getFinishTime() {
		return this.finishTime;
	}

	public TResultOrderListOfSubOrder setFinishTime(String finishTime) {
		this.finishTime = finishTime;
		return this;
	}

	public void unsetFinishTime() {
		this.finishTime = null;
	}

	/**
	 * Returns true if field finishTime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetFinishTime() {
		return this.finishTime != null;
	}

	public void setFinishTimeIsSet(boolean value) {
		if (!value) {
			this.finishTime = null;
		}
	}

	public int getRelationId() {
		return this.relationId;
	}

	public TResultOrderListOfSubOrder setRelationId(int relationId) {
		this.relationId = relationId;
		setRelationIdIsSet(true);
		return this;
	}

	public void unsetRelationId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIONID_ISSET_ID);
	}

	/**
	 * Returns true if field relationId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetRelationId() {
		return EncodingUtils.testBit(__isset_bitfield, __RELATIONID_ISSET_ID);
	}

	public void setRelationIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIONID_ISSET_ID, value);
	}

	public int getFromType() {
		return this.fromType;
	}

	public TResultOrderListOfSubOrder setFromType(int fromType) {
		this.fromType = fromType;
		setFromTypeIsSet(true);
		return this;
	}

	public void unsetFromType() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROMTYPE_ISSET_ID);
	}

	/**
	 * Returns true if field fromType is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetFromType() {
		return EncodingUtils.testBit(__isset_bitfield, __FROMTYPE_ISSET_ID);
	}

	public void setFromTypeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROMTYPE_ISSET_ID, value);
	}

	public int getIsGroupon() {
		return this.isGroupon;
	}

	public TResultOrderListOfSubOrder setIsGroupon(int isGroupon) {
		this.isGroupon = isGroupon;
		setIsGrouponIsSet(true);
		return this;
	}

	public void unsetIsGroupon() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGROUPON_ISSET_ID);
	}

	/**
	 * Returns true if field isGroupon is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetIsGroupon() {
		return EncodingUtils.testBit(__isset_bitfield, __ISGROUPON_ISSET_ID);
	}

	public void setIsGrouponIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGROUPON_ISSET_ID, value);
	}

	public int getShowLogistics() {
		return this.showLogistics;
	}

	public TResultOrderListOfSubOrder setShowLogistics(int showLogistics) {
		this.showLogistics = showLogistics;
		setShowLogisticsIsSet(true);
		return this;
	}

	public void unsetShowLogistics() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWLOGISTICS_ISSET_ID);
	}

	/**
	 * Returns true if field showLogistics is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetShowLogistics() {
		return EncodingUtils.testBit(__isset_bitfield, __SHOWLOGISTICS_ISSET_ID);
	}

	public void setShowLogisticsIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWLOGISTICS_ISSET_ID, value);
	}

	public int getShowConfirm() {
		return this.showConfirm;
	}

	public TResultOrderListOfSubOrder setShowConfirm(int showConfirm) {
		this.showConfirm = showConfirm;
		setShowConfirmIsSet(true);
		return this;
	}

	public void unsetShowConfirm() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWCONFIRM_ISSET_ID);
	}

	/**
	 * Returns true if field showConfirm is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetShowConfirm() {
		return EncodingUtils.testBit(__isset_bitfield, __SHOWCONFIRM_ISSET_ID);
	}

	public void setShowConfirmIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWCONFIRM_ISSET_ID, value);
	}

	public int getOrderItemCount() {
		return this.orderItemCount;
	}

	public TResultOrderListOfSubOrder setOrderItemCount(int orderItemCount) {
		this.orderItemCount = orderItemCount;
		setOrderItemCountIsSet(true);
		return this;
	}

	public void unsetOrderItemCount() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERITEMCOUNT_ISSET_ID);
	}

	/**
	 * Returns true if field orderItemCount is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetOrderItemCount() {
		return EncodingUtils.testBit(__isset_bitfield, __ORDERITEMCOUNT_ISSET_ID);
	}

	public void setOrderItemCountIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERITEMCOUNT_ISSET_ID, value);
	}

	public int getShowComment() {
		return this.showComment;
	}

	public TResultOrderListOfSubOrder setShowComment(int showComment) {
		this.showComment = showComment;
		setShowCommentIsSet(true);
		return this;
	}

	public void unsetShowComment() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWCOMMENT_ISSET_ID);
	}

	/**
	 * Returns true if field showComment is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetShowComment() {
		return EncodingUtils.testBit(__isset_bitfield, __SHOWCOMMENT_ISSET_ID);
	}

	public void setShowCommentIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWCOMMENT_ISSET_ID, value);
	}

	public int getItemInfosSize() {
		return (this.itemInfos == null) ? 0 : this.itemInfos.size();
	}

	public java.util.Iterator<TResultOrderListOfItemInfo> getItemInfosIterator() {
		return (this.itemInfos == null) ? null : this.itemInfos.iterator();
	}

	public void addToItemInfos(TResultOrderListOfItemInfo elem) {
		if (this.itemInfos == null) {
			this.itemInfos = new ArrayList<TResultOrderListOfItemInfo>();
		}
		this.itemInfos.add(elem);
	}

	public List<TResultOrderListOfItemInfo> getItemInfos() {
		return this.itemInfos;
	}

	public TResultOrderListOfSubOrder setItemInfos(List<TResultOrderListOfItemInfo> itemInfos) {
		this.itemInfos = itemInfos;
		return this;
	}

	public void unsetItemInfos() {
		this.itemInfos = null;
	}

	/**
	 * Returns true if field itemInfos is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetItemInfos() {
		return this.itemInfos != null;
	}

	public void setItemInfosIsSet(boolean value) {
		if (!value) {
			this.itemInfos = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ORDER_CODE:
			if (value == null) {
				unsetOrderCode();
			} else {
				setOrderCode((String) value);
			}
			break;

		case ORDER_TIME:
			if (value == null) {
				unsetOrderTime();
			} else {
				setOrderTime((String) value);
			}
			break;

		case STORE_TITLE:
			if (value == null) {
				unsetStoreTitle();
			} else {
				setStoreTitle((String) value);
			}
			break;

		case STORE_ID:
			if (value == null) {
				unsetStoreId();
			} else {
				setStoreId((Integer) value);
			}
			break;

		case IS_VALID_STORE:
			if (value == null) {
				unsetIsValidStore();
			} else {
				setIsValidStore((Integer) value);
			}
			break;

		case WDGJ_STATUS:
			if (value == null) {
				unsetWdgjStatus();
			} else {
				setWdgjStatus((Integer) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			} else {
				setStatus((Integer) value);
			}
			break;

		case STATUS_NAME:
			if (value == null) {
				unsetStatusName();
			} else {
				setStatusName((String) value);
			}
			break;

		case PAY_PRICE:
			if (value == null) {
				unsetPayPrice();
			} else {
				setPayPrice((Double) value);
			}
			break;

		case IS_PAID:
			if (value == null) {
				unsetIsPaid();
			} else {
				setIsPaid((Integer) value);
			}
			break;

		case FINISH_TIME:
			if (value == null) {
				unsetFinishTime();
			} else {
				setFinishTime((String) value);
			}
			break;

		case RELATION_ID:
			if (value == null) {
				unsetRelationId();
			} else {
				setRelationId((Integer) value);
			}
			break;

		case FROM_TYPE:
			if (value == null) {
				unsetFromType();
			} else {
				setFromType((Integer) value);
			}
			break;

		case IS_GROUPON:
			if (value == null) {
				unsetIsGroupon();
			} else {
				setIsGroupon((Integer) value);
			}
			break;

		case SHOW_LOGISTICS:
			if (value == null) {
				unsetShowLogistics();
			} else {
				setShowLogistics((Integer) value);
			}
			break;

		case SHOW_CONFIRM:
			if (value == null) {
				unsetShowConfirm();
			} else {
				setShowConfirm((Integer) value);
			}
			break;

		case ORDER_ITEM_COUNT:
			if (value == null) {
				unsetOrderItemCount();
			} else {
				setOrderItemCount((Integer) value);
			}
			break;

		case SHOW_COMMENT:
			if (value == null) {
				unsetShowComment();
			} else {
				setShowComment((Integer) value);
			}
			break;

		case ITEM_INFOS:
			if (value == null) {
				unsetItemInfos();
			} else {
				setItemInfos((List<TResultOrderListOfItemInfo>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ORDER_CODE:
			return getOrderCode();

		case ORDER_TIME:
			return getOrderTime();

		case STORE_TITLE:
			return getStoreTitle();

		case STORE_ID:
			return getStoreId();

		case IS_VALID_STORE:
			return getIsValidStore();

		case WDGJ_STATUS:
			return getWdgjStatus();

		case STATUS:
			return getStatus();

		case STATUS_NAME:
			return getStatusName();

		case PAY_PRICE:
			return getPayPrice();

		case IS_PAID:
			return getIsPaid();

		case FINISH_TIME:
			return getFinishTime();

		case RELATION_ID:
			return getRelationId();

		case FROM_TYPE:
			return getFromType();

		case IS_GROUPON:
			return getIsGroupon();

		case SHOW_LOGISTICS:
			return getShowLogistics();

		case SHOW_CONFIRM:
			return getShowConfirm();

		case ORDER_ITEM_COUNT:
			return getOrderItemCount();

		case SHOW_COMMENT:
			return getShowComment();

		case ITEM_INFOS:
			return getItemInfos();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ORDER_CODE:
			return isSetOrderCode();
		case ORDER_TIME:
			return isSetOrderTime();
		case STORE_TITLE:
			return isSetStoreTitle();
		case STORE_ID:
			return isSetStoreId();
		case IS_VALID_STORE:
			return isSetIsValidStore();
		case WDGJ_STATUS:
			return isSetWdgjStatus();
		case STATUS:
			return isSetStatus();
		case STATUS_NAME:
			return isSetStatusName();
		case PAY_PRICE:
			return isSetPayPrice();
		case IS_PAID:
			return isSetIsPaid();
		case FINISH_TIME:
			return isSetFinishTime();
		case RELATION_ID:
			return isSetRelationId();
		case FROM_TYPE:
			return isSetFromType();
		case IS_GROUPON:
			return isSetIsGroupon();
		case SHOW_LOGISTICS:
			return isSetShowLogistics();
		case SHOW_CONFIRM:
			return isSetShowConfirm();
		case ORDER_ITEM_COUNT:
			return isSetOrderItemCount();
		case SHOW_COMMENT:
			return isSetShowComment();
		case ITEM_INFOS:
			return isSetItemInfos();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TResultOrderListOfSubOrder)
			return this.equals((TResultOrderListOfSubOrder) that);
		return false;
	}

	public boolean equals(TResultOrderListOfSubOrder that) {
		if (that == null)
			return false;

		boolean this_present_orderCode = true && this.isSetOrderCode();
		boolean that_present_orderCode = true && that.isSetOrderCode();
		if (this_present_orderCode || that_present_orderCode) {
			if (!(this_present_orderCode && that_present_orderCode))
				return false;
			if (!this.orderCode.equals(that.orderCode))
				return false;
		}

		boolean this_present_orderTime = true && this.isSetOrderTime();
		boolean that_present_orderTime = true && that.isSetOrderTime();
		if (this_present_orderTime || that_present_orderTime) {
			if (!(this_present_orderTime && that_present_orderTime))
				return false;
			if (!this.orderTime.equals(that.orderTime))
				return false;
		}

		boolean this_present_storeTitle = true && this.isSetStoreTitle();
		boolean that_present_storeTitle = true && that.isSetStoreTitle();
		if (this_present_storeTitle || that_present_storeTitle) {
			if (!(this_present_storeTitle && that_present_storeTitle))
				return false;
			if (!this.storeTitle.equals(that.storeTitle))
				return false;
		}

		boolean this_present_storeId = true;
		boolean that_present_storeId = true;
		if (this_present_storeId || that_present_storeId) {
			if (!(this_present_storeId && that_present_storeId))
				return false;
			if (this.storeId != that.storeId)
				return false;
		}

		boolean this_present_isValidStore = true;
		boolean that_present_isValidStore = true;
		if (this_present_isValidStore || that_present_isValidStore) {
			if (!(this_present_isValidStore && that_present_isValidStore))
				return false;
			if (this.isValidStore != that.isValidStore)
				return false;
		}

		boolean this_present_wdgjStatus = true;
		boolean that_present_wdgjStatus = true;
		if (this_present_wdgjStatus || that_present_wdgjStatus) {
			if (!(this_present_wdgjStatus && that_present_wdgjStatus))
				return false;
			if (this.wdgjStatus != that.wdgjStatus)
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_statusName = true && this.isSetStatusName();
		boolean that_present_statusName = true && that.isSetStatusName();
		if (this_present_statusName || that_present_statusName) {
			if (!(this_present_statusName && that_present_statusName))
				return false;
			if (!this.statusName.equals(that.statusName))
				return false;
		}

		boolean this_present_payPrice = true;
		boolean that_present_payPrice = true;
		if (this_present_payPrice || that_present_payPrice) {
			if (!(this_present_payPrice && that_present_payPrice))
				return false;
			if (this.payPrice != that.payPrice)
				return false;
		}

		boolean this_present_isPaid = true;
		boolean that_present_isPaid = true;
		if (this_present_isPaid || that_present_isPaid) {
			if (!(this_present_isPaid && that_present_isPaid))
				return false;
			if (this.isPaid != that.isPaid)
				return false;
		}

		boolean this_present_finishTime = true && this.isSetFinishTime();
		boolean that_present_finishTime = true && that.isSetFinishTime();
		if (this_present_finishTime || that_present_finishTime) {
			if (!(this_present_finishTime && that_present_finishTime))
				return false;
			if (!this.finishTime.equals(that.finishTime))
				return false;
		}

		boolean this_present_relationId = true;
		boolean that_present_relationId = true;
		if (this_present_relationId || that_present_relationId) {
			if (!(this_present_relationId && that_present_relationId))
				return false;
			if (this.relationId != that.relationId)
				return false;
		}

		boolean this_present_fromType = true;
		boolean that_present_fromType = true;
		if (this_present_fromType || that_present_fromType) {
			if (!(this_present_fromType && that_present_fromType))
				return false;
			if (this.fromType != that.fromType)
				return false;
		}

		boolean this_present_isGroupon = true;
		boolean that_present_isGroupon = true;
		if (this_present_isGroupon || that_present_isGroupon) {
			if (!(this_present_isGroupon && that_present_isGroupon))
				return false;
			if (this.isGroupon != that.isGroupon)
				return false;
		}

		boolean this_present_showLogistics = true;
		boolean that_present_showLogistics = true;
		if (this_present_showLogistics || that_present_showLogistics) {
			if (!(this_present_showLogistics && that_present_showLogistics))
				return false;
			if (this.showLogistics != that.showLogistics)
				return false;
		}

		boolean this_present_showConfirm = true;
		boolean that_present_showConfirm = true;
		if (this_present_showConfirm || that_present_showConfirm) {
			if (!(this_present_showConfirm && that_present_showConfirm))
				return false;
			if (this.showConfirm != that.showConfirm)
				return false;
		}

		boolean this_present_orderItemCount = true;
		boolean that_present_orderItemCount = true;
		if (this_present_orderItemCount || that_present_orderItemCount) {
			if (!(this_present_orderItemCount && that_present_orderItemCount))
				return false;
			if (this.orderItemCount != that.orderItemCount)
				return false;
		}

		boolean this_present_showComment = true;
		boolean that_present_showComment = true;
		if (this_present_showComment || that_present_showComment) {
			if (!(this_present_showComment && that_present_showComment))
				return false;
			if (this.showComment != that.showComment)
				return false;
		}

		boolean this_present_itemInfos = true && this.isSetItemInfos();
		boolean that_present_itemInfos = true && that.isSetItemInfos();
		if (this_present_itemInfos || that_present_itemInfos) {
			if (!(this_present_itemInfos && that_present_itemInfos))
				return false;
			if (!this.itemInfos.equals(that.itemInfos))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_orderCode = true && (isSetOrderCode());
		list.add(present_orderCode);
		if (present_orderCode)
			list.add(orderCode);

		boolean present_orderTime = true && (isSetOrderTime());
		list.add(present_orderTime);
		if (present_orderTime)
			list.add(orderTime);

		boolean present_storeTitle = true && (isSetStoreTitle());
		list.add(present_storeTitle);
		if (present_storeTitle)
			list.add(storeTitle);

		boolean present_storeId = true;
		list.add(present_storeId);
		if (present_storeId)
			list.add(storeId);

		boolean present_isValidStore = true;
		list.add(present_isValidStore);
		if (present_isValidStore)
			list.add(isValidStore);

		boolean present_wdgjStatus = true;
		list.add(present_wdgjStatus);
		if (present_wdgjStatus)
			list.add(wdgjStatus);

		boolean present_status = true;
		list.add(present_status);
		if (present_status)
			list.add(status);

		boolean present_statusName = true && (isSetStatusName());
		list.add(present_statusName);
		if (present_statusName)
			list.add(statusName);

		boolean present_payPrice = true;
		list.add(present_payPrice);
		if (present_payPrice)
			list.add(payPrice);

		boolean present_isPaid = true;
		list.add(present_isPaid);
		if (present_isPaid)
			list.add(isPaid);

		boolean present_finishTime = true && (isSetFinishTime());
		list.add(present_finishTime);
		if (present_finishTime)
			list.add(finishTime);

		boolean present_relationId = true;
		list.add(present_relationId);
		if (present_relationId)
			list.add(relationId);

		boolean present_fromType = true;
		list.add(present_fromType);
		if (present_fromType)
			list.add(fromType);

		boolean present_isGroupon = true;
		list.add(present_isGroupon);
		if (present_isGroupon)
			list.add(isGroupon);

		boolean present_showLogistics = true;
		list.add(present_showLogistics);
		if (present_showLogistics)
			list.add(showLogistics);

		boolean present_showConfirm = true;
		list.add(present_showConfirm);
		if (present_showConfirm)
			list.add(showConfirm);

		boolean present_orderItemCount = true;
		list.add(present_orderItemCount);
		if (present_orderItemCount)
			list.add(orderItemCount);

		boolean present_showComment = true;
		list.add(present_showComment);
		if (present_showComment)
			list.add(showComment);

		boolean present_itemInfos = true && (isSetItemInfos());
		list.add(present_itemInfos);
		if (present_itemInfos)
			list.add(itemInfos);

		return list.hashCode();
	}

	@Override
	public int compareTo(TResultOrderListOfSubOrder other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetOrderCode()).compareTo(other.isSetOrderCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCode, other.orderCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderTime()).compareTo(other.isSetOrderTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTime, other.orderTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStoreTitle()).compareTo(other.isSetStoreTitle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStoreTitle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeTitle, other.storeTitle);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStoreId()).compareTo(other.isSetStoreId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStoreId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeId, other.storeId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsValidStore()).compareTo(other.isSetIsValidStore());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsValidStore()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isValidStore, other.isValidStore);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetWdgjStatus()).compareTo(other.isSetWdgjStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWdgjStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wdgjStatus, other.wdgjStatus);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStatusName()).compareTo(other.isSetStatusName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusName, other.statusName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPayPrice()).compareTo(other.isSetPayPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPrice, other.payPrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsPaid()).compareTo(other.isSetIsPaid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsPaid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPaid, other.isPaid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(other.isSetFinishTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFinishTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, other.finishTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRelationId()).compareTo(other.isSetRelationId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRelationId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relationId, other.relationId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFromType()).compareTo(other.isSetFromType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFromType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromType, other.fromType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsGroupon()).compareTo(other.isSetIsGroupon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsGroupon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGroupon, other.isGroupon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetShowLogistics()).compareTo(other.isSetShowLogistics());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetShowLogistics()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showLogistics, other.showLogistics);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetShowConfirm()).compareTo(other.isSetShowConfirm());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetShowConfirm()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showConfirm, other.showConfirm);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderItemCount()).compareTo(other.isSetOrderItemCount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderItemCount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderItemCount, other.orderItemCount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetShowComment()).compareTo(other.isSetShowComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetShowComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showComment, other.showComment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetItemInfos()).compareTo(other.isSetItemInfos());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetItemInfos()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemInfos, other.itemInfos);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TResultOrderListOfSubOrder(");
		boolean first = true;

		sb.append("orderCode:");
		if (this.orderCode == null) {
			sb.append("null");
		} else {
			sb.append(this.orderCode);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderTime:");
		if (this.orderTime == null) {
			sb.append("null");
		} else {
			sb.append(this.orderTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("storeTitle:");
		if (this.storeTitle == null) {
			sb.append("null");
		} else {
			sb.append(this.storeTitle);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("storeId:");
		sb.append(this.storeId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isValidStore:");
		sb.append(this.isValidStore);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("wdgjStatus:");
		sb.append(this.wdgjStatus);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("statusName:");
		if (this.statusName == null) {
			sb.append("null");
		} else {
			sb.append(this.statusName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payPrice:");
		sb.append(this.payPrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isPaid:");
		sb.append(this.isPaid);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("finishTime:");
		if (this.finishTime == null) {
			sb.append("null");
		} else {
			sb.append(this.finishTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("relationId:");
		sb.append(this.relationId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("fromType:");
		sb.append(this.fromType);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isGroupon:");
		sb.append(this.isGroupon);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("showLogistics:");
		sb.append(this.showLogistics);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("showConfirm:");
		sb.append(this.showConfirm);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderItemCount:");
		sb.append(this.orderItemCount);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("showComment:");
		sb.append(this.showComment);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("itemInfos:");
		if (this.itemInfos == null) {
			sb.append("null");
		} else {
			sb.append(this.itemInfos);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TResultOrderListOfSubOrderStandardSchemeFactory implements SchemeFactory {
		public TResultOrderListOfSubOrderStandardScheme getScheme() {
			return new TResultOrderListOfSubOrderStandardScheme();
		}
	}

	private static class TResultOrderListOfSubOrderStandardScheme extends StandardScheme<TResultOrderListOfSubOrder> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TResultOrderListOfSubOrder struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ORDER_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderCode = iprot.readString();
						struct.setOrderCodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // ORDER_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderTime = iprot.readString();
						struct.setOrderTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // STORE_TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.storeTitle = iprot.readString();
						struct.setStoreTitleIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // STORE_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.storeId = iprot.readI32();
						struct.setStoreIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // IS_VALID_STORE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.isValidStore = iprot.readI32();
						struct.setIsValidStoreIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // WDGJ_STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.wdgjStatus = iprot.readI32();
						struct.setWdgjStatusIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // STATUS_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.statusName = iprot.readString();
						struct.setStatusNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // PAY_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.payPrice = iprot.readDouble();
						struct.setPayPriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // IS_PAID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.isPaid = iprot.readI32();
						struct.setIsPaidIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // FINISH_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.finishTime = iprot.readString();
						struct.setFinishTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // RELATION_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.relationId = iprot.readI32();
						struct.setRelationIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // FROM_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.fromType = iprot.readI32();
						struct.setFromTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // IS_GROUPON
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.isGroupon = iprot.readI32();
						struct.setIsGrouponIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // SHOW_LOGISTICS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.showLogistics = iprot.readI32();
						struct.setShowLogisticsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // SHOW_CONFIRM
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.showConfirm = iprot.readI32();
						struct.setShowConfirmIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // ORDER_ITEM_COUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.orderItemCount = iprot.readI32();
						struct.setOrderItemCountIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // SHOW_COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.showComment = iprot.readI32();
						struct.setShowCommentIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // ITEM_INFOS
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
							struct.itemInfos = new ArrayList<TResultOrderListOfItemInfo>(_list8.size);
							TResultOrderListOfItemInfo _elem9;
							for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
								_elem9 = new TResultOrderListOfItemInfo();
								_elem9.read(iprot);
								struct.itemInfos.add(_elem9);
							}
							iprot.readListEnd();
						}
						struct.setItemInfosIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TResultOrderListOfSubOrder struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.orderCode != null) {
				oprot.writeFieldBegin(ORDER_CODE_FIELD_DESC);
				oprot.writeString(struct.orderCode);
				oprot.writeFieldEnd();
			}
			if (struct.orderTime != null) {
				oprot.writeFieldBegin(ORDER_TIME_FIELD_DESC);
				oprot.writeString(struct.orderTime);
				oprot.writeFieldEnd();
			}
			if (struct.storeTitle != null) {
				oprot.writeFieldBegin(STORE_TITLE_FIELD_DESC);
				oprot.writeString(struct.storeTitle);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STORE_ID_FIELD_DESC);
			oprot.writeI32(struct.storeId);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_VALID_STORE_FIELD_DESC);
			oprot.writeI32(struct.isValidStore);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(WDGJ_STATUS_FIELD_DESC);
			oprot.writeI32(struct.wdgjStatus);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.statusName != null) {
				oprot.writeFieldBegin(STATUS_NAME_FIELD_DESC);
				oprot.writeString(struct.statusName);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(PAY_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.payPrice);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_PAID_FIELD_DESC);
			oprot.writeI32(struct.isPaid);
			oprot.writeFieldEnd();
			if (struct.finishTime != null) {
				oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
				oprot.writeString(struct.finishTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(RELATION_ID_FIELD_DESC);
			oprot.writeI32(struct.relationId);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(FROM_TYPE_FIELD_DESC);
			oprot.writeI32(struct.fromType);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_GROUPON_FIELD_DESC);
			oprot.writeI32(struct.isGroupon);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SHOW_LOGISTICS_FIELD_DESC);
			oprot.writeI32(struct.showLogistics);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SHOW_CONFIRM_FIELD_DESC);
			oprot.writeI32(struct.showConfirm);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(ORDER_ITEM_COUNT_FIELD_DESC);
			oprot.writeI32(struct.orderItemCount);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SHOW_COMMENT_FIELD_DESC);
			oprot.writeI32(struct.showComment);
			oprot.writeFieldEnd();
			if (struct.itemInfos != null) {
				oprot.writeFieldBegin(ITEM_INFOS_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
							struct.itemInfos.size()));
					for (TResultOrderListOfItemInfo _iter11 : struct.itemInfos) {
						_iter11.write(oprot);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TResultOrderListOfSubOrderTupleSchemeFactory implements SchemeFactory {
		public TResultOrderListOfSubOrderTupleScheme getScheme() {
			return new TResultOrderListOfSubOrderTupleScheme();
		}
	}

	private static class TResultOrderListOfSubOrderTupleScheme extends TupleScheme<TResultOrderListOfSubOrder> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TResultOrderListOfSubOrder struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetOrderCode()) {
				optionals.set(0);
			}
			if (struct.isSetOrderTime()) {
				optionals.set(1);
			}
			if (struct.isSetStoreTitle()) {
				optionals.set(2);
			}
			if (struct.isSetStoreId()) {
				optionals.set(3);
			}
			if (struct.isSetIsValidStore()) {
				optionals.set(4);
			}
			if (struct.isSetWdgjStatus()) {
				optionals.set(5);
			}
			if (struct.isSetStatus()) {
				optionals.set(6);
			}
			if (struct.isSetStatusName()) {
				optionals.set(7);
			}
			if (struct.isSetPayPrice()) {
				optionals.set(8);
			}
			if (struct.isSetIsPaid()) {
				optionals.set(9);
			}
			if (struct.isSetFinishTime()) {
				optionals.set(10);
			}
			if (struct.isSetRelationId()) {
				optionals.set(11);
			}
			if (struct.isSetFromType()) {
				optionals.set(12);
			}
			if (struct.isSetIsGroupon()) {
				optionals.set(13);
			}
			if (struct.isSetShowLogistics()) {
				optionals.set(14);
			}
			if (struct.isSetShowConfirm()) {
				optionals.set(15);
			}
			if (struct.isSetOrderItemCount()) {
				optionals.set(16);
			}
			if (struct.isSetShowComment()) {
				optionals.set(17);
			}
			if (struct.isSetItemInfos()) {
				optionals.set(18);
			}
			oprot.writeBitSet(optionals, 19);
			if (struct.isSetOrderCode()) {
				oprot.writeString(struct.orderCode);
			}
			if (struct.isSetOrderTime()) {
				oprot.writeString(struct.orderTime);
			}
			if (struct.isSetStoreTitle()) {
				oprot.writeString(struct.storeTitle);
			}
			if (struct.isSetStoreId()) {
				oprot.writeI32(struct.storeId);
			}
			if (struct.isSetIsValidStore()) {
				oprot.writeI32(struct.isValidStore);
			}
			if (struct.isSetWdgjStatus()) {
				oprot.writeI32(struct.wdgjStatus);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetStatusName()) {
				oprot.writeString(struct.statusName);
			}
			if (struct.isSetPayPrice()) {
				oprot.writeDouble(struct.payPrice);
			}
			if (struct.isSetIsPaid()) {
				oprot.writeI32(struct.isPaid);
			}
			if (struct.isSetFinishTime()) {
				oprot.writeString(struct.finishTime);
			}
			if (struct.isSetRelationId()) {
				oprot.writeI32(struct.relationId);
			}
			if (struct.isSetFromType()) {
				oprot.writeI32(struct.fromType);
			}
			if (struct.isSetIsGroupon()) {
				oprot.writeI32(struct.isGroupon);
			}
			if (struct.isSetShowLogistics()) {
				oprot.writeI32(struct.showLogistics);
			}
			if (struct.isSetShowConfirm()) {
				oprot.writeI32(struct.showConfirm);
			}
			if (struct.isSetOrderItemCount()) {
				oprot.writeI32(struct.orderItemCount);
			}
			if (struct.isSetShowComment()) {
				oprot.writeI32(struct.showComment);
			}
			if (struct.isSetItemInfos()) {
				{
					oprot.writeI32(struct.itemInfos.size());
					for (TResultOrderListOfItemInfo _iter12 : struct.itemInfos) {
						_iter12.write(oprot);
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TResultOrderListOfSubOrder struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(19);
			if (incoming.get(0)) {
				struct.orderCode = iprot.readString();
				struct.setOrderCodeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.orderTime = iprot.readString();
				struct.setOrderTimeIsSet(true);
			}
			if (incoming.get(2)) {
				struct.storeTitle = iprot.readString();
				struct.setStoreTitleIsSet(true);
			}
			if (incoming.get(3)) {
				struct.storeId = iprot.readI32();
				struct.setStoreIdIsSet(true);
			}
			if (incoming.get(4)) {
				struct.isValidStore = iprot.readI32();
				struct.setIsValidStoreIsSet(true);
			}
			if (incoming.get(5)) {
				struct.wdgjStatus = iprot.readI32();
				struct.setWdgjStatusIsSet(true);
			}
			if (incoming.get(6)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(7)) {
				struct.statusName = iprot.readString();
				struct.setStatusNameIsSet(true);
			}
			if (incoming.get(8)) {
				struct.payPrice = iprot.readDouble();
				struct.setPayPriceIsSet(true);
			}
			if (incoming.get(9)) {
				struct.isPaid = iprot.readI32();
				struct.setIsPaidIsSet(true);
			}
			if (incoming.get(10)) {
				struct.finishTime = iprot.readString();
				struct.setFinishTimeIsSet(true);
			}
			if (incoming.get(11)) {
				struct.relationId = iprot.readI32();
				struct.setRelationIdIsSet(true);
			}
			if (incoming.get(12)) {
				struct.fromType = iprot.readI32();
				struct.setFromTypeIsSet(true);
			}
			if (incoming.get(13)) {
				struct.isGroupon = iprot.readI32();
				struct.setIsGrouponIsSet(true);
			}
			if (incoming.get(14)) {
				struct.showLogistics = iprot.readI32();
				struct.setShowLogisticsIsSet(true);
			}
			if (incoming.get(15)) {
				struct.showConfirm = iprot.readI32();
				struct.setShowConfirmIsSet(true);
			}
			if (incoming.get(16)) {
				struct.orderItemCount = iprot.readI32();
				struct.setOrderItemCountIsSet(true);
			}
			if (incoming.get(17)) {
				struct.showComment = iprot.readI32();
				struct.setShowCommentIsSet(true);
			}
			if (incoming.get(18)) {
				{
					org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
					struct.itemInfos = new ArrayList<TResultOrderListOfItemInfo>(_list13.size);
					TResultOrderListOfItemInfo _elem14;
					for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
						_elem14 = new TResultOrderListOfItemInfo();
						_elem14.read(iprot);
						struct.itemInfos.add(_elem14);
					}
				}
				struct.setItemInfosIsSet(true);
			}
		}
	}

}
