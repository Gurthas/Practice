/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TItemInfo implements org.apache.thrift.TBase<TItemInfo, TItemInfo._Fields>, java.io.Serializable,
		Cloneable, Comparable<TItemInfo> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TItemInfo");

	private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"itemId", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField ITEM_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"itemSize", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderCode", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField PIC_FIELD_DESC = new org.apache.thrift.protocol.TField("pic",
			org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"name", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"quantity", org.apache.thrift.protocol.TType.I32, (short) 6);
	private static final org.apache.thrift.protocol.TField SALE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"salePrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 7);
	private static final org.apache.thrift.protocol.TField IS_GIFT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isGift", org.apache.thrift.protocol.TType.I16, (short) 8);
	private static final org.apache.thrift.protocol.TField IS_SPU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isSpu", org.apache.thrift.protocol.TType.I16, (short) 9);
	private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderType", org.apache.thrift.protocol.TType.I16, (short) 10);
	private static final org.apache.thrift.protocol.TField RETURN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"returnStatus", org.apache.thrift.protocol.TType.I16, (short) 11);
	private static final org.apache.thrift.protocol.TField ITEM_RETURN_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"itemReturnTitle", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TItemInfoStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TItemInfoTupleSchemeFactory());
	}

	public int itemId; // required
	public String itemSize; // required
	public String orderCode; // required
	public String pic; // required
	public String name; // required
	public int quantity; // required
	public double salePrice; // required
	public short isGift; // required
	public short isSpu; // required
	public short orderType; // required
	public short returnStatus; // required
	public String itemReturnTitle; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ITEM_ID((short) 1, "itemId"), ITEM_SIZE((short) 2, "itemSize"), ORDER_CODE((short) 3, "orderCode"), PIC(
				(short) 4, "pic"), NAME((short) 5, "name"), QUANTITY((short) 6, "quantity"), SALE_PRICE((short) 7,
						"salePrice"), IS_GIFT((short) 8, "isGift"), IS_SPU((short) 9, "isSpu"), ORDER_TYPE((short) 10,
								"orderType"), RETURN_STATUS((short) 11,
										"returnStatus"), ITEM_RETURN_TITLE((short) 12, "itemReturnTitle");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ITEM_ID
				return ITEM_ID;
			case 2: // ITEM_SIZE
				return ITEM_SIZE;
			case 3: // ORDER_CODE
				return ORDER_CODE;
			case 4: // PIC
				return PIC;
			case 5: // NAME
				return NAME;
			case 6: // QUANTITY
				return QUANTITY;
			case 7: // SALE_PRICE
				return SALE_PRICE;
			case 8: // IS_GIFT
				return IS_GIFT;
			case 9: // IS_SPU
				return IS_SPU;
			case 10: // ORDER_TYPE
				return ORDER_TYPE;
			case 11: // RETURN_STATUS
				return RETURN_STATUS;
			case 12: // ITEM_RETURN_TITLE
				return ITEM_RETURN_TITLE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ITEMID_ISSET_ID = 0;
	private static final int __QUANTITY_ISSET_ID = 1;
	private static final int __SALEPRICE_ISSET_ID = 2;
	private static final int __ISGIFT_ISSET_ID = 3;
	private static final int __ISSPU_ISSET_ID = 4;
	private static final int __ORDERTYPE_ISSET_ID = 5;
	private static final int __RETURNSTATUS_ISSET_ID = 6;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ITEM_ID,
				new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ITEM_SIZE,
				new org.apache.thrift.meta_data.FieldMetaData("itemSize",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ORDER_CODE,
				new org.apache.thrift.meta_data.FieldMetaData("orderCode",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PIC,
				new org.apache.thrift.meta_data.FieldMetaData("pic", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NAME,
				new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.QUANTITY,
				new org.apache.thrift.meta_data.FieldMetaData("quantity",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SALE_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("salePrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.IS_GIFT,
				new org.apache.thrift.meta_data.FieldMetaData("isGift", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.IS_SPU,
				new org.apache.thrift.meta_data.FieldMetaData("isSpu", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.ORDER_TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("orderType",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.RETURN_STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("returnStatus",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.ITEM_RETURN_TITLE,
				new org.apache.thrift.meta_data.FieldMetaData("itemReturnTitle",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TItemInfo.class, metaDataMap);
	}

	public TItemInfo() {
	}

	public TItemInfo(int itemId, String itemSize, String orderCode, String pic, String name, int quantity,
			double salePrice, short isGift, short isSpu, short orderType, short returnStatus, String itemReturnTitle) {
		this();
		this.itemId = itemId;
		setItemIdIsSet(true);
		this.itemSize = itemSize;
		this.orderCode = orderCode;
		this.pic = pic;
		this.name = name;
		this.quantity = quantity;
		setQuantityIsSet(true);
		this.salePrice = salePrice;
		setSalePriceIsSet(true);
		this.isGift = isGift;
		setIsGiftIsSet(true);
		this.isSpu = isSpu;
		setIsSpuIsSet(true);
		this.orderType = orderType;
		setOrderTypeIsSet(true);
		this.returnStatus = returnStatus;
		setReturnStatusIsSet(true);
		this.itemReturnTitle = itemReturnTitle;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TItemInfo(TItemInfo other) {
		__isset_bitfield = other.__isset_bitfield;
		this.itemId = other.itemId;
		if (other.isSetItemSize()) {
			this.itemSize = other.itemSize;
		}
		if (other.isSetOrderCode()) {
			this.orderCode = other.orderCode;
		}
		if (other.isSetPic()) {
			this.pic = other.pic;
		}
		if (other.isSetName()) {
			this.name = other.name;
		}
		this.quantity = other.quantity;
		this.salePrice = other.salePrice;
		this.isGift = other.isGift;
		this.isSpu = other.isSpu;
		this.orderType = other.orderType;
		this.returnStatus = other.returnStatus;
		if (other.isSetItemReturnTitle()) {
			this.itemReturnTitle = other.itemReturnTitle;
		}
	}

	public TItemInfo deepCopy() {
		return new TItemInfo(this);
	}

	@Override
	public void clear() {
		setItemIdIsSet(false);
		this.itemId = 0;
		this.itemSize = null;
		this.orderCode = null;
		this.pic = null;
		this.name = null;
		setQuantityIsSet(false);
		this.quantity = 0;
		setSalePriceIsSet(false);
		this.salePrice = 0.0;
		setIsGiftIsSet(false);
		this.isGift = 0;
		setIsSpuIsSet(false);
		this.isSpu = 0;
		setOrderTypeIsSet(false);
		this.orderType = 0;
		setReturnStatusIsSet(false);
		this.returnStatus = 0;
		this.itemReturnTitle = null;
	}

	public int getItemId() {
		return this.itemId;
	}

	public TItemInfo setItemId(int itemId) {
		this.itemId = itemId;
		setItemIdIsSet(true);
		return this;
	}

	public void unsetItemId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
	}

	/**
	 * Returns true if field itemId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetItemId() {
		return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
	}

	public void setItemIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
	}

	public String getItemSize() {
		return this.itemSize;
	}

	public TItemInfo setItemSize(String itemSize) {
		this.itemSize = itemSize;
		return this;
	}

	public void unsetItemSize() {
		this.itemSize = null;
	}

	/**
	 * Returns true if field itemSize is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetItemSize() {
		return this.itemSize != null;
	}

	public void setItemSizeIsSet(boolean value) {
		if (!value) {
			this.itemSize = null;
		}
	}

	public String getOrderCode() {
		return this.orderCode;
	}

	public TItemInfo setOrderCode(String orderCode) {
		this.orderCode = orderCode;
		return this;
	}

	public void unsetOrderCode() {
		this.orderCode = null;
	}

	/**
	 * Returns true if field orderCode is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderCode() {
		return this.orderCode != null;
	}

	public void setOrderCodeIsSet(boolean value) {
		if (!value) {
			this.orderCode = null;
		}
	}

	public String getPic() {
		return this.pic;
	}

	public TItemInfo setPic(String pic) {
		this.pic = pic;
		return this;
	}

	public void unsetPic() {
		this.pic = null;
	}

	/**
	 * Returns true if field pic is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPic() {
		return this.pic != null;
	}

	public void setPicIsSet(boolean value) {
		if (!value) {
			this.pic = null;
		}
	}

	public String getName() {
		return this.name;
	}

	public TItemInfo setName(String name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	/**
	 * Returns true if field name is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	public int getQuantity() {
		return this.quantity;
	}

	public TItemInfo setQuantity(int quantity) {
		this.quantity = quantity;
		setQuantityIsSet(true);
		return this;
	}

	public void unsetQuantity() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
	}

	/**
	 * Returns true if field quantity is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetQuantity() {
		return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
	}

	public void setQuantityIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
	}

	public double getSalePrice() {
		return this.salePrice;
	}

	public TItemInfo setSalePrice(double salePrice) {
		this.salePrice = salePrice;
		setSalePriceIsSet(true);
		return this;
	}

	public void unsetSalePrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field salePrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSalePrice() {
		return EncodingUtils.testBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
	}

	public void setSalePriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALEPRICE_ISSET_ID, value);
	}

	public short getIsGift() {
		return this.isGift;
	}

	public TItemInfo setIsGift(short isGift) {
		this.isGift = isGift;
		setIsGiftIsSet(true);
		return this;
	}

	public void unsetIsGift() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGIFT_ISSET_ID);
	}

	/**
	 * Returns true if field isGift is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsGift() {
		return EncodingUtils.testBit(__isset_bitfield, __ISGIFT_ISSET_ID);
	}

	public void setIsGiftIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGIFT_ISSET_ID, value);
	}

	public short getIsSpu() {
		return this.isSpu;
	}

	public TItemInfo setIsSpu(short isSpu) {
		this.isSpu = isSpu;
		setIsSpuIsSet(true);
		return this;
	}

	public void unsetIsSpu() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSPU_ISSET_ID);
	}

	/**
	 * Returns true if field isSpu is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsSpu() {
		return EncodingUtils.testBit(__isset_bitfield, __ISSPU_ISSET_ID);
	}

	public void setIsSpuIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSPU_ISSET_ID, value);
	}

	public short getOrderType() {
		return this.orderType;
	}

	public TItemInfo setOrderType(short orderType) {
		this.orderType = orderType;
		setOrderTypeIsSet(true);
		return this;
	}

	public void unsetOrderType() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
	}

	/**
	 * Returns true if field orderType is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderType() {
		return EncodingUtils.testBit(__isset_bitfield, __ORDERTYPE_ISSET_ID);
	}

	public void setOrderTypeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERTYPE_ISSET_ID, value);
	}

	public short getReturnStatus() {
		return this.returnStatus;
	}

	public TItemInfo setReturnStatus(short returnStatus) {
		this.returnStatus = returnStatus;
		setReturnStatusIsSet(true);
		return this;
	}

	public void unsetReturnStatus() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNSTATUS_ISSET_ID);
	}

	/**
	 * Returns true if field returnStatus is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetReturnStatus() {
		return EncodingUtils.testBit(__isset_bitfield, __RETURNSTATUS_ISSET_ID);
	}

	public void setReturnStatusIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNSTATUS_ISSET_ID, value);
	}

	public String getItemReturnTitle() {
		return this.itemReturnTitle;
	}

	public TItemInfo setItemReturnTitle(String itemReturnTitle) {
		this.itemReturnTitle = itemReturnTitle;
		return this;
	}

	public void unsetItemReturnTitle() {
		this.itemReturnTitle = null;
	}

	/**
	 * Returns true if field itemReturnTitle is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetItemReturnTitle() {
		return this.itemReturnTitle != null;
	}

	public void setItemReturnTitleIsSet(boolean value) {
		if (!value) {
			this.itemReturnTitle = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ITEM_ID:
			if (value == null) {
				unsetItemId();
			} else {
				setItemId((Integer) value);
			}
			break;

		case ITEM_SIZE:
			if (value == null) {
				unsetItemSize();
			} else {
				setItemSize((String) value);
			}
			break;

		case ORDER_CODE:
			if (value == null) {
				unsetOrderCode();
			} else {
				setOrderCode((String) value);
			}
			break;

		case PIC:
			if (value == null) {
				unsetPic();
			} else {
				setPic((String) value);
			}
			break;

		case NAME:
			if (value == null) {
				unsetName();
			} else {
				setName((String) value);
			}
			break;

		case QUANTITY:
			if (value == null) {
				unsetQuantity();
			} else {
				setQuantity((Integer) value);
			}
			break;

		case SALE_PRICE:
			if (value == null) {
				unsetSalePrice();
			} else {
				setSalePrice((Double) value);
			}
			break;

		case IS_GIFT:
			if (value == null) {
				unsetIsGift();
			} else {
				setIsGift((Short) value);
			}
			break;

		case IS_SPU:
			if (value == null) {
				unsetIsSpu();
			} else {
				setIsSpu((Short) value);
			}
			break;

		case ORDER_TYPE:
			if (value == null) {
				unsetOrderType();
			} else {
				setOrderType((Short) value);
			}
			break;

		case RETURN_STATUS:
			if (value == null) {
				unsetReturnStatus();
			} else {
				setReturnStatus((Short) value);
			}
			break;

		case ITEM_RETURN_TITLE:
			if (value == null) {
				unsetItemReturnTitle();
			} else {
				setItemReturnTitle((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ITEM_ID:
			return getItemId();

		case ITEM_SIZE:
			return getItemSize();

		case ORDER_CODE:
			return getOrderCode();

		case PIC:
			return getPic();

		case NAME:
			return getName();

		case QUANTITY:
			return getQuantity();

		case SALE_PRICE:
			return getSalePrice();

		case IS_GIFT:
			return getIsGift();

		case IS_SPU:
			return getIsSpu();

		case ORDER_TYPE:
			return getOrderType();

		case RETURN_STATUS:
			return getReturnStatus();

		case ITEM_RETURN_TITLE:
			return getItemReturnTitle();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ITEM_ID:
			return isSetItemId();
		case ITEM_SIZE:
			return isSetItemSize();
		case ORDER_CODE:
			return isSetOrderCode();
		case PIC:
			return isSetPic();
		case NAME:
			return isSetName();
		case QUANTITY:
			return isSetQuantity();
		case SALE_PRICE:
			return isSetSalePrice();
		case IS_GIFT:
			return isSetIsGift();
		case IS_SPU:
			return isSetIsSpu();
		case ORDER_TYPE:
			return isSetOrderType();
		case RETURN_STATUS:
			return isSetReturnStatus();
		case ITEM_RETURN_TITLE:
			return isSetItemReturnTitle();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TItemInfo)
			return this.equals((TItemInfo) that);
		return false;
	}

	public boolean equals(TItemInfo that) {
		if (that == null)
			return false;

		boolean this_present_itemId = true;
		boolean that_present_itemId = true;
		if (this_present_itemId || that_present_itemId) {
			if (!(this_present_itemId && that_present_itemId))
				return false;
			if (this.itemId != that.itemId)
				return false;
		}

		boolean this_present_itemSize = true && this.isSetItemSize();
		boolean that_present_itemSize = true && that.isSetItemSize();
		if (this_present_itemSize || that_present_itemSize) {
			if (!(this_present_itemSize && that_present_itemSize))
				return false;
			if (!this.itemSize.equals(that.itemSize))
				return false;
		}

		boolean this_present_orderCode = true && this.isSetOrderCode();
		boolean that_present_orderCode = true && that.isSetOrderCode();
		if (this_present_orderCode || that_present_orderCode) {
			if (!(this_present_orderCode && that_present_orderCode))
				return false;
			if (!this.orderCode.equals(that.orderCode))
				return false;
		}

		boolean this_present_pic = true && this.isSetPic();
		boolean that_present_pic = true && that.isSetPic();
		if (this_present_pic || that_present_pic) {
			if (!(this_present_pic && that_present_pic))
				return false;
			if (!this.pic.equals(that.pic))
				return false;
		}

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!this.name.equals(that.name))
				return false;
		}

		boolean this_present_quantity = true;
		boolean that_present_quantity = true;
		if (this_present_quantity || that_present_quantity) {
			if (!(this_present_quantity && that_present_quantity))
				return false;
			if (this.quantity != that.quantity)
				return false;
		}

		boolean this_present_salePrice = true;
		boolean that_present_salePrice = true;
		if (this_present_salePrice || that_present_salePrice) {
			if (!(this_present_salePrice && that_present_salePrice))
				return false;
			if (this.salePrice != that.salePrice)
				return false;
		}

		boolean this_present_isGift = true;
		boolean that_present_isGift = true;
		if (this_present_isGift || that_present_isGift) {
			if (!(this_present_isGift && that_present_isGift))
				return false;
			if (this.isGift != that.isGift)
				return false;
		}

		boolean this_present_isSpu = true;
		boolean that_present_isSpu = true;
		if (this_present_isSpu || that_present_isSpu) {
			if (!(this_present_isSpu && that_present_isSpu))
				return false;
			if (this.isSpu != that.isSpu)
				return false;
		}

		boolean this_present_orderType = true;
		boolean that_present_orderType = true;
		if (this_present_orderType || that_present_orderType) {
			if (!(this_present_orderType && that_present_orderType))
				return false;
			if (this.orderType != that.orderType)
				return false;
		}

		boolean this_present_returnStatus = true;
		boolean that_present_returnStatus = true;
		if (this_present_returnStatus || that_present_returnStatus) {
			if (!(this_present_returnStatus && that_present_returnStatus))
				return false;
			if (this.returnStatus != that.returnStatus)
				return false;
		}

		boolean this_present_itemReturnTitle = true && this.isSetItemReturnTitle();
		boolean that_present_itemReturnTitle = true && that.isSetItemReturnTitle();
		if (this_present_itemReturnTitle || that_present_itemReturnTitle) {
			if (!(this_present_itemReturnTitle && that_present_itemReturnTitle))
				return false;
			if (!this.itemReturnTitle.equals(that.itemReturnTitle))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_itemId = true;
		list.add(present_itemId);
		if (present_itemId)
			list.add(itemId);

		boolean present_itemSize = true && (isSetItemSize());
		list.add(present_itemSize);
		if (present_itemSize)
			list.add(itemSize);

		boolean present_orderCode = true && (isSetOrderCode());
		list.add(present_orderCode);
		if (present_orderCode)
			list.add(orderCode);

		boolean present_pic = true && (isSetPic());
		list.add(present_pic);
		if (present_pic)
			list.add(pic);

		boolean present_name = true && (isSetName());
		list.add(present_name);
		if (present_name)
			list.add(name);

		boolean present_quantity = true;
		list.add(present_quantity);
		if (present_quantity)
			list.add(quantity);

		boolean present_salePrice = true;
		list.add(present_salePrice);
		if (present_salePrice)
			list.add(salePrice);

		boolean present_isGift = true;
		list.add(present_isGift);
		if (present_isGift)
			list.add(isGift);

		boolean present_isSpu = true;
		list.add(present_isSpu);
		if (present_isSpu)
			list.add(isSpu);

		boolean present_orderType = true;
		list.add(present_orderType);
		if (present_orderType)
			list.add(orderType);

		boolean present_returnStatus = true;
		list.add(present_returnStatus);
		if (present_returnStatus)
			list.add(returnStatus);

		boolean present_itemReturnTitle = true && (isSetItemReturnTitle());
		list.add(present_itemReturnTitle);
		if (present_itemReturnTitle)
			list.add(itemReturnTitle);

		return list.hashCode();
	}

	@Override
	public int compareTo(TItemInfo other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetItemId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetItemSize()).compareTo(other.isSetItemSize());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetItemSize()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemSize, other.itemSize);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderCode()).compareTo(other.isSetOrderCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCode, other.orderCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPic()).compareTo(other.isSetPic());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPic()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pic, other.pic);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetQuantity()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSalePrice()).compareTo(other.isSetSalePrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSalePrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salePrice, other.salePrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsGift()).compareTo(other.isSetIsGift());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsGift()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGift, other.isGift);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsSpu()).compareTo(other.isSetIsSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSpu, other.isSpu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetReturnStatus()).compareTo(other.isSetReturnStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReturnStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnStatus, other.returnStatus);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetItemReturnTitle()).compareTo(other.isSetItemReturnTitle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetItemReturnTitle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemReturnTitle, other.itemReturnTitle);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TItemInfo(");
		boolean first = true;

		sb.append("itemId:");
		sb.append(this.itemId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("itemSize:");
		if (this.itemSize == null) {
			sb.append("null");
		} else {
			sb.append(this.itemSize);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderCode:");
		if (this.orderCode == null) {
			sb.append("null");
		} else {
			sb.append(this.orderCode);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("pic:");
		if (this.pic == null) {
			sb.append("null");
		} else {
			sb.append(this.pic);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("name:");
		if (this.name == null) {
			sb.append("null");
		} else {
			sb.append(this.name);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("quantity:");
		sb.append(this.quantity);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("salePrice:");
		sb.append(this.salePrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isGift:");
		sb.append(this.isGift);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isSpu:");
		sb.append(this.isSpu);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderType:");
		sb.append(this.orderType);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("returnStatus:");
		sb.append(this.returnStatus);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("itemReturnTitle:");
		if (this.itemReturnTitle == null) {
			sb.append("null");
		} else {
			sb.append(this.itemReturnTitle);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TItemInfoStandardSchemeFactory implements SchemeFactory {
		public TItemInfoStandardScheme getScheme() {
			return new TItemInfoStandardScheme();
		}
	}

	private static class TItemInfoStandardScheme extends StandardScheme<TItemInfo> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TItemInfo struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ITEM_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.itemId = iprot.readI32();
						struct.setItemIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // ITEM_SIZE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.itemSize = iprot.readString();
						struct.setItemSizeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // ORDER_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderCode = iprot.readString();
						struct.setOrderCodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // PIC
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.pic = iprot.readString();
						struct.setPicIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.name = iprot.readString();
						struct.setNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // QUANTITY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.quantity = iprot.readI32();
						struct.setQuantityIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // SALE_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.salePrice = iprot.readDouble();
						struct.setSalePriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // IS_GIFT
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.isGift = iprot.readI16();
						struct.setIsGiftIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IS_SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.isSpu = iprot.readI16();
						struct.setIsSpuIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // ORDER_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.orderType = iprot.readI16();
						struct.setOrderTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // RETURN_STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.returnStatus = iprot.readI16();
						struct.setReturnStatusIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // ITEM_RETURN_TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.itemReturnTitle = iprot.readString();
						struct.setItemReturnTitleIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TItemInfo struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
			oprot.writeI32(struct.itemId);
			oprot.writeFieldEnd();
			if (struct.itemSize != null) {
				oprot.writeFieldBegin(ITEM_SIZE_FIELD_DESC);
				oprot.writeString(struct.itemSize);
				oprot.writeFieldEnd();
			}
			if (struct.orderCode != null) {
				oprot.writeFieldBegin(ORDER_CODE_FIELD_DESC);
				oprot.writeString(struct.orderCode);
				oprot.writeFieldEnd();
			}
			if (struct.pic != null) {
				oprot.writeFieldBegin(PIC_FIELD_DESC);
				oprot.writeString(struct.pic);
				oprot.writeFieldEnd();
			}
			if (struct.name != null) {
				oprot.writeFieldBegin(NAME_FIELD_DESC);
				oprot.writeString(struct.name);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
			oprot.writeI32(struct.quantity);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SALE_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.salePrice);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_GIFT_FIELD_DESC);
			oprot.writeI16(struct.isGift);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_SPU_FIELD_DESC);
			oprot.writeI16(struct.isSpu);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
			oprot.writeI16(struct.orderType);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(RETURN_STATUS_FIELD_DESC);
			oprot.writeI16(struct.returnStatus);
			oprot.writeFieldEnd();
			if (struct.itemReturnTitle != null) {
				oprot.writeFieldBegin(ITEM_RETURN_TITLE_FIELD_DESC);
				oprot.writeString(struct.itemReturnTitle);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TItemInfoTupleSchemeFactory implements SchemeFactory {
		public TItemInfoTupleScheme getScheme() {
			return new TItemInfoTupleScheme();
		}
	}

	private static class TItemInfoTupleScheme extends TupleScheme<TItemInfo> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TItemInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetItemId()) {
				optionals.set(0);
			}
			if (struct.isSetItemSize()) {
				optionals.set(1);
			}
			if (struct.isSetOrderCode()) {
				optionals.set(2);
			}
			if (struct.isSetPic()) {
				optionals.set(3);
			}
			if (struct.isSetName()) {
				optionals.set(4);
			}
			if (struct.isSetQuantity()) {
				optionals.set(5);
			}
			if (struct.isSetSalePrice()) {
				optionals.set(6);
			}
			if (struct.isSetIsGift()) {
				optionals.set(7);
			}
			if (struct.isSetIsSpu()) {
				optionals.set(8);
			}
			if (struct.isSetOrderType()) {
				optionals.set(9);
			}
			if (struct.isSetReturnStatus()) {
				optionals.set(10);
			}
			if (struct.isSetItemReturnTitle()) {
				optionals.set(11);
			}
			oprot.writeBitSet(optionals, 12);
			if (struct.isSetItemId()) {
				oprot.writeI32(struct.itemId);
			}
			if (struct.isSetItemSize()) {
				oprot.writeString(struct.itemSize);
			}
			if (struct.isSetOrderCode()) {
				oprot.writeString(struct.orderCode);
			}
			if (struct.isSetPic()) {
				oprot.writeString(struct.pic);
			}
			if (struct.isSetName()) {
				oprot.writeString(struct.name);
			}
			if (struct.isSetQuantity()) {
				oprot.writeI32(struct.quantity);
			}
			if (struct.isSetSalePrice()) {
				oprot.writeDouble(struct.salePrice);
			}
			if (struct.isSetIsGift()) {
				oprot.writeI16(struct.isGift);
			}
			if (struct.isSetIsSpu()) {
				oprot.writeI16(struct.isSpu);
			}
			if (struct.isSetOrderType()) {
				oprot.writeI16(struct.orderType);
			}
			if (struct.isSetReturnStatus()) {
				oprot.writeI16(struct.returnStatus);
			}
			if (struct.isSetItemReturnTitle()) {
				oprot.writeString(struct.itemReturnTitle);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TItemInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(12);
			if (incoming.get(0)) {
				struct.itemId = iprot.readI32();
				struct.setItemIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.itemSize = iprot.readString();
				struct.setItemSizeIsSet(true);
			}
			if (incoming.get(2)) {
				struct.orderCode = iprot.readString();
				struct.setOrderCodeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.pic = iprot.readString();
				struct.setPicIsSet(true);
			}
			if (incoming.get(4)) {
				struct.name = iprot.readString();
				struct.setNameIsSet(true);
			}
			if (incoming.get(5)) {
				struct.quantity = iprot.readI32();
				struct.setQuantityIsSet(true);
			}
			if (incoming.get(6)) {
				struct.salePrice = iprot.readDouble();
				struct.setSalePriceIsSet(true);
			}
			if (incoming.get(7)) {
				struct.isGift = iprot.readI16();
				struct.setIsGiftIsSet(true);
			}
			if (incoming.get(8)) {
				struct.isSpu = iprot.readI16();
				struct.setIsSpuIsSet(true);
			}
			if (incoming.get(9)) {
				struct.orderType = iprot.readI16();
				struct.setOrderTypeIsSet(true);
			}
			if (incoming.get(10)) {
				struct.returnStatus = iprot.readI16();
				struct.setReturnStatusIsSet(true);
			}
			if (incoming.get(11)) {
				struct.itemReturnTitle = iprot.readString();
				struct.setItemReturnTitleIsSet(true);
			}
		}
	}

}
