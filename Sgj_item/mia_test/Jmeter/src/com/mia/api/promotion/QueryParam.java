/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.api.promotion;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
/**
 * 参数结构体
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-23")
public class QueryParam implements org.apache.thrift.TBase<QueryParam, QueryParam._Fields>, java.io.Serializable,
		Cloneable, Comparable<QueryParam> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"QueryParam");

	private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"clientType", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"version", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField REQUEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"requestTime", org.apache.thrift.protocol.TType.I32, (short) 3);
	private static final org.apache.thrift.protocol.TField BUSINESS_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"businessIds", org.apache.thrift.protocol.TType.LIST, (short) 4);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new QueryParamStandardSchemeFactory());
		schemes.put(TupleScheme.class, new QueryParamTupleSchemeFactory());
	}

	public String clientType; // required
	public String version; // required
	public int requestTime; // required
	public List<Integer> businessIds; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		CLIENT_TYPE((short) 1, "clientType"), VERSION((short) 2, "version"), REQUEST_TIME((short) 3,
				"requestTime"), BUSINESS_IDS((short) 4, "businessIds");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // CLIENT_TYPE
				return CLIENT_TYPE;
			case 2: // VERSION
				return VERSION;
			case 3: // REQUEST_TIME
				return REQUEST_TIME;
			case 4: // BUSINESS_IDS
				return BUSINESS_IDS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __REQUESTTIME_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.CLIENT_TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("clientType",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.VERSION,
				new org.apache.thrift.meta_data.FieldMetaData("version",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REQUEST_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("requestTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.BUSINESS_IDS, new org.apache.thrift.meta_data.FieldMetaData("businessIds",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryParam.class, metaDataMap);
	}

	public QueryParam() {
	}

	public QueryParam(String clientType, String version, int requestTime, List<Integer> businessIds) {
		this();
		this.clientType = clientType;
		this.version = version;
		this.requestTime = requestTime;
		setRequestTimeIsSet(true);
		this.businessIds = businessIds;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public QueryParam(QueryParam other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetClientType()) {
			this.clientType = other.clientType;
		}
		if (other.isSetVersion()) {
			this.version = other.version;
		}
		this.requestTime = other.requestTime;
		if (other.isSetBusinessIds()) {
			List<Integer> __this__businessIds = new ArrayList<Integer>(other.businessIds);
			this.businessIds = __this__businessIds;
		}
	}

	public QueryParam deepCopy() {
		return new QueryParam(this);
	}

	@Override
	public void clear() {
		this.clientType = null;
		this.version = null;
		setRequestTimeIsSet(false);
		this.requestTime = 0;
		this.businessIds = null;
	}

	public String getClientType() {
		return this.clientType;
	}

	public QueryParam setClientType(String clientType) {
		this.clientType = clientType;
		return this;
	}

	public void unsetClientType() {
		this.clientType = null;
	}

	/**
	 * Returns true if field clientType is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetClientType() {
		return this.clientType != null;
	}

	public void setClientTypeIsSet(boolean value) {
		if (!value) {
			this.clientType = null;
		}
	}

	public String getVersion() {
		return this.version;
	}

	public QueryParam setVersion(String version) {
		this.version = version;
		return this;
	}

	public void unsetVersion() {
		this.version = null;
	}

	/**
	 * Returns true if field version is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetVersion() {
		return this.version != null;
	}

	public void setVersionIsSet(boolean value) {
		if (!value) {
			this.version = null;
		}
	}

	public int getRequestTime() {
		return this.requestTime;
	}

	public QueryParam setRequestTime(int requestTime) {
		this.requestTime = requestTime;
		setRequestTimeIsSet(true);
		return this;
	}

	public void unsetRequestTime() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTTIME_ISSET_ID);
	}

	/**
	 * Returns true if field requestTime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetRequestTime() {
		return EncodingUtils.testBit(__isset_bitfield, __REQUESTTIME_ISSET_ID);
	}

	public void setRequestTimeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTTIME_ISSET_ID, value);
	}

	public int getBusinessIdsSize() {
		return (this.businessIds == null) ? 0 : this.businessIds.size();
	}

	public java.util.Iterator<Integer> getBusinessIdsIterator() {
		return (this.businessIds == null) ? null : this.businessIds.iterator();
	}

	public void addToBusinessIds(int elem) {
		if (this.businessIds == null) {
			this.businessIds = new ArrayList<Integer>();
		}
		this.businessIds.add(elem);
	}

	public List<Integer> getBusinessIds() {
		return this.businessIds;
	}

	public QueryParam setBusinessIds(List<Integer> businessIds) {
		this.businessIds = businessIds;
		return this;
	}

	public void unsetBusinessIds() {
		this.businessIds = null;
	}

	/**
	 * Returns true if field businessIds is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetBusinessIds() {
		return this.businessIds != null;
	}

	public void setBusinessIdsIsSet(boolean value) {
		if (!value) {
			this.businessIds = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case CLIENT_TYPE:
			if (value == null) {
				unsetClientType();
			} else {
				setClientType((String) value);
			}
			break;

		case VERSION:
			if (value == null) {
				unsetVersion();
			} else {
				setVersion((String) value);
			}
			break;

		case REQUEST_TIME:
			if (value == null) {
				unsetRequestTime();
			} else {
				setRequestTime((Integer) value);
			}
			break;

		case BUSINESS_IDS:
			if (value == null) {
				unsetBusinessIds();
			} else {
				setBusinessIds((List<Integer>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case CLIENT_TYPE:
			return getClientType();

		case VERSION:
			return getVersion();

		case REQUEST_TIME:
			return getRequestTime();

		case BUSINESS_IDS:
			return getBusinessIds();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case CLIENT_TYPE:
			return isSetClientType();
		case VERSION:
			return isSetVersion();
		case REQUEST_TIME:
			return isSetRequestTime();
		case BUSINESS_IDS:
			return isSetBusinessIds();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof QueryParam)
			return this.equals((QueryParam) that);
		return false;
	}

	public boolean equals(QueryParam that) {
		if (that == null)
			return false;

		boolean this_present_clientType = true && this.isSetClientType();
		boolean that_present_clientType = true && that.isSetClientType();
		if (this_present_clientType || that_present_clientType) {
			if (!(this_present_clientType && that_present_clientType))
				return false;
			if (!this.clientType.equals(that.clientType))
				return false;
		}

		boolean this_present_version = true && this.isSetVersion();
		boolean that_present_version = true && that.isSetVersion();
		if (this_present_version || that_present_version) {
			if (!(this_present_version && that_present_version))
				return false;
			if (!this.version.equals(that.version))
				return false;
		}

		boolean this_present_requestTime = true;
		boolean that_present_requestTime = true;
		if (this_present_requestTime || that_present_requestTime) {
			if (!(this_present_requestTime && that_present_requestTime))
				return false;
			if (this.requestTime != that.requestTime)
				return false;
		}

		boolean this_present_businessIds = true && this.isSetBusinessIds();
		boolean that_present_businessIds = true && that.isSetBusinessIds();
		if (this_present_businessIds || that_present_businessIds) {
			if (!(this_present_businessIds && that_present_businessIds))
				return false;
			if (!this.businessIds.equals(that.businessIds))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_clientType = true && (isSetClientType());
		list.add(present_clientType);
		if (present_clientType)
			list.add(clientType);

		boolean present_version = true && (isSetVersion());
		list.add(present_version);
		if (present_version)
			list.add(version);

		boolean present_requestTime = true;
		list.add(present_requestTime);
		if (present_requestTime)
			list.add(requestTime);

		boolean present_businessIds = true && (isSetBusinessIds());
		list.add(present_businessIds);
		if (present_businessIds)
			list.add(businessIds);

		return list.hashCode();
	}

	@Override
	public int compareTo(QueryParam other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetClientType()).compareTo(other.isSetClientType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetClientType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, other.clientType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVersion()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRequestTime()).compareTo(other.isSetRequestTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRequestTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestTime, other.requestTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetBusinessIds()).compareTo(other.isSetBusinessIds());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBusinessIds()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessIds, other.businessIds);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("QueryParam(");
		boolean first = true;

		sb.append("clientType:");
		if (this.clientType == null) {
			sb.append("null");
		} else {
			sb.append(this.clientType);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("version:");
		if (this.version == null) {
			sb.append("null");
		} else {
			sb.append(this.version);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("requestTime:");
		sb.append(this.requestTime);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("businessIds:");
		if (this.businessIds == null) {
			sb.append("null");
		} else {
			sb.append(this.businessIds);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class QueryParamStandardSchemeFactory implements SchemeFactory {
		public QueryParamStandardScheme getScheme() {
			return new QueryParamStandardScheme();
		}
	}

	private static class QueryParamStandardScheme extends StandardScheme<QueryParam> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, QueryParam struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // CLIENT_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.clientType = iprot.readString();
						struct.setClientTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // VERSION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.version = iprot.readString();
						struct.setVersionIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // REQUEST_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.requestTime = iprot.readI32();
						struct.setRequestTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // BUSINESS_IDS
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
							struct.businessIds = new ArrayList<Integer>(_list130.size);
							int _elem131;
							for (int _i132 = 0; _i132 < _list130.size; ++_i132) {
								_elem131 = iprot.readI32();
								struct.businessIds.add(_elem131);
							}
							iprot.readListEnd();
						}
						struct.setBusinessIdsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, QueryParam struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.clientType != null) {
				oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
				oprot.writeString(struct.clientType);
				oprot.writeFieldEnd();
			}
			if (struct.version != null) {
				oprot.writeFieldBegin(VERSION_FIELD_DESC);
				oprot.writeString(struct.version);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(REQUEST_TIME_FIELD_DESC);
			oprot.writeI32(struct.requestTime);
			oprot.writeFieldEnd();
			if (struct.businessIds != null) {
				oprot.writeFieldBegin(BUSINESS_IDS_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32,
							struct.businessIds.size()));
					for (int _iter133 : struct.businessIds) {
						oprot.writeI32(_iter133);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class QueryParamTupleSchemeFactory implements SchemeFactory {
		public QueryParamTupleScheme getScheme() {
			return new QueryParamTupleScheme();
		}
	}

	private static class QueryParamTupleScheme extends TupleScheme<QueryParam> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, QueryParam struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetClientType()) {
				optionals.set(0);
			}
			if (struct.isSetVersion()) {
				optionals.set(1);
			}
			if (struct.isSetRequestTime()) {
				optionals.set(2);
			}
			if (struct.isSetBusinessIds()) {
				optionals.set(3);
			}
			oprot.writeBitSet(optionals, 4);
			if (struct.isSetClientType()) {
				oprot.writeString(struct.clientType);
			}
			if (struct.isSetVersion()) {
				oprot.writeString(struct.version);
			}
			if (struct.isSetRequestTime()) {
				oprot.writeI32(struct.requestTime);
			}
			if (struct.isSetBusinessIds()) {
				{
					oprot.writeI32(struct.businessIds.size());
					for (int _iter134 : struct.businessIds) {
						oprot.writeI32(_iter134);
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, QueryParam struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(4);
			if (incoming.get(0)) {
				struct.clientType = iprot.readString();
				struct.setClientTypeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.version = iprot.readString();
				struct.setVersionIsSet(true);
			}
			if (incoming.get(2)) {
				struct.requestTime = iprot.readI32();
				struct.setRequestTimeIsSet(true);
			}
			if (incoming.get(3)) {
				{
					org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.I32, iprot.readI32());
					struct.businessIds = new ArrayList<Integer>(_list135.size);
					int _elem136;
					for (int _i137 = 0; _i137 < _list135.size; ++_i137) {
						_elem136 = iprot.readI32();
						struct.businessIds.add(_elem136);
					}
				}
				struct.setBusinessIdsIsSet(true);
			}
		}
	}

}
