/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TParamsModifyOrderAddress
		implements org.apache.thrift.TBase<TParamsModifyOrderAddress, TParamsModifyOrderAddress._Fields>,
		java.io.Serializable, Cloneable, Comparable<TParamsModifyOrderAddress> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TParamsModifyOrderAddress");

	private static final org.apache.thrift.protocol.TField SUPERIOR_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"superiorOrderCode", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"userId", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"name", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField PROV_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"prov", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"city", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"area", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField TOWN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"town", org.apache.thrift.protocol.TType.STRING, (short) 7);
	private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"address", org.apache.thrift.protocol.TType.STRING, (short) 8);
	private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"mobile", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TParamsModifyOrderAddressStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TParamsModifyOrderAddressTupleSchemeFactory());
	}

	public String superiorOrderCode; // required
	public int userId; // required
	public String name; // required
	public String prov; // required
	public String city; // required
	public String area; // required
	public String town; // required
	public String address; // required
	public String mobile; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		SUPERIOR_ORDER_CODE((short) 1, "superiorOrderCode"), USER_ID((short) 2, "userId"), NAME((short) 3,
				"name"), PROV((short) 4, "prov"), CITY((short) 5, "city"), AREA((short) 6,
						"area"), TOWN((short) 7, "town"), ADDRESS((short) 8, "address"), MOBILE((short) 9, "mobile");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // SUPERIOR_ORDER_CODE
				return SUPERIOR_ORDER_CODE;
			case 2: // USER_ID
				return USER_ID;
			case 3: // NAME
				return NAME;
			case 4: // PROV
				return PROV;
			case 5: // CITY
				return CITY;
			case 6: // AREA
				return AREA;
			case 7: // TOWN
				return TOWN;
			case 8: // ADDRESS
				return ADDRESS;
			case 9: // MOBILE
				return MOBILE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __USERID_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.SUPERIOR_ORDER_CODE,
				new org.apache.thrift.meta_data.FieldMetaData("superiorOrderCode",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.USER_ID,
				new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NAME,
				new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PROV,
				new org.apache.thrift.meta_data.FieldMetaData("prov", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CITY,
				new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AREA,
				new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TOWN,
				new org.apache.thrift.meta_data.FieldMetaData("town", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ADDRESS,
				new org.apache.thrift.meta_data.FieldMetaData("address",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MOBILE,
				new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TParamsModifyOrderAddress.class, metaDataMap);
	}

	public TParamsModifyOrderAddress() {
	}

	public TParamsModifyOrderAddress(String superiorOrderCode, int userId, String name, String prov, String city,
			String area, String town, String address, String mobile) {
		this();
		this.superiorOrderCode = superiorOrderCode;
		this.userId = userId;
		setUserIdIsSet(true);
		this.name = name;
		this.prov = prov;
		this.city = city;
		this.area = area;
		this.town = town;
		this.address = address;
		this.mobile = mobile;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TParamsModifyOrderAddress(TParamsModifyOrderAddress other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetSuperiorOrderCode()) {
			this.superiorOrderCode = other.superiorOrderCode;
		}
		this.userId = other.userId;
		if (other.isSetName()) {
			this.name = other.name;
		}
		if (other.isSetProv()) {
			this.prov = other.prov;
		}
		if (other.isSetCity()) {
			this.city = other.city;
		}
		if (other.isSetArea()) {
			this.area = other.area;
		}
		if (other.isSetTown()) {
			this.town = other.town;
		}
		if (other.isSetAddress()) {
			this.address = other.address;
		}
		if (other.isSetMobile()) {
			this.mobile = other.mobile;
		}
	}

	public TParamsModifyOrderAddress deepCopy() {
		return new TParamsModifyOrderAddress(this);
	}

	@Override
	public void clear() {
		this.superiorOrderCode = null;
		setUserIdIsSet(false);
		this.userId = 0;
		this.name = null;
		this.prov = null;
		this.city = null;
		this.area = null;
		this.town = null;
		this.address = null;
		this.mobile = null;
	}

	public String getSuperiorOrderCode() {
		return this.superiorOrderCode;
	}

	public TParamsModifyOrderAddress setSuperiorOrderCode(String superiorOrderCode) {
		this.superiorOrderCode = superiorOrderCode;
		return this;
	}

	public void unsetSuperiorOrderCode() {
		this.superiorOrderCode = null;
	}

	/**
	 * Returns true if field superiorOrderCode is set (has been assigned a
	 * value) and false otherwise
	 */
	public boolean isSetSuperiorOrderCode() {
		return this.superiorOrderCode != null;
	}

	public void setSuperiorOrderCodeIsSet(boolean value) {
		if (!value) {
			this.superiorOrderCode = null;
		}
	}

	public int getUserId() {
		return this.userId;
	}

	public TParamsModifyOrderAddress setUserId(int userId) {
		this.userId = userId;
		setUserIdIsSet(true);
		return this;
	}

	public void unsetUserId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
	}

	/**
	 * Returns true if field userId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUserId() {
		return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
	}

	public void setUserIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
	}

	public String getName() {
		return this.name;
	}

	public TParamsModifyOrderAddress setName(String name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	/**
	 * Returns true if field name is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	public String getProv() {
		return this.prov;
	}

	public TParamsModifyOrderAddress setProv(String prov) {
		this.prov = prov;
		return this;
	}

	public void unsetProv() {
		this.prov = null;
	}

	/**
	 * Returns true if field prov is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProv() {
		return this.prov != null;
	}

	public void setProvIsSet(boolean value) {
		if (!value) {
			this.prov = null;
		}
	}

	public String getCity() {
		return this.city;
	}

	public TParamsModifyOrderAddress setCity(String city) {
		this.city = city;
		return this;
	}

	public void unsetCity() {
		this.city = null;
	}

	/**
	 * Returns true if field city is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCity() {
		return this.city != null;
	}

	public void setCityIsSet(boolean value) {
		if (!value) {
			this.city = null;
		}
	}

	public String getArea() {
		return this.area;
	}

	public TParamsModifyOrderAddress setArea(String area) {
		this.area = area;
		return this;
	}

	public void unsetArea() {
		this.area = null;
	}

	/**
	 * Returns true if field area is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetArea() {
		return this.area != null;
	}

	public void setAreaIsSet(boolean value) {
		if (!value) {
			this.area = null;
		}
	}

	public String getTown() {
		return this.town;
	}

	public TParamsModifyOrderAddress setTown(String town) {
		this.town = town;
		return this;
	}

	public void unsetTown() {
		this.town = null;
	}

	/**
	 * Returns true if field town is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTown() {
		return this.town != null;
	}

	public void setTownIsSet(boolean value) {
		if (!value) {
			this.town = null;
		}
	}

	public String getAddress() {
		return this.address;
	}

	public TParamsModifyOrderAddress setAddress(String address) {
		this.address = address;
		return this;
	}

	public void unsetAddress() {
		this.address = null;
	}

	/**
	 * Returns true if field address is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetAddress() {
		return this.address != null;
	}

	public void setAddressIsSet(boolean value) {
		if (!value) {
			this.address = null;
		}
	}

	public String getMobile() {
		return this.mobile;
	}

	public TParamsModifyOrderAddress setMobile(String mobile) {
		this.mobile = mobile;
		return this;
	}

	public void unsetMobile() {
		this.mobile = null;
	}

	/**
	 * Returns true if field mobile is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMobile() {
		return this.mobile != null;
	}

	public void setMobileIsSet(boolean value) {
		if (!value) {
			this.mobile = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case SUPERIOR_ORDER_CODE:
			if (value == null) {
				unsetSuperiorOrderCode();
			} else {
				setSuperiorOrderCode((String) value);
			}
			break;

		case USER_ID:
			if (value == null) {
				unsetUserId();
			} else {
				setUserId((Integer) value);
			}
			break;

		case NAME:
			if (value == null) {
				unsetName();
			} else {
				setName((String) value);
			}
			break;

		case PROV:
			if (value == null) {
				unsetProv();
			} else {
				setProv((String) value);
			}
			break;

		case CITY:
			if (value == null) {
				unsetCity();
			} else {
				setCity((String) value);
			}
			break;

		case AREA:
			if (value == null) {
				unsetArea();
			} else {
				setArea((String) value);
			}
			break;

		case TOWN:
			if (value == null) {
				unsetTown();
			} else {
				setTown((String) value);
			}
			break;

		case ADDRESS:
			if (value == null) {
				unsetAddress();
			} else {
				setAddress((String) value);
			}
			break;

		case MOBILE:
			if (value == null) {
				unsetMobile();
			} else {
				setMobile((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case SUPERIOR_ORDER_CODE:
			return getSuperiorOrderCode();

		case USER_ID:
			return getUserId();

		case NAME:
			return getName();

		case PROV:
			return getProv();

		case CITY:
			return getCity();

		case AREA:
			return getArea();

		case TOWN:
			return getTown();

		case ADDRESS:
			return getAddress();

		case MOBILE:
			return getMobile();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case SUPERIOR_ORDER_CODE:
			return isSetSuperiorOrderCode();
		case USER_ID:
			return isSetUserId();
		case NAME:
			return isSetName();
		case PROV:
			return isSetProv();
		case CITY:
			return isSetCity();
		case AREA:
			return isSetArea();
		case TOWN:
			return isSetTown();
		case ADDRESS:
			return isSetAddress();
		case MOBILE:
			return isSetMobile();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TParamsModifyOrderAddress)
			return this.equals((TParamsModifyOrderAddress) that);
		return false;
	}

	public boolean equals(TParamsModifyOrderAddress that) {
		if (that == null)
			return false;

		boolean this_present_superiorOrderCode = true && this.isSetSuperiorOrderCode();
		boolean that_present_superiorOrderCode = true && that.isSetSuperiorOrderCode();
		if (this_present_superiorOrderCode || that_present_superiorOrderCode) {
			if (!(this_present_superiorOrderCode && that_present_superiorOrderCode))
				return false;
			if (!this.superiorOrderCode.equals(that.superiorOrderCode))
				return false;
		}

		boolean this_present_userId = true;
		boolean that_present_userId = true;
		if (this_present_userId || that_present_userId) {
			if (!(this_present_userId && that_present_userId))
				return false;
			if (this.userId != that.userId)
				return false;
		}

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!this.name.equals(that.name))
				return false;
		}

		boolean this_present_prov = true && this.isSetProv();
		boolean that_present_prov = true && that.isSetProv();
		if (this_present_prov || that_present_prov) {
			if (!(this_present_prov && that_present_prov))
				return false;
			if (!this.prov.equals(that.prov))
				return false;
		}

		boolean this_present_city = true && this.isSetCity();
		boolean that_present_city = true && that.isSetCity();
		if (this_present_city || that_present_city) {
			if (!(this_present_city && that_present_city))
				return false;
			if (!this.city.equals(that.city))
				return false;
		}

		boolean this_present_area = true && this.isSetArea();
		boolean that_present_area = true && that.isSetArea();
		if (this_present_area || that_present_area) {
			if (!(this_present_area && that_present_area))
				return false;
			if (!this.area.equals(that.area))
				return false;
		}

		boolean this_present_town = true && this.isSetTown();
		boolean that_present_town = true && that.isSetTown();
		if (this_present_town || that_present_town) {
			if (!(this_present_town && that_present_town))
				return false;
			if (!this.town.equals(that.town))
				return false;
		}

		boolean this_present_address = true && this.isSetAddress();
		boolean that_present_address = true && that.isSetAddress();
		if (this_present_address || that_present_address) {
			if (!(this_present_address && that_present_address))
				return false;
			if (!this.address.equals(that.address))
				return false;
		}

		boolean this_present_mobile = true && this.isSetMobile();
		boolean that_present_mobile = true && that.isSetMobile();
		if (this_present_mobile || that_present_mobile) {
			if (!(this_present_mobile && that_present_mobile))
				return false;
			if (!this.mobile.equals(that.mobile))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_superiorOrderCode = true && (isSetSuperiorOrderCode());
		list.add(present_superiorOrderCode);
		if (present_superiorOrderCode)
			list.add(superiorOrderCode);

		boolean present_userId = true;
		list.add(present_userId);
		if (present_userId)
			list.add(userId);

		boolean present_name = true && (isSetName());
		list.add(present_name);
		if (present_name)
			list.add(name);

		boolean present_prov = true && (isSetProv());
		list.add(present_prov);
		if (present_prov)
			list.add(prov);

		boolean present_city = true && (isSetCity());
		list.add(present_city);
		if (present_city)
			list.add(city);

		boolean present_area = true && (isSetArea());
		list.add(present_area);
		if (present_area)
			list.add(area);

		boolean present_town = true && (isSetTown());
		list.add(present_town);
		if (present_town)
			list.add(town);

		boolean present_address = true && (isSetAddress());
		list.add(present_address);
		if (present_address)
			list.add(address);

		boolean present_mobile = true && (isSetMobile());
		list.add(present_mobile);
		if (present_mobile)
			list.add(mobile);

		return list.hashCode();
	}

	@Override
	public int compareTo(TParamsModifyOrderAddress other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetSuperiorOrderCode()).compareTo(other.isSetSuperiorOrderCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSuperiorOrderCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superiorOrderCode, other.superiorOrderCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetProv()).compareTo(other.isSetProv());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProv()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prov, other.prov);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCity()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetArea()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTown()).compareTo(other.isSetTown());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTown()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.town, other.town);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAddress()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMobile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TParamsModifyOrderAddress(");
		boolean first = true;

		sb.append("superiorOrderCode:");
		if (this.superiorOrderCode == null) {
			sb.append("null");
		} else {
			sb.append(this.superiorOrderCode);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("userId:");
		sb.append(this.userId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("name:");
		if (this.name == null) {
			sb.append("null");
		} else {
			sb.append(this.name);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("prov:");
		if (this.prov == null) {
			sb.append("null");
		} else {
			sb.append(this.prov);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("city:");
		if (this.city == null) {
			sb.append("null");
		} else {
			sb.append(this.city);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("area:");
		if (this.area == null) {
			sb.append("null");
		} else {
			sb.append(this.area);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("town:");
		if (this.town == null) {
			sb.append("null");
		} else {
			sb.append(this.town);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("address:");
		if (this.address == null) {
			sb.append("null");
		} else {
			sb.append(this.address);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("mobile:");
		if (this.mobile == null) {
			sb.append("null");
		} else {
			sb.append(this.mobile);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TParamsModifyOrderAddressStandardSchemeFactory implements SchemeFactory {
		public TParamsModifyOrderAddressStandardScheme getScheme() {
			return new TParamsModifyOrderAddressStandardScheme();
		}
	}

	private static class TParamsModifyOrderAddressStandardScheme extends StandardScheme<TParamsModifyOrderAddress> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TParamsModifyOrderAddress struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // SUPERIOR_ORDER_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.superiorOrderCode = iprot.readString();
						struct.setSuperiorOrderCodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // USER_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.userId = iprot.readI32();
						struct.setUserIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.name = iprot.readString();
						struct.setNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // PROV
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.prov = iprot.readString();
						struct.setProvIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CITY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.city = iprot.readString();
						struct.setCityIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // AREA
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.area = iprot.readString();
						struct.setAreaIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // TOWN
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.town = iprot.readString();
						struct.setTownIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // ADDRESS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.address = iprot.readString();
						struct.setAddressIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // MOBILE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.mobile = iprot.readString();
						struct.setMobileIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TParamsModifyOrderAddress struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.superiorOrderCode != null) {
				oprot.writeFieldBegin(SUPERIOR_ORDER_CODE_FIELD_DESC);
				oprot.writeString(struct.superiorOrderCode);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(USER_ID_FIELD_DESC);
			oprot.writeI32(struct.userId);
			oprot.writeFieldEnd();
			if (struct.name != null) {
				oprot.writeFieldBegin(NAME_FIELD_DESC);
				oprot.writeString(struct.name);
				oprot.writeFieldEnd();
			}
			if (struct.prov != null) {
				oprot.writeFieldBegin(PROV_FIELD_DESC);
				oprot.writeString(struct.prov);
				oprot.writeFieldEnd();
			}
			if (struct.city != null) {
				oprot.writeFieldBegin(CITY_FIELD_DESC);
				oprot.writeString(struct.city);
				oprot.writeFieldEnd();
			}
			if (struct.area != null) {
				oprot.writeFieldBegin(AREA_FIELD_DESC);
				oprot.writeString(struct.area);
				oprot.writeFieldEnd();
			}
			if (struct.town != null) {
				oprot.writeFieldBegin(TOWN_FIELD_DESC);
				oprot.writeString(struct.town);
				oprot.writeFieldEnd();
			}
			if (struct.address != null) {
				oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
				oprot.writeString(struct.address);
				oprot.writeFieldEnd();
			}
			if (struct.mobile != null) {
				oprot.writeFieldBegin(MOBILE_FIELD_DESC);
				oprot.writeString(struct.mobile);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TParamsModifyOrderAddressTupleSchemeFactory implements SchemeFactory {
		public TParamsModifyOrderAddressTupleScheme getScheme() {
			return new TParamsModifyOrderAddressTupleScheme();
		}
	}

	private static class TParamsModifyOrderAddressTupleScheme extends TupleScheme<TParamsModifyOrderAddress> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TParamsModifyOrderAddress struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetSuperiorOrderCode()) {
				optionals.set(0);
			}
			if (struct.isSetUserId()) {
				optionals.set(1);
			}
			if (struct.isSetName()) {
				optionals.set(2);
			}
			if (struct.isSetProv()) {
				optionals.set(3);
			}
			if (struct.isSetCity()) {
				optionals.set(4);
			}
			if (struct.isSetArea()) {
				optionals.set(5);
			}
			if (struct.isSetTown()) {
				optionals.set(6);
			}
			if (struct.isSetAddress()) {
				optionals.set(7);
			}
			if (struct.isSetMobile()) {
				optionals.set(8);
			}
			oprot.writeBitSet(optionals, 9);
			if (struct.isSetSuperiorOrderCode()) {
				oprot.writeString(struct.superiorOrderCode);
			}
			if (struct.isSetUserId()) {
				oprot.writeI32(struct.userId);
			}
			if (struct.isSetName()) {
				oprot.writeString(struct.name);
			}
			if (struct.isSetProv()) {
				oprot.writeString(struct.prov);
			}
			if (struct.isSetCity()) {
				oprot.writeString(struct.city);
			}
			if (struct.isSetArea()) {
				oprot.writeString(struct.area);
			}
			if (struct.isSetTown()) {
				oprot.writeString(struct.town);
			}
			if (struct.isSetAddress()) {
				oprot.writeString(struct.address);
			}
			if (struct.isSetMobile()) {
				oprot.writeString(struct.mobile);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TParamsModifyOrderAddress struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(9);
			if (incoming.get(0)) {
				struct.superiorOrderCode = iprot.readString();
				struct.setSuperiorOrderCodeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.userId = iprot.readI32();
				struct.setUserIdIsSet(true);
			}
			if (incoming.get(2)) {
				struct.name = iprot.readString();
				struct.setNameIsSet(true);
			}
			if (incoming.get(3)) {
				struct.prov = iprot.readString();
				struct.setProvIsSet(true);
			}
			if (incoming.get(4)) {
				struct.city = iprot.readString();
				struct.setCityIsSet(true);
			}
			if (incoming.get(5)) {
				struct.area = iprot.readString();
				struct.setAreaIsSet(true);
			}
			if (incoming.get(6)) {
				struct.town = iprot.readString();
				struct.setTownIsSet(true);
			}
			if (incoming.get(7)) {
				struct.address = iprot.readString();
				struct.setAddressIsSet(true);
			}
			if (incoming.get(8)) {
				struct.mobile = iprot.readString();
				struct.setMobileIsSet(true);
			}
		}
	}

}
