/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TOrderDetailInfo implements org.apache.thrift.TBase<TOrderDetailInfo, TOrderDetailInfo._Fields>,
		java.io.Serializable, Cloneable, Comparable<TOrderDetailInfo> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TOrderDetailInfo");

	private static final org.apache.thrift.protocol.TField ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderCode", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField ORDER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderTime", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I16, (short) 3);
	private static final org.apache.thrift.protocol.TField STATUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusName", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField DST_CONSIGNEE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"dstConsignee", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField DST_TEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"dstTel", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField DST_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"dstMobile", org.apache.thrift.protocol.TType.STRING, (short) 7);
	private static final org.apache.thrift.protocol.TField DST_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"dstAddress", org.apache.thrift.protocol.TType.STRING, (short) 8);
	private static final org.apache.thrift.protocol.TField FREIGHT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"freightPrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 9);
	private static final org.apache.thrift.protocol.TField REDBAG_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"redbagPrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 10);
	private static final org.apache.thrift.protocol.TField BALANCE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"balancePrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 11);
	private static final org.apache.thrift.protocol.TField PAY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payPrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 12);
	private static final org.apache.thrift.protocol.TField TAX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"taxName", org.apache.thrift.protocol.TType.STRING, (short) 13);
	private static final org.apache.thrift.protocol.TField TAX_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"taxPrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 14);
	private static final org.apache.thrift.protocol.TField SUM_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"sumQuantity", org.apache.thrift.protocol.TType.I32, (short) 15);
	private static final org.apache.thrift.protocol.TField IS_POP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isPop", org.apache.thrift.protocol.TType.I16, (short) 16);
	private static final org.apache.thrift.protocol.TField IS_SHOW_RETURN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isShowReturn", org.apache.thrift.protocol.TType.I16, (short) 17);
	private static final org.apache.thrift.protocol.TField REDUCE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"reducePrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 18);
	private static final org.apache.thrift.protocol.TField SALE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"salePrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 19);
	private static final org.apache.thrift.protocol.TField ORDER_STATUS_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderStatusTitle", org.apache.thrift.protocol.TType.STRING, (short) 20);
	private static final org.apache.thrift.protocol.TField ORDER_STATUS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderStatusTime", org.apache.thrift.protocol.TType.I64, (short) 21);
	private static final org.apache.thrift.protocol.TField IS_GROUPON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isGroupon", org.apache.thrift.protocol.TType.I16, (short) 22);
	private static final org.apache.thrift.protocol.TField ORDER_CANCEL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderCancelTime", org.apache.thrift.protocol.TType.STRING, (short) 23);
	private static final org.apache.thrift.protocol.TField ORDER_PAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderPayTime", org.apache.thrift.protocol.TType.STRING, (short) 24);
	private static final org.apache.thrift.protocol.TField PAY_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payMode", org.apache.thrift.protocol.TType.I16, (short) 25);
	private static final org.apache.thrift.protocol.TField ORDER_DELIVER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderDeliverTime", org.apache.thrift.protocol.TType.STRING, (short) 26);
	private static final org.apache.thrift.protocol.TField ORDER_FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderFinishTime", org.apache.thrift.protocol.TType.STRING, (short) 27);
	private static final org.apache.thrift.protocol.TField ITEM_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"itemInfos", org.apache.thrift.protocol.TType.LIST, (short) 28);
	private static final org.apache.thrift.protocol.TField STORE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"storeInfo", org.apache.thrift.protocol.TType.STRUCT, (short) 29);
	private static final org.apache.thrift.protocol.TField INVOICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"invoiceInfo", org.apache.thrift.protocol.TType.STRUCT, (short) 30);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TOrderDetailInfoStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TOrderDetailInfoTupleSchemeFactory());
	}

	public String orderCode; // required
	public String orderTime; // required
	public short status; // required
	public String statusName; // required
	public String dstConsignee; // required
	public String dstTel; // required
	public String dstMobile; // required
	public String dstAddress; // required
	public double freightPrice; // required
	public double redbagPrice; // required
	public double balancePrice; // required
	public double payPrice; // required
	public String taxName; // required
	public double taxPrice; // required
	public int sumQuantity; // required
	public short isPop; // required
	public short isShowReturn; // required
	public double reducePrice; // required
	public double salePrice; // required
	public String orderStatusTitle; // required
	public long orderStatusTime; // required
	public short isGroupon; // required
	public String orderCancelTime; // required
	public String orderPayTime; // required
	public short payMode; // required
	public String orderDeliverTime; // required
	public String orderFinishTime; // required
	public List<TItemInfo> itemInfos; // required
	public TStoreInfo storeInfo; // required
	public TInvoiceInfo invoiceInfo; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ORDER_CODE((short) 1, "orderCode"), ORDER_TIME((short) 2, "orderTime"), STATUS((short) 3,
				"status"), STATUS_NAME((short) 4, "statusName"), DST_CONSIGNEE((short) 5, "dstConsignee"), DST_TEL(
						(short) 6, "dstTel"), DST_MOBILE((short) 7, "dstMobile"), DST_ADDRESS((short) 8,
								"dstAddress"), FREIGHT_PRICE((short) 9, "freightPrice"), REDBAG_PRICE((short) 10,
										"redbagPrice"), BALANCE_PRICE((short) 11, "balancePrice"), PAY_PRICE((short) 12,
												"payPrice"), TAX_NAME((short) 13, "taxName"), TAX_PRICE((short) 14,
														"taxPrice"), SUM_QUANTITY((short) 15, "sumQuantity"), IS_POP(
																(short) 16, "isPop"), IS_SHOW_RETURN((short) 17,
																		"isShowReturn"), REDUCE_PRICE((short) 18,
																				"reducePrice"), SALE_PRICE((short) 19,
																						"salePrice"), ORDER_STATUS_TITLE(
																								(short) 20,
																								"orderStatusTitle"), ORDER_STATUS_TIME(
																										(short) 21,
																										"orderStatusTime"), IS_GROUPON(
																												(short) 22,
																												"isGroupon"), ORDER_CANCEL_TIME(
																														(short) 23,
																														"orderCancelTime"), ORDER_PAY_TIME(
																																(short) 24,
																																"orderPayTime"), PAY_MODE(
																																		(short) 25,
																																		"payMode"), ORDER_DELIVER_TIME(
																																				(short) 26,
																																				"orderDeliverTime"), ORDER_FINISH_TIME(
																																						(short) 27,
																																						"orderFinishTime"), ITEM_INFOS(
																																								(short) 28,
																																								"itemInfos"), STORE_INFO(
																																										(short) 29,
																																										"storeInfo"), INVOICE_INFO(
																																												(short) 30,
																																												"invoiceInfo");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ORDER_CODE
				return ORDER_CODE;
			case 2: // ORDER_TIME
				return ORDER_TIME;
			case 3: // STATUS
				return STATUS;
			case 4: // STATUS_NAME
				return STATUS_NAME;
			case 5: // DST_CONSIGNEE
				return DST_CONSIGNEE;
			case 6: // DST_TEL
				return DST_TEL;
			case 7: // DST_MOBILE
				return DST_MOBILE;
			case 8: // DST_ADDRESS
				return DST_ADDRESS;
			case 9: // FREIGHT_PRICE
				return FREIGHT_PRICE;
			case 10: // REDBAG_PRICE
				return REDBAG_PRICE;
			case 11: // BALANCE_PRICE
				return BALANCE_PRICE;
			case 12: // PAY_PRICE
				return PAY_PRICE;
			case 13: // TAX_NAME
				return TAX_NAME;
			case 14: // TAX_PRICE
				return TAX_PRICE;
			case 15: // SUM_QUANTITY
				return SUM_QUANTITY;
			case 16: // IS_POP
				return IS_POP;
			case 17: // IS_SHOW_RETURN
				return IS_SHOW_RETURN;
			case 18: // REDUCE_PRICE
				return REDUCE_PRICE;
			case 19: // SALE_PRICE
				return SALE_PRICE;
			case 20: // ORDER_STATUS_TITLE
				return ORDER_STATUS_TITLE;
			case 21: // ORDER_STATUS_TIME
				return ORDER_STATUS_TIME;
			case 22: // IS_GROUPON
				return IS_GROUPON;
			case 23: // ORDER_CANCEL_TIME
				return ORDER_CANCEL_TIME;
			case 24: // ORDER_PAY_TIME
				return ORDER_PAY_TIME;
			case 25: // PAY_MODE
				return PAY_MODE;
			case 26: // ORDER_DELIVER_TIME
				return ORDER_DELIVER_TIME;
			case 27: // ORDER_FINISH_TIME
				return ORDER_FINISH_TIME;
			case 28: // ITEM_INFOS
				return ITEM_INFOS;
			case 29: // STORE_INFO
				return STORE_INFO;
			case 30: // INVOICE_INFO
				return INVOICE_INFO;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __STATUS_ISSET_ID = 0;
	private static final int __FREIGHTPRICE_ISSET_ID = 1;
	private static final int __REDBAGPRICE_ISSET_ID = 2;
	private static final int __BALANCEPRICE_ISSET_ID = 3;
	private static final int __PAYPRICE_ISSET_ID = 4;
	private static final int __TAXPRICE_ISSET_ID = 5;
	private static final int __SUMQUANTITY_ISSET_ID = 6;
	private static final int __ISPOP_ISSET_ID = 7;
	private static final int __ISSHOWRETURN_ISSET_ID = 8;
	private static final int __REDUCEPRICE_ISSET_ID = 9;
	private static final int __SALEPRICE_ISSET_ID = 10;
	private static final int __ORDERSTATUSTIME_ISSET_ID = 11;
	private static final int __ISGROUPON_ISSET_ID = 12;
	private static final int __PAYMODE_ISSET_ID = 13;
	private short __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ORDER_CODE,
				new org.apache.thrift.meta_data.FieldMetaData("orderCode",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ORDER_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("orderTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.STATUS_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("statusName",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DST_CONSIGNEE,
				new org.apache.thrift.meta_data.FieldMetaData("dstConsignee",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DST_TEL,
				new org.apache.thrift.meta_data.FieldMetaData("dstTel", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DST_MOBILE,
				new org.apache.thrift.meta_data.FieldMetaData("dstMobile",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DST_ADDRESS,
				new org.apache.thrift.meta_data.FieldMetaData("dstAddress",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FREIGHT_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("freightPrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.REDBAG_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("redbagPrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.BALANCE_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("balancePrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PAY_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("payPrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.TAX_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("taxName",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TAX_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("taxPrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.SUM_QUANTITY,
				new org.apache.thrift.meta_data.FieldMetaData("sumQuantity",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_POP,
				new org.apache.thrift.meta_data.FieldMetaData("isPop", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.IS_SHOW_RETURN,
				new org.apache.thrift.meta_data.FieldMetaData("isShowReturn",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.REDUCE_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("reducePrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.SALE_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("salePrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.ORDER_STATUS_TITLE,
				new org.apache.thrift.meta_data.FieldMetaData("orderStatusTitle",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ORDER_STATUS_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("orderStatusTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.IS_GROUPON,
				new org.apache.thrift.meta_data.FieldMetaData("isGroupon",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.ORDER_CANCEL_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("orderCancelTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ORDER_PAY_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("orderPayTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PAY_MODE,
				new org.apache.thrift.meta_data.FieldMetaData("payMode",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.ORDER_DELIVER_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("orderDeliverTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ORDER_FINISH_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("orderFinishTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ITEM_INFOS,
				new org.apache.thrift.meta_data.FieldMetaData("itemInfos",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
										TItemInfo.class))));
		tmpMap.put(_Fields.STORE_INFO,
				new org.apache.thrift.meta_data.FieldMetaData("storeInfo",
						org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
								org.apache.thrift.protocol.TType.STRUCT, TStoreInfo.class)));
		tmpMap.put(_Fields.INVOICE_INFO,
				new org.apache.thrift.meta_data.FieldMetaData("invoiceInfo",
						org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
								org.apache.thrift.protocol.TType.STRUCT, TInvoiceInfo.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOrderDetailInfo.class, metaDataMap);
	}

	public TOrderDetailInfo() {
	}

	public TOrderDetailInfo(String orderCode, String orderTime, short status, String statusName, String dstConsignee,
			String dstTel, String dstMobile, String dstAddress, double freightPrice, double redbagPrice,
			double balancePrice, double payPrice, String taxName, double taxPrice, int sumQuantity, short isPop,
			short isShowReturn, double reducePrice, double salePrice, String orderStatusTitle, long orderStatusTime,
			short isGroupon, String orderCancelTime, String orderPayTime, short payMode, String orderDeliverTime,
			String orderFinishTime, List<TItemInfo> itemInfos, TStoreInfo storeInfo, TInvoiceInfo invoiceInfo) {
		this();
		this.orderCode = orderCode;
		this.orderTime = orderTime;
		this.status = status;
		setStatusIsSet(true);
		this.statusName = statusName;
		this.dstConsignee = dstConsignee;
		this.dstTel = dstTel;
		this.dstMobile = dstMobile;
		this.dstAddress = dstAddress;
		this.freightPrice = freightPrice;
		setFreightPriceIsSet(true);
		this.redbagPrice = redbagPrice;
		setRedbagPriceIsSet(true);
		this.balancePrice = balancePrice;
		setBalancePriceIsSet(true);
		this.payPrice = payPrice;
		setPayPriceIsSet(true);
		this.taxName = taxName;
		this.taxPrice = taxPrice;
		setTaxPriceIsSet(true);
		this.sumQuantity = sumQuantity;
		setSumQuantityIsSet(true);
		this.isPop = isPop;
		setIsPopIsSet(true);
		this.isShowReturn = isShowReturn;
		setIsShowReturnIsSet(true);
		this.reducePrice = reducePrice;
		setReducePriceIsSet(true);
		this.salePrice = salePrice;
		setSalePriceIsSet(true);
		this.orderStatusTitle = orderStatusTitle;
		this.orderStatusTime = orderStatusTime;
		setOrderStatusTimeIsSet(true);
		this.isGroupon = isGroupon;
		setIsGrouponIsSet(true);
		this.orderCancelTime = orderCancelTime;
		this.orderPayTime = orderPayTime;
		this.payMode = payMode;
		setPayModeIsSet(true);
		this.orderDeliverTime = orderDeliverTime;
		this.orderFinishTime = orderFinishTime;
		this.itemInfos = itemInfos;
		this.storeInfo = storeInfo;
		this.invoiceInfo = invoiceInfo;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TOrderDetailInfo(TOrderDetailInfo other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetOrderCode()) {
			this.orderCode = other.orderCode;
		}
		if (other.isSetOrderTime()) {
			this.orderTime = other.orderTime;
		}
		this.status = other.status;
		if (other.isSetStatusName()) {
			this.statusName = other.statusName;
		}
		if (other.isSetDstConsignee()) {
			this.dstConsignee = other.dstConsignee;
		}
		if (other.isSetDstTel()) {
			this.dstTel = other.dstTel;
		}
		if (other.isSetDstMobile()) {
			this.dstMobile = other.dstMobile;
		}
		if (other.isSetDstAddress()) {
			this.dstAddress = other.dstAddress;
		}
		this.freightPrice = other.freightPrice;
		this.redbagPrice = other.redbagPrice;
		this.balancePrice = other.balancePrice;
		this.payPrice = other.payPrice;
		if (other.isSetTaxName()) {
			this.taxName = other.taxName;
		}
		this.taxPrice = other.taxPrice;
		this.sumQuantity = other.sumQuantity;
		this.isPop = other.isPop;
		this.isShowReturn = other.isShowReturn;
		this.reducePrice = other.reducePrice;
		this.salePrice = other.salePrice;
		if (other.isSetOrderStatusTitle()) {
			this.orderStatusTitle = other.orderStatusTitle;
		}
		this.orderStatusTime = other.orderStatusTime;
		this.isGroupon = other.isGroupon;
		if (other.isSetOrderCancelTime()) {
			this.orderCancelTime = other.orderCancelTime;
		}
		if (other.isSetOrderPayTime()) {
			this.orderPayTime = other.orderPayTime;
		}
		this.payMode = other.payMode;
		if (other.isSetOrderDeliverTime()) {
			this.orderDeliverTime = other.orderDeliverTime;
		}
		if (other.isSetOrderFinishTime()) {
			this.orderFinishTime = other.orderFinishTime;
		}
		if (other.isSetItemInfos()) {
			List<TItemInfo> __this__itemInfos = new ArrayList<TItemInfo>(other.itemInfos.size());
			for (TItemInfo other_element : other.itemInfos) {
				__this__itemInfos.add(new TItemInfo(other_element));
			}
			this.itemInfos = __this__itemInfos;
		}
		if (other.isSetStoreInfo()) {
			this.storeInfo = new TStoreInfo(other.storeInfo);
		}
		if (other.isSetInvoiceInfo()) {
			this.invoiceInfo = new TInvoiceInfo(other.invoiceInfo);
		}
	}

	public TOrderDetailInfo deepCopy() {
		return new TOrderDetailInfo(this);
	}

	@Override
	public void clear() {
		this.orderCode = null;
		this.orderTime = null;
		setStatusIsSet(false);
		this.status = 0;
		this.statusName = null;
		this.dstConsignee = null;
		this.dstTel = null;
		this.dstMobile = null;
		this.dstAddress = null;
		setFreightPriceIsSet(false);
		this.freightPrice = 0.0;
		setRedbagPriceIsSet(false);
		this.redbagPrice = 0.0;
		setBalancePriceIsSet(false);
		this.balancePrice = 0.0;
		setPayPriceIsSet(false);
		this.payPrice = 0.0;
		this.taxName = null;
		setTaxPriceIsSet(false);
		this.taxPrice = 0.0;
		setSumQuantityIsSet(false);
		this.sumQuantity = 0;
		setIsPopIsSet(false);
		this.isPop = 0;
		setIsShowReturnIsSet(false);
		this.isShowReturn = 0;
		setReducePriceIsSet(false);
		this.reducePrice = 0.0;
		setSalePriceIsSet(false);
		this.salePrice = 0.0;
		this.orderStatusTitle = null;
		setOrderStatusTimeIsSet(false);
		this.orderStatusTime = 0;
		setIsGrouponIsSet(false);
		this.isGroupon = 0;
		this.orderCancelTime = null;
		this.orderPayTime = null;
		setPayModeIsSet(false);
		this.payMode = 0;
		this.orderDeliverTime = null;
		this.orderFinishTime = null;
		this.itemInfos = null;
		this.storeInfo = null;
		this.invoiceInfo = null;
	}

	public String getOrderCode() {
		return this.orderCode;
	}

	public TOrderDetailInfo setOrderCode(String orderCode) {
		this.orderCode = orderCode;
		return this;
	}

	public void unsetOrderCode() {
		this.orderCode = null;
	}

	/**
	 * Returns true if field orderCode is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderCode() {
		return this.orderCode != null;
	}

	public void setOrderCodeIsSet(boolean value) {
		if (!value) {
			this.orderCode = null;
		}
	}

	public String getOrderTime() {
		return this.orderTime;
	}

	public TOrderDetailInfo setOrderTime(String orderTime) {
		this.orderTime = orderTime;
		return this;
	}

	public void unsetOrderTime() {
		this.orderTime = null;
	}

	/**
	 * Returns true if field orderTime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderTime() {
		return this.orderTime != null;
	}

	public void setOrderTimeIsSet(boolean value) {
		if (!value) {
			this.orderTime = null;
		}
	}

	public short getStatus() {
		return this.status;
	}

	public TOrderDetailInfo setStatus(short status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatus() {
		return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public String getStatusName() {
		return this.statusName;
	}

	public TOrderDetailInfo setStatusName(String statusName) {
		this.statusName = statusName;
		return this;
	}

	public void unsetStatusName() {
		this.statusName = null;
	}

	/**
	 * Returns true if field statusName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetStatusName() {
		return this.statusName != null;
	}

	public void setStatusNameIsSet(boolean value) {
		if (!value) {
			this.statusName = null;
		}
	}

	public String getDstConsignee() {
		return this.dstConsignee;
	}

	public TOrderDetailInfo setDstConsignee(String dstConsignee) {
		this.dstConsignee = dstConsignee;
		return this;
	}

	public void unsetDstConsignee() {
		this.dstConsignee = null;
	}

	/**
	 * Returns true if field dstConsignee is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDstConsignee() {
		return this.dstConsignee != null;
	}

	public void setDstConsigneeIsSet(boolean value) {
		if (!value) {
			this.dstConsignee = null;
		}
	}

	public String getDstTel() {
		return this.dstTel;
	}

	public TOrderDetailInfo setDstTel(String dstTel) {
		this.dstTel = dstTel;
		return this;
	}

	public void unsetDstTel() {
		this.dstTel = null;
	}

	/**
	 * Returns true if field dstTel is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDstTel() {
		return this.dstTel != null;
	}

	public void setDstTelIsSet(boolean value) {
		if (!value) {
			this.dstTel = null;
		}
	}

	public String getDstMobile() {
		return this.dstMobile;
	}

	public TOrderDetailInfo setDstMobile(String dstMobile) {
		this.dstMobile = dstMobile;
		return this;
	}

	public void unsetDstMobile() {
		this.dstMobile = null;
	}

	/**
	 * Returns true if field dstMobile is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDstMobile() {
		return this.dstMobile != null;
	}

	public void setDstMobileIsSet(boolean value) {
		if (!value) {
			this.dstMobile = null;
		}
	}

	public String getDstAddress() {
		return this.dstAddress;
	}

	public TOrderDetailInfo setDstAddress(String dstAddress) {
		this.dstAddress = dstAddress;
		return this;
	}

	public void unsetDstAddress() {
		this.dstAddress = null;
	}

	/**
	 * Returns true if field dstAddress is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDstAddress() {
		return this.dstAddress != null;
	}

	public void setDstAddressIsSet(boolean value) {
		if (!value) {
			this.dstAddress = null;
		}
	}

	public double getFreightPrice() {
		return this.freightPrice;
	}

	public TOrderDetailInfo setFreightPrice(double freightPrice) {
		this.freightPrice = freightPrice;
		setFreightPriceIsSet(true);
		return this;
	}

	public void unsetFreightPrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREIGHTPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field freightPrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetFreightPrice() {
		return EncodingUtils.testBit(__isset_bitfield, __FREIGHTPRICE_ISSET_ID);
	}

	public void setFreightPriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREIGHTPRICE_ISSET_ID, value);
	}

	public double getRedbagPrice() {
		return this.redbagPrice;
	}

	public TOrderDetailInfo setRedbagPrice(double redbagPrice) {
		this.redbagPrice = redbagPrice;
		setRedbagPriceIsSet(true);
		return this;
	}

	public void unsetRedbagPrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDBAGPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field redbagPrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetRedbagPrice() {
		return EncodingUtils.testBit(__isset_bitfield, __REDBAGPRICE_ISSET_ID);
	}

	public void setRedbagPriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDBAGPRICE_ISSET_ID, value);
	}

	public double getBalancePrice() {
		return this.balancePrice;
	}

	public TOrderDetailInfo setBalancePrice(double balancePrice) {
		this.balancePrice = balancePrice;
		setBalancePriceIsSet(true);
		return this;
	}

	public void unsetBalancePrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCEPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field balancePrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetBalancePrice() {
		return EncodingUtils.testBit(__isset_bitfield, __BALANCEPRICE_ISSET_ID);
	}

	public void setBalancePriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCEPRICE_ISSET_ID, value);
	}

	public double getPayPrice() {
		return this.payPrice;
	}

	public TOrderDetailInfo setPayPrice(double payPrice) {
		this.payPrice = payPrice;
		setPayPriceIsSet(true);
		return this;
	}

	public void unsetPayPrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field payPrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPayPrice() {
		return EncodingUtils.testBit(__isset_bitfield, __PAYPRICE_ISSET_ID);
	}

	public void setPayPriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYPRICE_ISSET_ID, value);
	}

	public String getTaxName() {
		return this.taxName;
	}

	public TOrderDetailInfo setTaxName(String taxName) {
		this.taxName = taxName;
		return this;
	}

	public void unsetTaxName() {
		this.taxName = null;
	}

	/**
	 * Returns true if field taxName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetTaxName() {
		return this.taxName != null;
	}

	public void setTaxNameIsSet(boolean value) {
		if (!value) {
			this.taxName = null;
		}
	}

	public double getTaxPrice() {
		return this.taxPrice;
	}

	public TOrderDetailInfo setTaxPrice(double taxPrice) {
		this.taxPrice = taxPrice;
		setTaxPriceIsSet(true);
		return this;
	}

	public void unsetTaxPrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAXPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field taxPrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetTaxPrice() {
		return EncodingUtils.testBit(__isset_bitfield, __TAXPRICE_ISSET_ID);
	}

	public void setTaxPriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAXPRICE_ISSET_ID, value);
	}

	public int getSumQuantity() {
		return this.sumQuantity;
	}

	public TOrderDetailInfo setSumQuantity(int sumQuantity) {
		this.sumQuantity = sumQuantity;
		setSumQuantityIsSet(true);
		return this;
	}

	public void unsetSumQuantity() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUMQUANTITY_ISSET_ID);
	}

	/**
	 * Returns true if field sumQuantity is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSumQuantity() {
		return EncodingUtils.testBit(__isset_bitfield, __SUMQUANTITY_ISSET_ID);
	}

	public void setSumQuantityIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUMQUANTITY_ISSET_ID, value);
	}

	public short getIsPop() {
		return this.isPop;
	}

	public TOrderDetailInfo setIsPop(short isPop) {
		this.isPop = isPop;
		setIsPopIsSet(true);
		return this;
	}

	public void unsetIsPop() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPOP_ISSET_ID);
	}

	/**
	 * Returns true if field isPop is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsPop() {
		return EncodingUtils.testBit(__isset_bitfield, __ISPOP_ISSET_ID);
	}

	public void setIsPopIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPOP_ISSET_ID, value);
	}

	public short getIsShowReturn() {
		return this.isShowReturn;
	}

	public TOrderDetailInfo setIsShowReturn(short isShowReturn) {
		this.isShowReturn = isShowReturn;
		setIsShowReturnIsSet(true);
		return this;
	}

	public void unsetIsShowReturn() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSHOWRETURN_ISSET_ID);
	}

	/**
	 * Returns true if field isShowReturn is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetIsShowReturn() {
		return EncodingUtils.testBit(__isset_bitfield, __ISSHOWRETURN_ISSET_ID);
	}

	public void setIsShowReturnIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSHOWRETURN_ISSET_ID, value);
	}

	public double getReducePrice() {
		return this.reducePrice;
	}

	public TOrderDetailInfo setReducePrice(double reducePrice) {
		this.reducePrice = reducePrice;
		setReducePriceIsSet(true);
		return this;
	}

	public void unsetReducePrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDUCEPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field reducePrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetReducePrice() {
		return EncodingUtils.testBit(__isset_bitfield, __REDUCEPRICE_ISSET_ID);
	}

	public void setReducePriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDUCEPRICE_ISSET_ID, value);
	}

	public double getSalePrice() {
		return this.salePrice;
	}

	public TOrderDetailInfo setSalePrice(double salePrice) {
		this.salePrice = salePrice;
		setSalePriceIsSet(true);
		return this;
	}

	public void unsetSalePrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field salePrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSalePrice() {
		return EncodingUtils.testBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
	}

	public void setSalePriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALEPRICE_ISSET_ID, value);
	}

	public String getOrderStatusTitle() {
		return this.orderStatusTitle;
	}

	public TOrderDetailInfo setOrderStatusTitle(String orderStatusTitle) {
		this.orderStatusTitle = orderStatusTitle;
		return this;
	}

	public void unsetOrderStatusTitle() {
		this.orderStatusTitle = null;
	}

	/**
	 * Returns true if field orderStatusTitle is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetOrderStatusTitle() {
		return this.orderStatusTitle != null;
	}

	public void setOrderStatusTitleIsSet(boolean value) {
		if (!value) {
			this.orderStatusTitle = null;
		}
	}

	public long getOrderStatusTime() {
		return this.orderStatusTime;
	}

	public TOrderDetailInfo setOrderStatusTime(long orderStatusTime) {
		this.orderStatusTime = orderStatusTime;
		setOrderStatusTimeIsSet(true);
		return this;
	}

	public void unsetOrderStatusTime() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERSTATUSTIME_ISSET_ID);
	}

	/**
	 * Returns true if field orderStatusTime is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetOrderStatusTime() {
		return EncodingUtils.testBit(__isset_bitfield, __ORDERSTATUSTIME_ISSET_ID);
	}

	public void setOrderStatusTimeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERSTATUSTIME_ISSET_ID, value);
	}

	public short getIsGroupon() {
		return this.isGroupon;
	}

	public TOrderDetailInfo setIsGroupon(short isGroupon) {
		this.isGroupon = isGroupon;
		setIsGrouponIsSet(true);
		return this;
	}

	public void unsetIsGroupon() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGROUPON_ISSET_ID);
	}

	/**
	 * Returns true if field isGroupon is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetIsGroupon() {
		return EncodingUtils.testBit(__isset_bitfield, __ISGROUPON_ISSET_ID);
	}

	public void setIsGrouponIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGROUPON_ISSET_ID, value);
	}

	public String getOrderCancelTime() {
		return this.orderCancelTime;
	}

	public TOrderDetailInfo setOrderCancelTime(String orderCancelTime) {
		this.orderCancelTime = orderCancelTime;
		return this;
	}

	public void unsetOrderCancelTime() {
		this.orderCancelTime = null;
	}

	/**
	 * Returns true if field orderCancelTime is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetOrderCancelTime() {
		return this.orderCancelTime != null;
	}

	public void setOrderCancelTimeIsSet(boolean value) {
		if (!value) {
			this.orderCancelTime = null;
		}
	}

	public String getOrderPayTime() {
		return this.orderPayTime;
	}

	public TOrderDetailInfo setOrderPayTime(String orderPayTime) {
		this.orderPayTime = orderPayTime;
		return this;
	}

	public void unsetOrderPayTime() {
		this.orderPayTime = null;
	}

	/**
	 * Returns true if field orderPayTime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderPayTime() {
		return this.orderPayTime != null;
	}

	public void setOrderPayTimeIsSet(boolean value) {
		if (!value) {
			this.orderPayTime = null;
		}
	}

	public short getPayMode() {
		return this.payMode;
	}

	public TOrderDetailInfo setPayMode(short payMode) {
		this.payMode = payMode;
		setPayModeIsSet(true);
		return this;
	}

	public void unsetPayMode() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMODE_ISSET_ID);
	}

	/**
	 * Returns true if field payMode is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPayMode() {
		return EncodingUtils.testBit(__isset_bitfield, __PAYMODE_ISSET_ID);
	}

	public void setPayModeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMODE_ISSET_ID, value);
	}

	public String getOrderDeliverTime() {
		return this.orderDeliverTime;
	}

	public TOrderDetailInfo setOrderDeliverTime(String orderDeliverTime) {
		this.orderDeliverTime = orderDeliverTime;
		return this;
	}

	public void unsetOrderDeliverTime() {
		this.orderDeliverTime = null;
	}

	/**
	 * Returns true if field orderDeliverTime is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetOrderDeliverTime() {
		return this.orderDeliverTime != null;
	}

	public void setOrderDeliverTimeIsSet(boolean value) {
		if (!value) {
			this.orderDeliverTime = null;
		}
	}

	public String getOrderFinishTime() {
		return this.orderFinishTime;
	}

	public TOrderDetailInfo setOrderFinishTime(String orderFinishTime) {
		this.orderFinishTime = orderFinishTime;
		return this;
	}

	public void unsetOrderFinishTime() {
		this.orderFinishTime = null;
	}

	/**
	 * Returns true if field orderFinishTime is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetOrderFinishTime() {
		return this.orderFinishTime != null;
	}

	public void setOrderFinishTimeIsSet(boolean value) {
		if (!value) {
			this.orderFinishTime = null;
		}
	}

	public int getItemInfosSize() {
		return (this.itemInfos == null) ? 0 : this.itemInfos.size();
	}

	public java.util.Iterator<TItemInfo> getItemInfosIterator() {
		return (this.itemInfos == null) ? null : this.itemInfos.iterator();
	}

	public void addToItemInfos(TItemInfo elem) {
		if (this.itemInfos == null) {
			this.itemInfos = new ArrayList<TItemInfo>();
		}
		this.itemInfos.add(elem);
	}

	public List<TItemInfo> getItemInfos() {
		return this.itemInfos;
	}

	public TOrderDetailInfo setItemInfos(List<TItemInfo> itemInfos) {
		this.itemInfos = itemInfos;
		return this;
	}

	public void unsetItemInfos() {
		this.itemInfos = null;
	}

	/**
	 * Returns true if field itemInfos is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetItemInfos() {
		return this.itemInfos != null;
	}

	public void setItemInfosIsSet(boolean value) {
		if (!value) {
			this.itemInfos = null;
		}
	}

	public TStoreInfo getStoreInfo() {
		return this.storeInfo;
	}

	public TOrderDetailInfo setStoreInfo(TStoreInfo storeInfo) {
		this.storeInfo = storeInfo;
		return this;
	}

	public void unsetStoreInfo() {
		this.storeInfo = null;
	}

	/**
	 * Returns true if field storeInfo is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetStoreInfo() {
		return this.storeInfo != null;
	}

	public void setStoreInfoIsSet(boolean value) {
		if (!value) {
			this.storeInfo = null;
		}
	}

	public TInvoiceInfo getInvoiceInfo() {
		return this.invoiceInfo;
	}

	public TOrderDetailInfo setInvoiceInfo(TInvoiceInfo invoiceInfo) {
		this.invoiceInfo = invoiceInfo;
		return this;
	}

	public void unsetInvoiceInfo() {
		this.invoiceInfo = null;
	}

	/**
	 * Returns true if field invoiceInfo is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetInvoiceInfo() {
		return this.invoiceInfo != null;
	}

	public void setInvoiceInfoIsSet(boolean value) {
		if (!value) {
			this.invoiceInfo = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ORDER_CODE:
			if (value == null) {
				unsetOrderCode();
			} else {
				setOrderCode((String) value);
			}
			break;

		case ORDER_TIME:
			if (value == null) {
				unsetOrderTime();
			} else {
				setOrderTime((String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			} else {
				setStatus((Short) value);
			}
			break;

		case STATUS_NAME:
			if (value == null) {
				unsetStatusName();
			} else {
				setStatusName((String) value);
			}
			break;

		case DST_CONSIGNEE:
			if (value == null) {
				unsetDstConsignee();
			} else {
				setDstConsignee((String) value);
			}
			break;

		case DST_TEL:
			if (value == null) {
				unsetDstTel();
			} else {
				setDstTel((String) value);
			}
			break;

		case DST_MOBILE:
			if (value == null) {
				unsetDstMobile();
			} else {
				setDstMobile((String) value);
			}
			break;

		case DST_ADDRESS:
			if (value == null) {
				unsetDstAddress();
			} else {
				setDstAddress((String) value);
			}
			break;

		case FREIGHT_PRICE:
			if (value == null) {
				unsetFreightPrice();
			} else {
				setFreightPrice((Double) value);
			}
			break;

		case REDBAG_PRICE:
			if (value == null) {
				unsetRedbagPrice();
			} else {
				setRedbagPrice((Double) value);
			}
			break;

		case BALANCE_PRICE:
			if (value == null) {
				unsetBalancePrice();
			} else {
				setBalancePrice((Double) value);
			}
			break;

		case PAY_PRICE:
			if (value == null) {
				unsetPayPrice();
			} else {
				setPayPrice((Double) value);
			}
			break;

		case TAX_NAME:
			if (value == null) {
				unsetTaxName();
			} else {
				setTaxName((String) value);
			}
			break;

		case TAX_PRICE:
			if (value == null) {
				unsetTaxPrice();
			} else {
				setTaxPrice((Double) value);
			}
			break;

		case SUM_QUANTITY:
			if (value == null) {
				unsetSumQuantity();
			} else {
				setSumQuantity((Integer) value);
			}
			break;

		case IS_POP:
			if (value == null) {
				unsetIsPop();
			} else {
				setIsPop((Short) value);
			}
			break;

		case IS_SHOW_RETURN:
			if (value == null) {
				unsetIsShowReturn();
			} else {
				setIsShowReturn((Short) value);
			}
			break;

		case REDUCE_PRICE:
			if (value == null) {
				unsetReducePrice();
			} else {
				setReducePrice((Double) value);
			}
			break;

		case SALE_PRICE:
			if (value == null) {
				unsetSalePrice();
			} else {
				setSalePrice((Double) value);
			}
			break;

		case ORDER_STATUS_TITLE:
			if (value == null) {
				unsetOrderStatusTitle();
			} else {
				setOrderStatusTitle((String) value);
			}
			break;

		case ORDER_STATUS_TIME:
			if (value == null) {
				unsetOrderStatusTime();
			} else {
				setOrderStatusTime((Long) value);
			}
			break;

		case IS_GROUPON:
			if (value == null) {
				unsetIsGroupon();
			} else {
				setIsGroupon((Short) value);
			}
			break;

		case ORDER_CANCEL_TIME:
			if (value == null) {
				unsetOrderCancelTime();
			} else {
				setOrderCancelTime((String) value);
			}
			break;

		case ORDER_PAY_TIME:
			if (value == null) {
				unsetOrderPayTime();
			} else {
				setOrderPayTime((String) value);
			}
			break;

		case PAY_MODE:
			if (value == null) {
				unsetPayMode();
			} else {
				setPayMode((Short) value);
			}
			break;

		case ORDER_DELIVER_TIME:
			if (value == null) {
				unsetOrderDeliverTime();
			} else {
				setOrderDeliverTime((String) value);
			}
			break;

		case ORDER_FINISH_TIME:
			if (value == null) {
				unsetOrderFinishTime();
			} else {
				setOrderFinishTime((String) value);
			}
			break;

		case ITEM_INFOS:
			if (value == null) {
				unsetItemInfos();
			} else {
				setItemInfos((List<TItemInfo>) value);
			}
			break;

		case STORE_INFO:
			if (value == null) {
				unsetStoreInfo();
			} else {
				setStoreInfo((TStoreInfo) value);
			}
			break;

		case INVOICE_INFO:
			if (value == null) {
				unsetInvoiceInfo();
			} else {
				setInvoiceInfo((TInvoiceInfo) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ORDER_CODE:
			return getOrderCode();

		case ORDER_TIME:
			return getOrderTime();

		case STATUS:
			return getStatus();

		case STATUS_NAME:
			return getStatusName();

		case DST_CONSIGNEE:
			return getDstConsignee();

		case DST_TEL:
			return getDstTel();

		case DST_MOBILE:
			return getDstMobile();

		case DST_ADDRESS:
			return getDstAddress();

		case FREIGHT_PRICE:
			return getFreightPrice();

		case REDBAG_PRICE:
			return getRedbagPrice();

		case BALANCE_PRICE:
			return getBalancePrice();

		case PAY_PRICE:
			return getPayPrice();

		case TAX_NAME:
			return getTaxName();

		case TAX_PRICE:
			return getTaxPrice();

		case SUM_QUANTITY:
			return getSumQuantity();

		case IS_POP:
			return getIsPop();

		case IS_SHOW_RETURN:
			return getIsShowReturn();

		case REDUCE_PRICE:
			return getReducePrice();

		case SALE_PRICE:
			return getSalePrice();

		case ORDER_STATUS_TITLE:
			return getOrderStatusTitle();

		case ORDER_STATUS_TIME:
			return getOrderStatusTime();

		case IS_GROUPON:
			return getIsGroupon();

		case ORDER_CANCEL_TIME:
			return getOrderCancelTime();

		case ORDER_PAY_TIME:
			return getOrderPayTime();

		case PAY_MODE:
			return getPayMode();

		case ORDER_DELIVER_TIME:
			return getOrderDeliverTime();

		case ORDER_FINISH_TIME:
			return getOrderFinishTime();

		case ITEM_INFOS:
			return getItemInfos();

		case STORE_INFO:
			return getStoreInfo();

		case INVOICE_INFO:
			return getInvoiceInfo();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ORDER_CODE:
			return isSetOrderCode();
		case ORDER_TIME:
			return isSetOrderTime();
		case STATUS:
			return isSetStatus();
		case STATUS_NAME:
			return isSetStatusName();
		case DST_CONSIGNEE:
			return isSetDstConsignee();
		case DST_TEL:
			return isSetDstTel();
		case DST_MOBILE:
			return isSetDstMobile();
		case DST_ADDRESS:
			return isSetDstAddress();
		case FREIGHT_PRICE:
			return isSetFreightPrice();
		case REDBAG_PRICE:
			return isSetRedbagPrice();
		case BALANCE_PRICE:
			return isSetBalancePrice();
		case PAY_PRICE:
			return isSetPayPrice();
		case TAX_NAME:
			return isSetTaxName();
		case TAX_PRICE:
			return isSetTaxPrice();
		case SUM_QUANTITY:
			return isSetSumQuantity();
		case IS_POP:
			return isSetIsPop();
		case IS_SHOW_RETURN:
			return isSetIsShowReturn();
		case REDUCE_PRICE:
			return isSetReducePrice();
		case SALE_PRICE:
			return isSetSalePrice();
		case ORDER_STATUS_TITLE:
			return isSetOrderStatusTitle();
		case ORDER_STATUS_TIME:
			return isSetOrderStatusTime();
		case IS_GROUPON:
			return isSetIsGroupon();
		case ORDER_CANCEL_TIME:
			return isSetOrderCancelTime();
		case ORDER_PAY_TIME:
			return isSetOrderPayTime();
		case PAY_MODE:
			return isSetPayMode();
		case ORDER_DELIVER_TIME:
			return isSetOrderDeliverTime();
		case ORDER_FINISH_TIME:
			return isSetOrderFinishTime();
		case ITEM_INFOS:
			return isSetItemInfos();
		case STORE_INFO:
			return isSetStoreInfo();
		case INVOICE_INFO:
			return isSetInvoiceInfo();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TOrderDetailInfo)
			return this.equals((TOrderDetailInfo) that);
		return false;
	}

	public boolean equals(TOrderDetailInfo that) {
		if (that == null)
			return false;

		boolean this_present_orderCode = true && this.isSetOrderCode();
		boolean that_present_orderCode = true && that.isSetOrderCode();
		if (this_present_orderCode || that_present_orderCode) {
			if (!(this_present_orderCode && that_present_orderCode))
				return false;
			if (!this.orderCode.equals(that.orderCode))
				return false;
		}

		boolean this_present_orderTime = true && this.isSetOrderTime();
		boolean that_present_orderTime = true && that.isSetOrderTime();
		if (this_present_orderTime || that_present_orderTime) {
			if (!(this_present_orderTime && that_present_orderTime))
				return false;
			if (!this.orderTime.equals(that.orderTime))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_statusName = true && this.isSetStatusName();
		boolean that_present_statusName = true && that.isSetStatusName();
		if (this_present_statusName || that_present_statusName) {
			if (!(this_present_statusName && that_present_statusName))
				return false;
			if (!this.statusName.equals(that.statusName))
				return false;
		}

		boolean this_present_dstConsignee = true && this.isSetDstConsignee();
		boolean that_present_dstConsignee = true && that.isSetDstConsignee();
		if (this_present_dstConsignee || that_present_dstConsignee) {
			if (!(this_present_dstConsignee && that_present_dstConsignee))
				return false;
			if (!this.dstConsignee.equals(that.dstConsignee))
				return false;
		}

		boolean this_present_dstTel = true && this.isSetDstTel();
		boolean that_present_dstTel = true && that.isSetDstTel();
		if (this_present_dstTel || that_present_dstTel) {
			if (!(this_present_dstTel && that_present_dstTel))
				return false;
			if (!this.dstTel.equals(that.dstTel))
				return false;
		}

		boolean this_present_dstMobile = true && this.isSetDstMobile();
		boolean that_present_dstMobile = true && that.isSetDstMobile();
		if (this_present_dstMobile || that_present_dstMobile) {
			if (!(this_present_dstMobile && that_present_dstMobile))
				return false;
			if (!this.dstMobile.equals(that.dstMobile))
				return false;
		}

		boolean this_present_dstAddress = true && this.isSetDstAddress();
		boolean that_present_dstAddress = true && that.isSetDstAddress();
		if (this_present_dstAddress || that_present_dstAddress) {
			if (!(this_present_dstAddress && that_present_dstAddress))
				return false;
			if (!this.dstAddress.equals(that.dstAddress))
				return false;
		}

		boolean this_present_freightPrice = true;
		boolean that_present_freightPrice = true;
		if (this_present_freightPrice || that_present_freightPrice) {
			if (!(this_present_freightPrice && that_present_freightPrice))
				return false;
			if (this.freightPrice != that.freightPrice)
				return false;
		}

		boolean this_present_redbagPrice = true;
		boolean that_present_redbagPrice = true;
		if (this_present_redbagPrice || that_present_redbagPrice) {
			if (!(this_present_redbagPrice && that_present_redbagPrice))
				return false;
			if (this.redbagPrice != that.redbagPrice)
				return false;
		}

		boolean this_present_balancePrice = true;
		boolean that_present_balancePrice = true;
		if (this_present_balancePrice || that_present_balancePrice) {
			if (!(this_present_balancePrice && that_present_balancePrice))
				return false;
			if (this.balancePrice != that.balancePrice)
				return false;
		}

		boolean this_present_payPrice = true;
		boolean that_present_payPrice = true;
		if (this_present_payPrice || that_present_payPrice) {
			if (!(this_present_payPrice && that_present_payPrice))
				return false;
			if (this.payPrice != that.payPrice)
				return false;
		}

		boolean this_present_taxName = true && this.isSetTaxName();
		boolean that_present_taxName = true && that.isSetTaxName();
		if (this_present_taxName || that_present_taxName) {
			if (!(this_present_taxName && that_present_taxName))
				return false;
			if (!this.taxName.equals(that.taxName))
				return false;
		}

		boolean this_present_taxPrice = true;
		boolean that_present_taxPrice = true;
		if (this_present_taxPrice || that_present_taxPrice) {
			if (!(this_present_taxPrice && that_present_taxPrice))
				return false;
			if (this.taxPrice != that.taxPrice)
				return false;
		}

		boolean this_present_sumQuantity = true;
		boolean that_present_sumQuantity = true;
		if (this_present_sumQuantity || that_present_sumQuantity) {
			if (!(this_present_sumQuantity && that_present_sumQuantity))
				return false;
			if (this.sumQuantity != that.sumQuantity)
				return false;
		}

		boolean this_present_isPop = true;
		boolean that_present_isPop = true;
		if (this_present_isPop || that_present_isPop) {
			if (!(this_present_isPop && that_present_isPop))
				return false;
			if (this.isPop != that.isPop)
				return false;
		}

		boolean this_present_isShowReturn = true;
		boolean that_present_isShowReturn = true;
		if (this_present_isShowReturn || that_present_isShowReturn) {
			if (!(this_present_isShowReturn && that_present_isShowReturn))
				return false;
			if (this.isShowReturn != that.isShowReturn)
				return false;
		}

		boolean this_present_reducePrice = true;
		boolean that_present_reducePrice = true;
		if (this_present_reducePrice || that_present_reducePrice) {
			if (!(this_present_reducePrice && that_present_reducePrice))
				return false;
			if (this.reducePrice != that.reducePrice)
				return false;
		}

		boolean this_present_salePrice = true;
		boolean that_present_salePrice = true;
		if (this_present_salePrice || that_present_salePrice) {
			if (!(this_present_salePrice && that_present_salePrice))
				return false;
			if (this.salePrice != that.salePrice)
				return false;
		}

		boolean this_present_orderStatusTitle = true && this.isSetOrderStatusTitle();
		boolean that_present_orderStatusTitle = true && that.isSetOrderStatusTitle();
		if (this_present_orderStatusTitle || that_present_orderStatusTitle) {
			if (!(this_present_orderStatusTitle && that_present_orderStatusTitle))
				return false;
			if (!this.orderStatusTitle.equals(that.orderStatusTitle))
				return false;
		}

		boolean this_present_orderStatusTime = true;
		boolean that_present_orderStatusTime = true;
		if (this_present_orderStatusTime || that_present_orderStatusTime) {
			if (!(this_present_orderStatusTime && that_present_orderStatusTime))
				return false;
			if (this.orderStatusTime != that.orderStatusTime)
				return false;
		}

		boolean this_present_isGroupon = true;
		boolean that_present_isGroupon = true;
		if (this_present_isGroupon || that_present_isGroupon) {
			if (!(this_present_isGroupon && that_present_isGroupon))
				return false;
			if (this.isGroupon != that.isGroupon)
				return false;
		}

		boolean this_present_orderCancelTime = true && this.isSetOrderCancelTime();
		boolean that_present_orderCancelTime = true && that.isSetOrderCancelTime();
		if (this_present_orderCancelTime || that_present_orderCancelTime) {
			if (!(this_present_orderCancelTime && that_present_orderCancelTime))
				return false;
			if (!this.orderCancelTime.equals(that.orderCancelTime))
				return false;
		}

		boolean this_present_orderPayTime = true && this.isSetOrderPayTime();
		boolean that_present_orderPayTime = true && that.isSetOrderPayTime();
		if (this_present_orderPayTime || that_present_orderPayTime) {
			if (!(this_present_orderPayTime && that_present_orderPayTime))
				return false;
			if (!this.orderPayTime.equals(that.orderPayTime))
				return false;
		}

		boolean this_present_payMode = true;
		boolean that_present_payMode = true;
		if (this_present_payMode || that_present_payMode) {
			if (!(this_present_payMode && that_present_payMode))
				return false;
			if (this.payMode != that.payMode)
				return false;
		}

		boolean this_present_orderDeliverTime = true && this.isSetOrderDeliverTime();
		boolean that_present_orderDeliverTime = true && that.isSetOrderDeliverTime();
		if (this_present_orderDeliverTime || that_present_orderDeliverTime) {
			if (!(this_present_orderDeliverTime && that_present_orderDeliverTime))
				return false;
			if (!this.orderDeliverTime.equals(that.orderDeliverTime))
				return false;
		}

		boolean this_present_orderFinishTime = true && this.isSetOrderFinishTime();
		boolean that_present_orderFinishTime = true && that.isSetOrderFinishTime();
		if (this_present_orderFinishTime || that_present_orderFinishTime) {
			if (!(this_present_orderFinishTime && that_present_orderFinishTime))
				return false;
			if (!this.orderFinishTime.equals(that.orderFinishTime))
				return false;
		}

		boolean this_present_itemInfos = true && this.isSetItemInfos();
		boolean that_present_itemInfos = true && that.isSetItemInfos();
		if (this_present_itemInfos || that_present_itemInfos) {
			if (!(this_present_itemInfos && that_present_itemInfos))
				return false;
			if (!this.itemInfos.equals(that.itemInfos))
				return false;
		}

		boolean this_present_storeInfo = true && this.isSetStoreInfo();
		boolean that_present_storeInfo = true && that.isSetStoreInfo();
		if (this_present_storeInfo || that_present_storeInfo) {
			if (!(this_present_storeInfo && that_present_storeInfo))
				return false;
			if (!this.storeInfo.equals(that.storeInfo))
				return false;
		}

		boolean this_present_invoiceInfo = true && this.isSetInvoiceInfo();
		boolean that_present_invoiceInfo = true && that.isSetInvoiceInfo();
		if (this_present_invoiceInfo || that_present_invoiceInfo) {
			if (!(this_present_invoiceInfo && that_present_invoiceInfo))
				return false;
			if (!this.invoiceInfo.equals(that.invoiceInfo))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_orderCode = true && (isSetOrderCode());
		list.add(present_orderCode);
		if (present_orderCode)
			list.add(orderCode);

		boolean present_orderTime = true && (isSetOrderTime());
		list.add(present_orderTime);
		if (present_orderTime)
			list.add(orderTime);

		boolean present_status = true;
		list.add(present_status);
		if (present_status)
			list.add(status);

		boolean present_statusName = true && (isSetStatusName());
		list.add(present_statusName);
		if (present_statusName)
			list.add(statusName);

		boolean present_dstConsignee = true && (isSetDstConsignee());
		list.add(present_dstConsignee);
		if (present_dstConsignee)
			list.add(dstConsignee);

		boolean present_dstTel = true && (isSetDstTel());
		list.add(present_dstTel);
		if (present_dstTel)
			list.add(dstTel);

		boolean present_dstMobile = true && (isSetDstMobile());
		list.add(present_dstMobile);
		if (present_dstMobile)
			list.add(dstMobile);

		boolean present_dstAddress = true && (isSetDstAddress());
		list.add(present_dstAddress);
		if (present_dstAddress)
			list.add(dstAddress);

		boolean present_freightPrice = true;
		list.add(present_freightPrice);
		if (present_freightPrice)
			list.add(freightPrice);

		boolean present_redbagPrice = true;
		list.add(present_redbagPrice);
		if (present_redbagPrice)
			list.add(redbagPrice);

		boolean present_balancePrice = true;
		list.add(present_balancePrice);
		if (present_balancePrice)
			list.add(balancePrice);

		boolean present_payPrice = true;
		list.add(present_payPrice);
		if (present_payPrice)
			list.add(payPrice);

		boolean present_taxName = true && (isSetTaxName());
		list.add(present_taxName);
		if (present_taxName)
			list.add(taxName);

		boolean present_taxPrice = true;
		list.add(present_taxPrice);
		if (present_taxPrice)
			list.add(taxPrice);

		boolean present_sumQuantity = true;
		list.add(present_sumQuantity);
		if (present_sumQuantity)
			list.add(sumQuantity);

		boolean present_isPop = true;
		list.add(present_isPop);
		if (present_isPop)
			list.add(isPop);

		boolean present_isShowReturn = true;
		list.add(present_isShowReturn);
		if (present_isShowReturn)
			list.add(isShowReturn);

		boolean present_reducePrice = true;
		list.add(present_reducePrice);
		if (present_reducePrice)
			list.add(reducePrice);

		boolean present_salePrice = true;
		list.add(present_salePrice);
		if (present_salePrice)
			list.add(salePrice);

		boolean present_orderStatusTitle = true && (isSetOrderStatusTitle());
		list.add(present_orderStatusTitle);
		if (present_orderStatusTitle)
			list.add(orderStatusTitle);

		boolean present_orderStatusTime = true;
		list.add(present_orderStatusTime);
		if (present_orderStatusTime)
			list.add(orderStatusTime);

		boolean present_isGroupon = true;
		list.add(present_isGroupon);
		if (present_isGroupon)
			list.add(isGroupon);

		boolean present_orderCancelTime = true && (isSetOrderCancelTime());
		list.add(present_orderCancelTime);
		if (present_orderCancelTime)
			list.add(orderCancelTime);

		boolean present_orderPayTime = true && (isSetOrderPayTime());
		list.add(present_orderPayTime);
		if (present_orderPayTime)
			list.add(orderPayTime);

		boolean present_payMode = true;
		list.add(present_payMode);
		if (present_payMode)
			list.add(payMode);

		boolean present_orderDeliverTime = true && (isSetOrderDeliverTime());
		list.add(present_orderDeliverTime);
		if (present_orderDeliverTime)
			list.add(orderDeliverTime);

		boolean present_orderFinishTime = true && (isSetOrderFinishTime());
		list.add(present_orderFinishTime);
		if (present_orderFinishTime)
			list.add(orderFinishTime);

		boolean present_itemInfos = true && (isSetItemInfos());
		list.add(present_itemInfos);
		if (present_itemInfos)
			list.add(itemInfos);

		boolean present_storeInfo = true && (isSetStoreInfo());
		list.add(present_storeInfo);
		if (present_storeInfo)
			list.add(storeInfo);

		boolean present_invoiceInfo = true && (isSetInvoiceInfo());
		list.add(present_invoiceInfo);
		if (present_invoiceInfo)
			list.add(invoiceInfo);

		return list.hashCode();
	}

	@Override
	public int compareTo(TOrderDetailInfo other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetOrderCode()).compareTo(other.isSetOrderCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCode, other.orderCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderTime()).compareTo(other.isSetOrderTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTime, other.orderTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStatusName()).compareTo(other.isSetStatusName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusName, other.statusName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDstConsignee()).compareTo(other.isSetDstConsignee());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDstConsignee()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstConsignee, other.dstConsignee);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDstTel()).compareTo(other.isSetDstTel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDstTel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstTel, other.dstTel);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDstMobile()).compareTo(other.isSetDstMobile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDstMobile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstMobile, other.dstMobile);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDstAddress()).compareTo(other.isSetDstAddress());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDstAddress()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstAddress, other.dstAddress);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFreightPrice()).compareTo(other.isSetFreightPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFreightPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freightPrice, other.freightPrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRedbagPrice()).compareTo(other.isSetRedbagPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRedbagPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redbagPrice, other.redbagPrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetBalancePrice()).compareTo(other.isSetBalancePrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBalancePrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balancePrice, other.balancePrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPayPrice()).compareTo(other.isSetPayPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPrice, other.payPrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTaxName()).compareTo(other.isSetTaxName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTaxName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxName, other.taxName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTaxPrice()).compareTo(other.isSetTaxPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTaxPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxPrice, other.taxPrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSumQuantity()).compareTo(other.isSetSumQuantity());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSumQuantity()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sumQuantity, other.sumQuantity);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsPop()).compareTo(other.isSetIsPop());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsPop()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPop, other.isPop);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsShowReturn()).compareTo(other.isSetIsShowReturn());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsShowReturn()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isShowReturn, other.isShowReturn);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetReducePrice()).compareTo(other.isSetReducePrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReducePrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reducePrice, other.reducePrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSalePrice()).compareTo(other.isSetSalePrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSalePrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salePrice, other.salePrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderStatusTitle()).compareTo(other.isSetOrderStatusTitle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderStatusTitle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatusTitle, other.orderStatusTitle);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderStatusTime()).compareTo(other.isSetOrderStatusTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderStatusTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatusTime, other.orderStatusTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsGroupon()).compareTo(other.isSetIsGroupon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsGroupon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGroupon, other.isGroupon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderCancelTime()).compareTo(other.isSetOrderCancelTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderCancelTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCancelTime, other.orderCancelTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderPayTime()).compareTo(other.isSetOrderPayTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderPayTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderPayTime, other.orderPayTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPayMode()).compareTo(other.isSetPayMode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayMode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMode, other.payMode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderDeliverTime()).compareTo(other.isSetOrderDeliverTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderDeliverTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderDeliverTime, other.orderDeliverTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderFinishTime()).compareTo(other.isSetOrderFinishTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderFinishTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderFinishTime, other.orderFinishTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetItemInfos()).compareTo(other.isSetItemInfos());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetItemInfos()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemInfos, other.itemInfos);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStoreInfo()).compareTo(other.isSetStoreInfo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStoreInfo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeInfo, other.storeInfo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetInvoiceInfo()).compareTo(other.isSetInvoiceInfo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetInvoiceInfo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoiceInfo, other.invoiceInfo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TOrderDetailInfo(");
		boolean first = true;

		sb.append("orderCode:");
		if (this.orderCode == null) {
			sb.append("null");
		} else {
			sb.append(this.orderCode);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderTime:");
		if (this.orderTime == null) {
			sb.append("null");
		} else {
			sb.append(this.orderTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("statusName:");
		if (this.statusName == null) {
			sb.append("null");
		} else {
			sb.append(this.statusName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dstConsignee:");
		if (this.dstConsignee == null) {
			sb.append("null");
		} else {
			sb.append(this.dstConsignee);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dstTel:");
		if (this.dstTel == null) {
			sb.append("null");
		} else {
			sb.append(this.dstTel);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dstMobile:");
		if (this.dstMobile == null) {
			sb.append("null");
		} else {
			sb.append(this.dstMobile);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dstAddress:");
		if (this.dstAddress == null) {
			sb.append("null");
		} else {
			sb.append(this.dstAddress);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("freightPrice:");
		sb.append(this.freightPrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("redbagPrice:");
		sb.append(this.redbagPrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("balancePrice:");
		sb.append(this.balancePrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payPrice:");
		sb.append(this.payPrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("taxName:");
		if (this.taxName == null) {
			sb.append("null");
		} else {
			sb.append(this.taxName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("taxPrice:");
		sb.append(this.taxPrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sumQuantity:");
		sb.append(this.sumQuantity);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isPop:");
		sb.append(this.isPop);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isShowReturn:");
		sb.append(this.isShowReturn);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("reducePrice:");
		sb.append(this.reducePrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("salePrice:");
		sb.append(this.salePrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderStatusTitle:");
		if (this.orderStatusTitle == null) {
			sb.append("null");
		} else {
			sb.append(this.orderStatusTitle);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderStatusTime:");
		sb.append(this.orderStatusTime);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isGroupon:");
		sb.append(this.isGroupon);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderCancelTime:");
		if (this.orderCancelTime == null) {
			sb.append("null");
		} else {
			sb.append(this.orderCancelTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderPayTime:");
		if (this.orderPayTime == null) {
			sb.append("null");
		} else {
			sb.append(this.orderPayTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payMode:");
		sb.append(this.payMode);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderDeliverTime:");
		if (this.orderDeliverTime == null) {
			sb.append("null");
		} else {
			sb.append(this.orderDeliverTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderFinishTime:");
		if (this.orderFinishTime == null) {
			sb.append("null");
		} else {
			sb.append(this.orderFinishTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("itemInfos:");
		if (this.itemInfos == null) {
			sb.append("null");
		} else {
			sb.append(this.itemInfos);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("storeInfo:");
		if (this.storeInfo == null) {
			sb.append("null");
		} else {
			sb.append(this.storeInfo);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("invoiceInfo:");
		if (this.invoiceInfo == null) {
			sb.append("null");
		} else {
			sb.append(this.invoiceInfo);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (storeInfo != null) {
			storeInfo.validate();
		}
		if (invoiceInfo != null) {
			invoiceInfo.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TOrderDetailInfoStandardSchemeFactory implements SchemeFactory {
		public TOrderDetailInfoStandardScheme getScheme() {
			return new TOrderDetailInfoStandardScheme();
		}
	}

	private static class TOrderDetailInfoStandardScheme extends StandardScheme<TOrderDetailInfo> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TOrderDetailInfo struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ORDER_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderCode = iprot.readString();
						struct.setOrderCodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // ORDER_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderTime = iprot.readString();
						struct.setOrderTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.status = iprot.readI16();
						struct.setStatusIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // STATUS_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.statusName = iprot.readString();
						struct.setStatusNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // DST_CONSIGNEE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.dstConsignee = iprot.readString();
						struct.setDstConsigneeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // DST_TEL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.dstTel = iprot.readString();
						struct.setDstTelIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // DST_MOBILE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.dstMobile = iprot.readString();
						struct.setDstMobileIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // DST_ADDRESS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.dstAddress = iprot.readString();
						struct.setDstAddressIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // FREIGHT_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.freightPrice = iprot.readDouble();
						struct.setFreightPriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // REDBAG_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.redbagPrice = iprot.readDouble();
						struct.setRedbagPriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // BALANCE_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.balancePrice = iprot.readDouble();
						struct.setBalancePriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // PAY_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.payPrice = iprot.readDouble();
						struct.setPayPriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // TAX_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.taxName = iprot.readString();
						struct.setTaxNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // TAX_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.taxPrice = iprot.readDouble();
						struct.setTaxPriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // SUM_QUANTITY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.sumQuantity = iprot.readI32();
						struct.setSumQuantityIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // IS_POP
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.isPop = iprot.readI16();
						struct.setIsPopIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // IS_SHOW_RETURN
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.isShowReturn = iprot.readI16();
						struct.setIsShowReturnIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // REDUCE_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.reducePrice = iprot.readDouble();
						struct.setReducePriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // SALE_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.salePrice = iprot.readDouble();
						struct.setSalePriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // ORDER_STATUS_TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderStatusTitle = iprot.readString();
						struct.setOrderStatusTitleIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // ORDER_STATUS_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.orderStatusTime = iprot.readI64();
						struct.setOrderStatusTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // IS_GROUPON
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.isGroupon = iprot.readI16();
						struct.setIsGrouponIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // ORDER_CANCEL_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderCancelTime = iprot.readString();
						struct.setOrderCancelTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 24: // ORDER_PAY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderPayTime = iprot.readString();
						struct.setOrderPayTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 25: // PAY_MODE
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.payMode = iprot.readI16();
						struct.setPayModeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 26: // ORDER_DELIVER_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderDeliverTime = iprot.readString();
						struct.setOrderDeliverTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 27: // ORDER_FINISH_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderFinishTime = iprot.readString();
						struct.setOrderFinishTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 28: // ITEM_INFOS
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
							struct.itemInfos = new ArrayList<TItemInfo>(_list0.size);
							TItemInfo _elem1;
							for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
								_elem1 = new TItemInfo();
								_elem1.read(iprot);
								struct.itemInfos.add(_elem1);
							}
							iprot.readListEnd();
						}
						struct.setItemInfosIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 29: // STORE_INFO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.storeInfo = new TStoreInfo();
						struct.storeInfo.read(iprot);
						struct.setStoreInfoIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 30: // INVOICE_INFO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.invoiceInfo = new TInvoiceInfo();
						struct.invoiceInfo.read(iprot);
						struct.setInvoiceInfoIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TOrderDetailInfo struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.orderCode != null) {
				oprot.writeFieldBegin(ORDER_CODE_FIELD_DESC);
				oprot.writeString(struct.orderCode);
				oprot.writeFieldEnd();
			}
			if (struct.orderTime != null) {
				oprot.writeFieldBegin(ORDER_TIME_FIELD_DESC);
				oprot.writeString(struct.orderTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI16(struct.status);
			oprot.writeFieldEnd();
			if (struct.statusName != null) {
				oprot.writeFieldBegin(STATUS_NAME_FIELD_DESC);
				oprot.writeString(struct.statusName);
				oprot.writeFieldEnd();
			}
			if (struct.dstConsignee != null) {
				oprot.writeFieldBegin(DST_CONSIGNEE_FIELD_DESC);
				oprot.writeString(struct.dstConsignee);
				oprot.writeFieldEnd();
			}
			if (struct.dstTel != null) {
				oprot.writeFieldBegin(DST_TEL_FIELD_DESC);
				oprot.writeString(struct.dstTel);
				oprot.writeFieldEnd();
			}
			if (struct.dstMobile != null) {
				oprot.writeFieldBegin(DST_MOBILE_FIELD_DESC);
				oprot.writeString(struct.dstMobile);
				oprot.writeFieldEnd();
			}
			if (struct.dstAddress != null) {
				oprot.writeFieldBegin(DST_ADDRESS_FIELD_DESC);
				oprot.writeString(struct.dstAddress);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(FREIGHT_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.freightPrice);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(REDBAG_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.redbagPrice);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(BALANCE_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.balancePrice);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PAY_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.payPrice);
			oprot.writeFieldEnd();
			if (struct.taxName != null) {
				oprot.writeFieldBegin(TAX_NAME_FIELD_DESC);
				oprot.writeString(struct.taxName);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(TAX_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.taxPrice);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SUM_QUANTITY_FIELD_DESC);
			oprot.writeI32(struct.sumQuantity);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_POP_FIELD_DESC);
			oprot.writeI16(struct.isPop);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_SHOW_RETURN_FIELD_DESC);
			oprot.writeI16(struct.isShowReturn);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(REDUCE_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.reducePrice);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SALE_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.salePrice);
			oprot.writeFieldEnd();
			if (struct.orderStatusTitle != null) {
				oprot.writeFieldBegin(ORDER_STATUS_TITLE_FIELD_DESC);
				oprot.writeString(struct.orderStatusTitle);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(ORDER_STATUS_TIME_FIELD_DESC);
			oprot.writeI64(struct.orderStatusTime);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_GROUPON_FIELD_DESC);
			oprot.writeI16(struct.isGroupon);
			oprot.writeFieldEnd();
			if (struct.orderCancelTime != null) {
				oprot.writeFieldBegin(ORDER_CANCEL_TIME_FIELD_DESC);
				oprot.writeString(struct.orderCancelTime);
				oprot.writeFieldEnd();
			}
			if (struct.orderPayTime != null) {
				oprot.writeFieldBegin(ORDER_PAY_TIME_FIELD_DESC);
				oprot.writeString(struct.orderPayTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(PAY_MODE_FIELD_DESC);
			oprot.writeI16(struct.payMode);
			oprot.writeFieldEnd();
			if (struct.orderDeliverTime != null) {
				oprot.writeFieldBegin(ORDER_DELIVER_TIME_FIELD_DESC);
				oprot.writeString(struct.orderDeliverTime);
				oprot.writeFieldEnd();
			}
			if (struct.orderFinishTime != null) {
				oprot.writeFieldBegin(ORDER_FINISH_TIME_FIELD_DESC);
				oprot.writeString(struct.orderFinishTime);
				oprot.writeFieldEnd();
			}
			if (struct.itemInfos != null) {
				oprot.writeFieldBegin(ITEM_INFOS_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
							struct.itemInfos.size()));
					for (TItemInfo _iter3 : struct.itemInfos) {
						_iter3.write(oprot);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.storeInfo != null) {
				oprot.writeFieldBegin(STORE_INFO_FIELD_DESC);
				struct.storeInfo.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.invoiceInfo != null) {
				oprot.writeFieldBegin(INVOICE_INFO_FIELD_DESC);
				struct.invoiceInfo.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TOrderDetailInfoTupleSchemeFactory implements SchemeFactory {
		public TOrderDetailInfoTupleScheme getScheme() {
			return new TOrderDetailInfoTupleScheme();
		}
	}

	private static class TOrderDetailInfoTupleScheme extends TupleScheme<TOrderDetailInfo> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TOrderDetailInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetOrderCode()) {
				optionals.set(0);
			}
			if (struct.isSetOrderTime()) {
				optionals.set(1);
			}
			if (struct.isSetStatus()) {
				optionals.set(2);
			}
			if (struct.isSetStatusName()) {
				optionals.set(3);
			}
			if (struct.isSetDstConsignee()) {
				optionals.set(4);
			}
			if (struct.isSetDstTel()) {
				optionals.set(5);
			}
			if (struct.isSetDstMobile()) {
				optionals.set(6);
			}
			if (struct.isSetDstAddress()) {
				optionals.set(7);
			}
			if (struct.isSetFreightPrice()) {
				optionals.set(8);
			}
			if (struct.isSetRedbagPrice()) {
				optionals.set(9);
			}
			if (struct.isSetBalancePrice()) {
				optionals.set(10);
			}
			if (struct.isSetPayPrice()) {
				optionals.set(11);
			}
			if (struct.isSetTaxName()) {
				optionals.set(12);
			}
			if (struct.isSetTaxPrice()) {
				optionals.set(13);
			}
			if (struct.isSetSumQuantity()) {
				optionals.set(14);
			}
			if (struct.isSetIsPop()) {
				optionals.set(15);
			}
			if (struct.isSetIsShowReturn()) {
				optionals.set(16);
			}
			if (struct.isSetReducePrice()) {
				optionals.set(17);
			}
			if (struct.isSetSalePrice()) {
				optionals.set(18);
			}
			if (struct.isSetOrderStatusTitle()) {
				optionals.set(19);
			}
			if (struct.isSetOrderStatusTime()) {
				optionals.set(20);
			}
			if (struct.isSetIsGroupon()) {
				optionals.set(21);
			}
			if (struct.isSetOrderCancelTime()) {
				optionals.set(22);
			}
			if (struct.isSetOrderPayTime()) {
				optionals.set(23);
			}
			if (struct.isSetPayMode()) {
				optionals.set(24);
			}
			if (struct.isSetOrderDeliverTime()) {
				optionals.set(25);
			}
			if (struct.isSetOrderFinishTime()) {
				optionals.set(26);
			}
			if (struct.isSetItemInfos()) {
				optionals.set(27);
			}
			if (struct.isSetStoreInfo()) {
				optionals.set(28);
			}
			if (struct.isSetInvoiceInfo()) {
				optionals.set(29);
			}
			oprot.writeBitSet(optionals, 30);
			if (struct.isSetOrderCode()) {
				oprot.writeString(struct.orderCode);
			}
			if (struct.isSetOrderTime()) {
				oprot.writeString(struct.orderTime);
			}
			if (struct.isSetStatus()) {
				oprot.writeI16(struct.status);
			}
			if (struct.isSetStatusName()) {
				oprot.writeString(struct.statusName);
			}
			if (struct.isSetDstConsignee()) {
				oprot.writeString(struct.dstConsignee);
			}
			if (struct.isSetDstTel()) {
				oprot.writeString(struct.dstTel);
			}
			if (struct.isSetDstMobile()) {
				oprot.writeString(struct.dstMobile);
			}
			if (struct.isSetDstAddress()) {
				oprot.writeString(struct.dstAddress);
			}
			if (struct.isSetFreightPrice()) {
				oprot.writeDouble(struct.freightPrice);
			}
			if (struct.isSetRedbagPrice()) {
				oprot.writeDouble(struct.redbagPrice);
			}
			if (struct.isSetBalancePrice()) {
				oprot.writeDouble(struct.balancePrice);
			}
			if (struct.isSetPayPrice()) {
				oprot.writeDouble(struct.payPrice);
			}
			if (struct.isSetTaxName()) {
				oprot.writeString(struct.taxName);
			}
			if (struct.isSetTaxPrice()) {
				oprot.writeDouble(struct.taxPrice);
			}
			if (struct.isSetSumQuantity()) {
				oprot.writeI32(struct.sumQuantity);
			}
			if (struct.isSetIsPop()) {
				oprot.writeI16(struct.isPop);
			}
			if (struct.isSetIsShowReturn()) {
				oprot.writeI16(struct.isShowReturn);
			}
			if (struct.isSetReducePrice()) {
				oprot.writeDouble(struct.reducePrice);
			}
			if (struct.isSetSalePrice()) {
				oprot.writeDouble(struct.salePrice);
			}
			if (struct.isSetOrderStatusTitle()) {
				oprot.writeString(struct.orderStatusTitle);
			}
			if (struct.isSetOrderStatusTime()) {
				oprot.writeI64(struct.orderStatusTime);
			}
			if (struct.isSetIsGroupon()) {
				oprot.writeI16(struct.isGroupon);
			}
			if (struct.isSetOrderCancelTime()) {
				oprot.writeString(struct.orderCancelTime);
			}
			if (struct.isSetOrderPayTime()) {
				oprot.writeString(struct.orderPayTime);
			}
			if (struct.isSetPayMode()) {
				oprot.writeI16(struct.payMode);
			}
			if (struct.isSetOrderDeliverTime()) {
				oprot.writeString(struct.orderDeliverTime);
			}
			if (struct.isSetOrderFinishTime()) {
				oprot.writeString(struct.orderFinishTime);
			}
			if (struct.isSetItemInfos()) {
				{
					oprot.writeI32(struct.itemInfos.size());
					for (TItemInfo _iter4 : struct.itemInfos) {
						_iter4.write(oprot);
					}
				}
			}
			if (struct.isSetStoreInfo()) {
				struct.storeInfo.write(oprot);
			}
			if (struct.isSetInvoiceInfo()) {
				struct.invoiceInfo.write(oprot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TOrderDetailInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(30);
			if (incoming.get(0)) {
				struct.orderCode = iprot.readString();
				struct.setOrderCodeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.orderTime = iprot.readString();
				struct.setOrderTimeIsSet(true);
			}
			if (incoming.get(2)) {
				struct.status = iprot.readI16();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(3)) {
				struct.statusName = iprot.readString();
				struct.setStatusNameIsSet(true);
			}
			if (incoming.get(4)) {
				struct.dstConsignee = iprot.readString();
				struct.setDstConsigneeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.dstTel = iprot.readString();
				struct.setDstTelIsSet(true);
			}
			if (incoming.get(6)) {
				struct.dstMobile = iprot.readString();
				struct.setDstMobileIsSet(true);
			}
			if (incoming.get(7)) {
				struct.dstAddress = iprot.readString();
				struct.setDstAddressIsSet(true);
			}
			if (incoming.get(8)) {
				struct.freightPrice = iprot.readDouble();
				struct.setFreightPriceIsSet(true);
			}
			if (incoming.get(9)) {
				struct.redbagPrice = iprot.readDouble();
				struct.setRedbagPriceIsSet(true);
			}
			if (incoming.get(10)) {
				struct.balancePrice = iprot.readDouble();
				struct.setBalancePriceIsSet(true);
			}
			if (incoming.get(11)) {
				struct.payPrice = iprot.readDouble();
				struct.setPayPriceIsSet(true);
			}
			if (incoming.get(12)) {
				struct.taxName = iprot.readString();
				struct.setTaxNameIsSet(true);
			}
			if (incoming.get(13)) {
				struct.taxPrice = iprot.readDouble();
				struct.setTaxPriceIsSet(true);
			}
			if (incoming.get(14)) {
				struct.sumQuantity = iprot.readI32();
				struct.setSumQuantityIsSet(true);
			}
			if (incoming.get(15)) {
				struct.isPop = iprot.readI16();
				struct.setIsPopIsSet(true);
			}
			if (incoming.get(16)) {
				struct.isShowReturn = iprot.readI16();
				struct.setIsShowReturnIsSet(true);
			}
			if (incoming.get(17)) {
				struct.reducePrice = iprot.readDouble();
				struct.setReducePriceIsSet(true);
			}
			if (incoming.get(18)) {
				struct.salePrice = iprot.readDouble();
				struct.setSalePriceIsSet(true);
			}
			if (incoming.get(19)) {
				struct.orderStatusTitle = iprot.readString();
				struct.setOrderStatusTitleIsSet(true);
			}
			if (incoming.get(20)) {
				struct.orderStatusTime = iprot.readI64();
				struct.setOrderStatusTimeIsSet(true);
			}
			if (incoming.get(21)) {
				struct.isGroupon = iprot.readI16();
				struct.setIsGrouponIsSet(true);
			}
			if (incoming.get(22)) {
				struct.orderCancelTime = iprot.readString();
				struct.setOrderCancelTimeIsSet(true);
			}
			if (incoming.get(23)) {
				struct.orderPayTime = iprot.readString();
				struct.setOrderPayTimeIsSet(true);
			}
			if (incoming.get(24)) {
				struct.payMode = iprot.readI16();
				struct.setPayModeIsSet(true);
			}
			if (incoming.get(25)) {
				struct.orderDeliverTime = iprot.readString();
				struct.setOrderDeliverTimeIsSet(true);
			}
			if (incoming.get(26)) {
				struct.orderFinishTime = iprot.readString();
				struct.setOrderFinishTimeIsSet(true);
			}
			if (incoming.get(27)) {
				{
					org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
					struct.itemInfos = new ArrayList<TItemInfo>(_list5.size);
					TItemInfo _elem6;
					for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
						_elem6 = new TItemInfo();
						_elem6.read(iprot);
						struct.itemInfos.add(_elem6);
					}
				}
				struct.setItemInfosIsSet(true);
			}
			if (incoming.get(28)) {
				struct.storeInfo = new TStoreInfo();
				struct.storeInfo.read(iprot);
				struct.setStoreInfoIsSet(true);
			}
			if (incoming.get(29)) {
				struct.invoiceInfo = new TInvoiceInfo();
				struct.invoiceInfo.read(iprot);
				struct.setInvoiceInfoIsSet(true);
			}
		}
	}

}
