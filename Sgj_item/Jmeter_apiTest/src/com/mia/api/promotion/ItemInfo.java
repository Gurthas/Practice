/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.api.promotion;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
/**
 * 活动商品信息结构体
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-23")
public class ItemInfo implements org.apache.thrift.TBase<ItemInfo, ItemInfo._Fields>, java.io.Serializable, Cloneable,
		Comparable<ItemInfo> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ItemInfo");

	private static final org.apache.thrift.protocol.TField PROMOTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"promotion_id", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField MAX_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"max_buy", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField DAY_LIMITED_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"day_limited", org.apache.thrift.protocol.TType.I32, (short) 3);
	private static final org.apache.thrift.protocol.TField LIMIT_STOCK_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"limit_stock", org.apache.thrift.protocol.TType.I32, (short) 4);
	private static final org.apache.thrift.protocol.TField ACTIVITY_DYNAMICS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"activity_dynamics", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new ItemInfoStandardSchemeFactory());
		schemes.put(TupleScheme.class, new ItemInfoTupleSchemeFactory());
	}

	public int promotion_id; // required
	public int max_buy; // required
	public int day_limited; // required
	public int limit_stock; // required
	public String activity_dynamics; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		PROMOTION_ID((short) 1, "promotion_id"), MAX_BUY((short) 2, "max_buy"), DAY_LIMITED((short) 3,
				"day_limited"), LIMIT_STOCK((short) 4,
						"limit_stock"), ACTIVITY_DYNAMICS((short) 5, "activity_dynamics");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // PROMOTION_ID
				return PROMOTION_ID;
			case 2: // MAX_BUY
				return MAX_BUY;
			case 3: // DAY_LIMITED
				return DAY_LIMITED;
			case 4: // LIMIT_STOCK
				return LIMIT_STOCK;
			case 5: // ACTIVITY_DYNAMICS
				return ACTIVITY_DYNAMICS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __PROMOTION_ID_ISSET_ID = 0;
	private static final int __MAX_BUY_ISSET_ID = 1;
	private static final int __DAY_LIMITED_ISSET_ID = 2;
	private static final int __LIMIT_STOCK_ISSET_ID = 3;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.PROMOTION_ID,
				new org.apache.thrift.meta_data.FieldMetaData("promotion_id",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.MAX_BUY,
				new org.apache.thrift.meta_data.FieldMetaData("max_buy",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.DAY_LIMITED,
				new org.apache.thrift.meta_data.FieldMetaData("day_limited",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.LIMIT_STOCK,
				new org.apache.thrift.meta_data.FieldMetaData("limit_stock",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ACTIVITY_DYNAMICS,
				new org.apache.thrift.meta_data.FieldMetaData("activity_dynamics",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ItemInfo.class, metaDataMap);
	}

	public ItemInfo() {
	}

	public ItemInfo(int promotion_id, int max_buy, int day_limited, int limit_stock, String activity_dynamics) {
		this();
		this.promotion_id = promotion_id;
		setPromotion_idIsSet(true);
		this.max_buy = max_buy;
		setMax_buyIsSet(true);
		this.day_limited = day_limited;
		setDay_limitedIsSet(true);
		this.limit_stock = limit_stock;
		setLimit_stockIsSet(true);
		this.activity_dynamics = activity_dynamics;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ItemInfo(ItemInfo other) {
		__isset_bitfield = other.__isset_bitfield;
		this.promotion_id = other.promotion_id;
		this.max_buy = other.max_buy;
		this.day_limited = other.day_limited;
		this.limit_stock = other.limit_stock;
		if (other.isSetActivity_dynamics()) {
			this.activity_dynamics = other.activity_dynamics;
		}
	}

	public ItemInfo deepCopy() {
		return new ItemInfo(this);
	}

	@Override
	public void clear() {
		setPromotion_idIsSet(false);
		this.promotion_id = 0;
		setMax_buyIsSet(false);
		this.max_buy = 0;
		setDay_limitedIsSet(false);
		this.day_limited = 0;
		setLimit_stockIsSet(false);
		this.limit_stock = 0;
		this.activity_dynamics = null;
	}

	public int getPromotion_id() {
		return this.promotion_id;
	}

	public ItemInfo setPromotion_id(int promotion_id) {
		this.promotion_id = promotion_id;
		setPromotion_idIsSet(true);
		return this;
	}

	public void unsetPromotion_id() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROMOTION_ID_ISSET_ID);
	}

	/**
	 * Returns true if field promotion_id is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPromotion_id() {
		return EncodingUtils.testBit(__isset_bitfield, __PROMOTION_ID_ISSET_ID);
	}

	public void setPromotion_idIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROMOTION_ID_ISSET_ID, value);
	}

	public int getMax_buy() {
		return this.max_buy;
	}

	public ItemInfo setMax_buy(int max_buy) {
		this.max_buy = max_buy;
		setMax_buyIsSet(true);
		return this;
	}

	public void unsetMax_buy() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_BUY_ISSET_ID);
	}

	/**
	 * Returns true if field max_buy is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetMax_buy() {
		return EncodingUtils.testBit(__isset_bitfield, __MAX_BUY_ISSET_ID);
	}

	public void setMax_buyIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_BUY_ISSET_ID, value);
	}

	public int getDay_limited() {
		return this.day_limited;
	}

	public ItemInfo setDay_limited(int day_limited) {
		this.day_limited = day_limited;
		setDay_limitedIsSet(true);
		return this;
	}

	public void unsetDay_limited() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DAY_LIMITED_ISSET_ID);
	}

	/**
	 * Returns true if field day_limited is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetDay_limited() {
		return EncodingUtils.testBit(__isset_bitfield, __DAY_LIMITED_ISSET_ID);
	}

	public void setDay_limitedIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DAY_LIMITED_ISSET_ID, value);
	}

	public int getLimit_stock() {
		return this.limit_stock;
	}

	public ItemInfo setLimit_stock(int limit_stock) {
		this.limit_stock = limit_stock;
		setLimit_stockIsSet(true);
		return this;
	}

	public void unsetLimit_stock() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_STOCK_ISSET_ID);
	}

	/**
	 * Returns true if field limit_stock is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetLimit_stock() {
		return EncodingUtils.testBit(__isset_bitfield, __LIMIT_STOCK_ISSET_ID);
	}

	public void setLimit_stockIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_STOCK_ISSET_ID, value);
	}

	public String getActivity_dynamics() {
		return this.activity_dynamics;
	}

	public ItemInfo setActivity_dynamics(String activity_dynamics) {
		this.activity_dynamics = activity_dynamics;
		return this;
	}

	public void unsetActivity_dynamics() {
		this.activity_dynamics = null;
	}

	/**
	 * Returns true if field activity_dynamics is set (has been assigned a
	 * value) and false otherwise
	 */
	public boolean isSetActivity_dynamics() {
		return this.activity_dynamics != null;
	}

	public void setActivity_dynamicsIsSet(boolean value) {
		if (!value) {
			this.activity_dynamics = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case PROMOTION_ID:
			if (value == null) {
				unsetPromotion_id();
			} else {
				setPromotion_id((Integer) value);
			}
			break;

		case MAX_BUY:
			if (value == null) {
				unsetMax_buy();
			} else {
				setMax_buy((Integer) value);
			}
			break;

		case DAY_LIMITED:
			if (value == null) {
				unsetDay_limited();
			} else {
				setDay_limited((Integer) value);
			}
			break;

		case LIMIT_STOCK:
			if (value == null) {
				unsetLimit_stock();
			} else {
				setLimit_stock((Integer) value);
			}
			break;

		case ACTIVITY_DYNAMICS:
			if (value == null) {
				unsetActivity_dynamics();
			} else {
				setActivity_dynamics((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case PROMOTION_ID:
			return getPromotion_id();

		case MAX_BUY:
			return getMax_buy();

		case DAY_LIMITED:
			return getDay_limited();

		case LIMIT_STOCK:
			return getLimit_stock();

		case ACTIVITY_DYNAMICS:
			return getActivity_dynamics();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case PROMOTION_ID:
			return isSetPromotion_id();
		case MAX_BUY:
			return isSetMax_buy();
		case DAY_LIMITED:
			return isSetDay_limited();
		case LIMIT_STOCK:
			return isSetLimit_stock();
		case ACTIVITY_DYNAMICS:
			return isSetActivity_dynamics();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof ItemInfo)
			return this.equals((ItemInfo) that);
		return false;
	}

	public boolean equals(ItemInfo that) {
		if (that == null)
			return false;

		boolean this_present_promotion_id = true;
		boolean that_present_promotion_id = true;
		if (this_present_promotion_id || that_present_promotion_id) {
			if (!(this_present_promotion_id && that_present_promotion_id))
				return false;
			if (this.promotion_id != that.promotion_id)
				return false;
		}

		boolean this_present_max_buy = true;
		boolean that_present_max_buy = true;
		if (this_present_max_buy || that_present_max_buy) {
			if (!(this_present_max_buy && that_present_max_buy))
				return false;
			if (this.max_buy != that.max_buy)
				return false;
		}

		boolean this_present_day_limited = true;
		boolean that_present_day_limited = true;
		if (this_present_day_limited || that_present_day_limited) {
			if (!(this_present_day_limited && that_present_day_limited))
				return false;
			if (this.day_limited != that.day_limited)
				return false;
		}

		boolean this_present_limit_stock = true;
		boolean that_present_limit_stock = true;
		if (this_present_limit_stock || that_present_limit_stock) {
			if (!(this_present_limit_stock && that_present_limit_stock))
				return false;
			if (this.limit_stock != that.limit_stock)
				return false;
		}

		boolean this_present_activity_dynamics = true && this.isSetActivity_dynamics();
		boolean that_present_activity_dynamics = true && that.isSetActivity_dynamics();
		if (this_present_activity_dynamics || that_present_activity_dynamics) {
			if (!(this_present_activity_dynamics && that_present_activity_dynamics))
				return false;
			if (!this.activity_dynamics.equals(that.activity_dynamics))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_promotion_id = true;
		list.add(present_promotion_id);
		if (present_promotion_id)
			list.add(promotion_id);

		boolean present_max_buy = true;
		list.add(present_max_buy);
		if (present_max_buy)
			list.add(max_buy);

		boolean present_day_limited = true;
		list.add(present_day_limited);
		if (present_day_limited)
			list.add(day_limited);

		boolean present_limit_stock = true;
		list.add(present_limit_stock);
		if (present_limit_stock)
			list.add(limit_stock);

		boolean present_activity_dynamics = true && (isSetActivity_dynamics());
		list.add(present_activity_dynamics);
		if (present_activity_dynamics)
			list.add(activity_dynamics);

		return list.hashCode();
	}

	@Override
	public int compareTo(ItemInfo other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetPromotion_id()).compareTo(other.isSetPromotion_id());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPromotion_id()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promotion_id, other.promotion_id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMax_buy()).compareTo(other.isSetMax_buy());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMax_buy()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_buy, other.max_buy);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDay_limited()).compareTo(other.isSetDay_limited());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDay_limited()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day_limited, other.day_limited);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLimit_stock()).compareTo(other.isSetLimit_stock());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLimit_stock()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit_stock, other.limit_stock);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetActivity_dynamics()).compareTo(other.isSetActivity_dynamics());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetActivity_dynamics()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activity_dynamics, other.activity_dynamics);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ItemInfo(");
		boolean first = true;

		sb.append("promotion_id:");
		sb.append(this.promotion_id);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("max_buy:");
		sb.append(this.max_buy);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("day_limited:");
		sb.append(this.day_limited);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("limit_stock:");
		sb.append(this.limit_stock);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("activity_dynamics:");
		if (this.activity_dynamics == null) {
			sb.append("null");
		} else {
			sb.append(this.activity_dynamics);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ItemInfoStandardSchemeFactory implements SchemeFactory {
		public ItemInfoStandardScheme getScheme() {
			return new ItemInfoStandardScheme();
		}
	}

	private static class ItemInfoStandardScheme extends StandardScheme<ItemInfo> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ItemInfo struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // PROMOTION_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.promotion_id = iprot.readI32();
						struct.setPromotion_idIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // MAX_BUY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.max_buy = iprot.readI32();
						struct.setMax_buyIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // DAY_LIMITED
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.day_limited = iprot.readI32();
						struct.setDay_limitedIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // LIMIT_STOCK
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.limit_stock = iprot.readI32();
						struct.setLimit_stockIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // ACTIVITY_DYNAMICS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.activity_dynamics = iprot.readString();
						struct.setActivity_dynamicsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ItemInfo struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(PROMOTION_ID_FIELD_DESC);
			oprot.writeI32(struct.promotion_id);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MAX_BUY_FIELD_DESC);
			oprot.writeI32(struct.max_buy);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(DAY_LIMITED_FIELD_DESC);
			oprot.writeI32(struct.day_limited);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(LIMIT_STOCK_FIELD_DESC);
			oprot.writeI32(struct.limit_stock);
			oprot.writeFieldEnd();
			if (struct.activity_dynamics != null) {
				oprot.writeFieldBegin(ACTIVITY_DYNAMICS_FIELD_DESC);
				oprot.writeString(struct.activity_dynamics);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ItemInfoTupleSchemeFactory implements SchemeFactory {
		public ItemInfoTupleScheme getScheme() {
			return new ItemInfoTupleScheme();
		}
	}

	private static class ItemInfoTupleScheme extends TupleScheme<ItemInfo> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ItemInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetPromotion_id()) {
				optionals.set(0);
			}
			if (struct.isSetMax_buy()) {
				optionals.set(1);
			}
			if (struct.isSetDay_limited()) {
				optionals.set(2);
			}
			if (struct.isSetLimit_stock()) {
				optionals.set(3);
			}
			if (struct.isSetActivity_dynamics()) {
				optionals.set(4);
			}
			oprot.writeBitSet(optionals, 5);
			if (struct.isSetPromotion_id()) {
				oprot.writeI32(struct.promotion_id);
			}
			if (struct.isSetMax_buy()) {
				oprot.writeI32(struct.max_buy);
			}
			if (struct.isSetDay_limited()) {
				oprot.writeI32(struct.day_limited);
			}
			if (struct.isSetLimit_stock()) {
				oprot.writeI32(struct.limit_stock);
			}
			if (struct.isSetActivity_dynamics()) {
				oprot.writeString(struct.activity_dynamics);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ItemInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(5);
			if (incoming.get(0)) {
				struct.promotion_id = iprot.readI32();
				struct.setPromotion_idIsSet(true);
			}
			if (incoming.get(1)) {
				struct.max_buy = iprot.readI32();
				struct.setMax_buyIsSet(true);
			}
			if (incoming.get(2)) {
				struct.day_limited = iprot.readI32();
				struct.setDay_limitedIsSet(true);
			}
			if (incoming.get(3)) {
				struct.limit_stock = iprot.readI32();
				struct.setLimit_stockIsSet(true);
			}
			if (incoming.get(4)) {
				struct.activity_dynamics = iprot.readString();
				struct.setActivity_dynamicsIsSet(true);
			}
		}
	}

}
