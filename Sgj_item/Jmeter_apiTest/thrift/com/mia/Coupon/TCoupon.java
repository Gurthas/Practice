/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.Coupon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-18")
public class TCoupon implements org.apache.thrift.TBase<TCoupon, TCoupon._Fields>, java.io.Serializable, Cloneable, Comparable<TCoupon> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCoupon");

  private static final org.apache.thrift.protocol.TField COUPON_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("couponCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField MIN_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("minPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField USE_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("useRange", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BIND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("bindTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BIND_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bindUserId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TIME_VALID_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeValidType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField VALID_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("validDay", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField BUSINESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("businessId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField IS_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("isPassword", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PASSWORD_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("password_code", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField IS_USABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isUsable", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField UNUSEABLE_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("unuseableMsg", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LEFT_USE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("leftUseNum", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField USE_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("useStartTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField USE_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("useEndTime", org.apache.thrift.protocol.TType.STRING, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCouponStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCouponTupleSchemeFactory());
  }

  public String couponCode; // required
  public double value; // required
  public double minPrice; // required
  public String useRange; // required
  public String startTime; // required
  public String expireTime; // required
  public String bindTime; // required
  public int bindUserId; // required
  public int timeValidType; // required
  public int validDay; // required
  public int businessType; // required
  public int businessId; // required
  public int isPassword; // required
  public String password_code; // required
  public int isUsable; // required
  public String unuseableMsg; // required
  public int leftUseNum; // required
  public int type; // required
  public String useStartTime; // required
  public String useEndTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUPON_CODE((short)1, "couponCode"),
    VALUE((short)2, "value"),
    MIN_PRICE((short)3, "minPrice"),
    USE_RANGE((short)4, "useRange"),
    START_TIME((short)5, "startTime"),
    EXPIRE_TIME((short)6, "expireTime"),
    BIND_TIME((short)7, "bindTime"),
    BIND_USER_ID((short)8, "bindUserId"),
    TIME_VALID_TYPE((short)9, "timeValidType"),
    VALID_DAY((short)10, "validDay"),
    BUSINESS_TYPE((short)11, "businessType"),
    BUSINESS_ID((short)12, "businessId"),
    IS_PASSWORD((short)13, "isPassword"),
    PASSWORD_CODE((short)14, "password_code"),
    IS_USABLE((short)15, "isUsable"),
    UNUSEABLE_MSG((short)16, "unuseableMsg"),
    LEFT_USE_NUM((short)17, "leftUseNum"),
    TYPE((short)18, "type"),
    USE_START_TIME((short)19, "useStartTime"),
    USE_END_TIME((short)20, "useEndTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUPON_CODE
          return COUPON_CODE;
        case 2: // VALUE
          return VALUE;
        case 3: // MIN_PRICE
          return MIN_PRICE;
        case 4: // USE_RANGE
          return USE_RANGE;
        case 5: // START_TIME
          return START_TIME;
        case 6: // EXPIRE_TIME
          return EXPIRE_TIME;
        case 7: // BIND_TIME
          return BIND_TIME;
        case 8: // BIND_USER_ID
          return BIND_USER_ID;
        case 9: // TIME_VALID_TYPE
          return TIME_VALID_TYPE;
        case 10: // VALID_DAY
          return VALID_DAY;
        case 11: // BUSINESS_TYPE
          return BUSINESS_TYPE;
        case 12: // BUSINESS_ID
          return BUSINESS_ID;
        case 13: // IS_PASSWORD
          return IS_PASSWORD;
        case 14: // PASSWORD_CODE
          return PASSWORD_CODE;
        case 15: // IS_USABLE
          return IS_USABLE;
        case 16: // UNUSEABLE_MSG
          return UNUSEABLE_MSG;
        case 17: // LEFT_USE_NUM
          return LEFT_USE_NUM;
        case 18: // TYPE
          return TYPE;
        case 19: // USE_START_TIME
          return USE_START_TIME;
        case 20: // USE_END_TIME
          return USE_END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VALUE_ISSET_ID = 0;
  private static final int __MINPRICE_ISSET_ID = 1;
  private static final int __BINDUSERID_ISSET_ID = 2;
  private static final int __TIMEVALIDTYPE_ISSET_ID = 3;
  private static final int __VALIDDAY_ISSET_ID = 4;
  private static final int __BUSINESSTYPE_ISSET_ID = 5;
  private static final int __BUSINESSID_ISSET_ID = 6;
  private static final int __ISPASSWORD_ISSET_ID = 7;
  private static final int __ISUSABLE_ISSET_ID = 8;
  private static final int __LEFTUSENUM_ISSET_ID = 9;
  private static final int __TYPE_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUPON_CODE, new org.apache.thrift.meta_data.FieldMetaData("couponCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_PRICE, new org.apache.thrift.meta_data.FieldMetaData("minPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_RANGE, new org.apache.thrift.meta_data.FieldMetaData("useRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIND_TIME, new org.apache.thrift.meta_data.FieldMetaData("bindTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIND_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("bindUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_VALID_TYPE, new org.apache.thrift.meta_data.FieldMetaData("timeValidType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VALID_DAY, new org.apache.thrift.meta_data.FieldMetaData("validDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_ID, new org.apache.thrift.meta_data.FieldMetaData("businessId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("isPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PASSWORD_CODE, new org.apache.thrift.meta_data.FieldMetaData("password_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_USABLE, new org.apache.thrift.meta_data.FieldMetaData("isUsable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNUSEABLE_MSG, new org.apache.thrift.meta_data.FieldMetaData("unuseableMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEFT_USE_NUM, new org.apache.thrift.meta_data.FieldMetaData("leftUseNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USE_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("useStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("useEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCoupon.class, metaDataMap);
  }

  public TCoupon() {
  }

  public TCoupon(
    String couponCode,
    double value,
    double minPrice,
    String useRange,
    String startTime,
    String expireTime,
    String bindTime,
    int bindUserId,
    int timeValidType,
    int validDay,
    int businessType,
    int businessId,
    int isPassword,
    String password_code,
    int isUsable,
    String unuseableMsg,
    int leftUseNum,
    int type,
    String useStartTime,
    String useEndTime)
  {
    this();
    this.couponCode = couponCode;
    this.value = value;
    setValueIsSet(true);
    this.minPrice = minPrice;
    setMinPriceIsSet(true);
    this.useRange = useRange;
    this.startTime = startTime;
    this.expireTime = expireTime;
    this.bindTime = bindTime;
    this.bindUserId = bindUserId;
    setBindUserIdIsSet(true);
    this.timeValidType = timeValidType;
    setTimeValidTypeIsSet(true);
    this.validDay = validDay;
    setValidDayIsSet(true);
    this.businessType = businessType;
    setBusinessTypeIsSet(true);
    this.businessId = businessId;
    setBusinessIdIsSet(true);
    this.isPassword = isPassword;
    setIsPasswordIsSet(true);
    this.password_code = password_code;
    this.isUsable = isUsable;
    setIsUsableIsSet(true);
    this.unuseableMsg = unuseableMsg;
    this.leftUseNum = leftUseNum;
    setLeftUseNumIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.useStartTime = useStartTime;
    this.useEndTime = useEndTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCoupon(TCoupon other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCouponCode()) {
      this.couponCode = other.couponCode;
    }
    this.value = other.value;
    this.minPrice = other.minPrice;
    if (other.isSetUseRange()) {
      this.useRange = other.useRange;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetExpireTime()) {
      this.expireTime = other.expireTime;
    }
    if (other.isSetBindTime()) {
      this.bindTime = other.bindTime;
    }
    this.bindUserId = other.bindUserId;
    this.timeValidType = other.timeValidType;
    this.validDay = other.validDay;
    this.businessType = other.businessType;
    this.businessId = other.businessId;
    this.isPassword = other.isPassword;
    if (other.isSetPassword_code()) {
      this.password_code = other.password_code;
    }
    this.isUsable = other.isUsable;
    if (other.isSetUnuseableMsg()) {
      this.unuseableMsg = other.unuseableMsg;
    }
    this.leftUseNum = other.leftUseNum;
    this.type = other.type;
    if (other.isSetUseStartTime()) {
      this.useStartTime = other.useStartTime;
    }
    if (other.isSetUseEndTime()) {
      this.useEndTime = other.useEndTime;
    }
  }

  public TCoupon deepCopy() {
    return new TCoupon(this);
  }

  @Override
  public void clear() {
    this.couponCode = null;
    setValueIsSet(false);
    this.value = 0.0;
    setMinPriceIsSet(false);
    this.minPrice = 0.0;
    this.useRange = null;
    this.startTime = null;
    this.expireTime = null;
    this.bindTime = null;
    setBindUserIdIsSet(false);
    this.bindUserId = 0;
    setTimeValidTypeIsSet(false);
    this.timeValidType = 0;
    setValidDayIsSet(false);
    this.validDay = 0;
    setBusinessTypeIsSet(false);
    this.businessType = 0;
    setBusinessIdIsSet(false);
    this.businessId = 0;
    setIsPasswordIsSet(false);
    this.isPassword = 0;
    this.password_code = null;
    setIsUsableIsSet(false);
    this.isUsable = 0;
    this.unuseableMsg = null;
    setLeftUseNumIsSet(false);
    this.leftUseNum = 0;
    setTypeIsSet(false);
    this.type = 0;
    this.useStartTime = null;
    this.useEndTime = null;
  }

  public String getCouponCode() {
    return this.couponCode;
  }

  public TCoupon setCouponCode(String couponCode) {
    this.couponCode = couponCode;
    return this;
  }

  public void unsetCouponCode() {
    this.couponCode = null;
  }

  /** Returns true if field couponCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponCode() {
    return this.couponCode != null;
  }

  public void setCouponCodeIsSet(boolean value) {
    if (!value) {
      this.couponCode = null;
    }
  }

  public double getValue() {
    return this.value;
  }

  public TCoupon setValue(double value) {
    this.value = value;
    setValueIsSet(true);
    return this;
  }

  public void unsetValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  public void setValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
  }

  public double getMinPrice() {
    return this.minPrice;
  }

  public TCoupon setMinPrice(double minPrice) {
    this.minPrice = minPrice;
    setMinPriceIsSet(true);
    return this;
  }

  public void unsetMinPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINPRICE_ISSET_ID);
  }

  /** Returns true if field minPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetMinPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __MINPRICE_ISSET_ID);
  }

  public void setMinPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINPRICE_ISSET_ID, value);
  }

  public String getUseRange() {
    return this.useRange;
  }

  public TCoupon setUseRange(String useRange) {
    this.useRange = useRange;
    return this;
  }

  public void unsetUseRange() {
    this.useRange = null;
  }

  /** Returns true if field useRange is set (has been assigned a value) and false otherwise */
  public boolean isSetUseRange() {
    return this.useRange != null;
  }

  public void setUseRangeIsSet(boolean value) {
    if (!value) {
      this.useRange = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public TCoupon setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getExpireTime() {
    return this.expireTime;
  }

  public TCoupon setExpireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  public void unsetExpireTime() {
    this.expireTime = null;
  }

  /** Returns true if field expireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireTime() {
    return this.expireTime != null;
  }

  public void setExpireTimeIsSet(boolean value) {
    if (!value) {
      this.expireTime = null;
    }
  }

  public String getBindTime() {
    return this.bindTime;
  }

  public TCoupon setBindTime(String bindTime) {
    this.bindTime = bindTime;
    return this;
  }

  public void unsetBindTime() {
    this.bindTime = null;
  }

  /** Returns true if field bindTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBindTime() {
    return this.bindTime != null;
  }

  public void setBindTimeIsSet(boolean value) {
    if (!value) {
      this.bindTime = null;
    }
  }

  public int getBindUserId() {
    return this.bindUserId;
  }

  public TCoupon setBindUserId(int bindUserId) {
    this.bindUserId = bindUserId;
    setBindUserIdIsSet(true);
    return this;
  }

  public void unsetBindUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BINDUSERID_ISSET_ID);
  }

  /** Returns true if field bindUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetBindUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __BINDUSERID_ISSET_ID);
  }

  public void setBindUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BINDUSERID_ISSET_ID, value);
  }

  public int getTimeValidType() {
    return this.timeValidType;
  }

  public TCoupon setTimeValidType(int timeValidType) {
    this.timeValidType = timeValidType;
    setTimeValidTypeIsSet(true);
    return this;
  }

  public void unsetTimeValidType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEVALIDTYPE_ISSET_ID);
  }

  /** Returns true if field timeValidType is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeValidType() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEVALIDTYPE_ISSET_ID);
  }

  public void setTimeValidTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEVALIDTYPE_ISSET_ID, value);
  }

  public int getValidDay() {
    return this.validDay;
  }

  public TCoupon setValidDay(int validDay) {
    this.validDay = validDay;
    setValidDayIsSet(true);
    return this;
  }

  public void unsetValidDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDDAY_ISSET_ID);
  }

  /** Returns true if field validDay is set (has been assigned a value) and false otherwise */
  public boolean isSetValidDay() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDDAY_ISSET_ID);
  }

  public void setValidDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDDAY_ISSET_ID, value);
  }

  public int getBusinessType() {
    return this.businessType;
  }

  public TCoupon setBusinessType(int businessType) {
    this.businessType = businessType;
    setBusinessTypeIsSet(true);
    return this;
  }

  public void unsetBusinessType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSTYPE_ISSET_ID);
  }

  /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessType() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSTYPE_ISSET_ID);
  }

  public void setBusinessTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSTYPE_ISSET_ID, value);
  }

  public int getBusinessId() {
    return this.businessId;
  }

  public TCoupon setBusinessId(int businessId) {
    this.businessId = businessId;
    setBusinessIdIsSet(true);
    return this;
  }

  public void unsetBusinessId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSID_ISSET_ID);
  }

  /** Returns true if field businessId is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessId() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSID_ISSET_ID);
  }

  public void setBusinessIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSID_ISSET_ID, value);
  }

  public int getIsPassword() {
    return this.isPassword;
  }

  public TCoupon setIsPassword(int isPassword) {
    this.isPassword = isPassword;
    setIsPasswordIsSet(true);
    return this;
  }

  public void unsetIsPassword() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPASSWORD_ISSET_ID);
  }

  /** Returns true if field isPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPassword() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPASSWORD_ISSET_ID);
  }

  public void setIsPasswordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPASSWORD_ISSET_ID, value);
  }

  public String getPassword_code() {
    return this.password_code;
  }

  public TCoupon setPassword_code(String password_code) {
    this.password_code = password_code;
    return this;
  }

  public void unsetPassword_code() {
    this.password_code = null;
  }

  /** Returns true if field password_code is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword_code() {
    return this.password_code != null;
  }

  public void setPassword_codeIsSet(boolean value) {
    if (!value) {
      this.password_code = null;
    }
  }

  public int getIsUsable() {
    return this.isUsable;
  }

  public TCoupon setIsUsable(int isUsable) {
    this.isUsable = isUsable;
    setIsUsableIsSet(true);
    return this;
  }

  public void unsetIsUsable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISUSABLE_ISSET_ID);
  }

  /** Returns true if field isUsable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsUsable() {
    return EncodingUtils.testBit(__isset_bitfield, __ISUSABLE_ISSET_ID);
  }

  public void setIsUsableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISUSABLE_ISSET_ID, value);
  }

  public String getUnuseableMsg() {
    return this.unuseableMsg;
  }

  public TCoupon setUnuseableMsg(String unuseableMsg) {
    this.unuseableMsg = unuseableMsg;
    return this;
  }

  public void unsetUnuseableMsg() {
    this.unuseableMsg = null;
  }

  /** Returns true if field unuseableMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetUnuseableMsg() {
    return this.unuseableMsg != null;
  }

  public void setUnuseableMsgIsSet(boolean value) {
    if (!value) {
      this.unuseableMsg = null;
    }
  }

  public int getLeftUseNum() {
    return this.leftUseNum;
  }

  public TCoupon setLeftUseNum(int leftUseNum) {
    this.leftUseNum = leftUseNum;
    setLeftUseNumIsSet(true);
    return this;
  }

  public void unsetLeftUseNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEFTUSENUM_ISSET_ID);
  }

  /** Returns true if field leftUseNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftUseNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LEFTUSENUM_ISSET_ID);
  }

  public void setLeftUseNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEFTUSENUM_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public TCoupon setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getUseStartTime() {
    return this.useStartTime;
  }

  public TCoupon setUseStartTime(String useStartTime) {
    this.useStartTime = useStartTime;
    return this;
  }

  public void unsetUseStartTime() {
    this.useStartTime = null;
  }

  /** Returns true if field useStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUseStartTime() {
    return this.useStartTime != null;
  }

  public void setUseStartTimeIsSet(boolean value) {
    if (!value) {
      this.useStartTime = null;
    }
  }

  public String getUseEndTime() {
    return this.useEndTime;
  }

  public TCoupon setUseEndTime(String useEndTime) {
    this.useEndTime = useEndTime;
    return this;
  }

  public void unsetUseEndTime() {
    this.useEndTime = null;
  }

  /** Returns true if field useEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUseEndTime() {
    return this.useEndTime != null;
  }

  public void setUseEndTimeIsSet(boolean value) {
    if (!value) {
      this.useEndTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUPON_CODE:
      if (value == null) {
        unsetCouponCode();
      } else {
        setCouponCode((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Double)value);
      }
      break;

    case MIN_PRICE:
      if (value == null) {
        unsetMinPrice();
      } else {
        setMinPrice((Double)value);
      }
      break;

    case USE_RANGE:
      if (value == null) {
        unsetUseRange();
      } else {
        setUseRange((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case EXPIRE_TIME:
      if (value == null) {
        unsetExpireTime();
      } else {
        setExpireTime((String)value);
      }
      break;

    case BIND_TIME:
      if (value == null) {
        unsetBindTime();
      } else {
        setBindTime((String)value);
      }
      break;

    case BIND_USER_ID:
      if (value == null) {
        unsetBindUserId();
      } else {
        setBindUserId((Integer)value);
      }
      break;

    case TIME_VALID_TYPE:
      if (value == null) {
        unsetTimeValidType();
      } else {
        setTimeValidType((Integer)value);
      }
      break;

    case VALID_DAY:
      if (value == null) {
        unsetValidDay();
      } else {
        setValidDay((Integer)value);
      }
      break;

    case BUSINESS_TYPE:
      if (value == null) {
        unsetBusinessType();
      } else {
        setBusinessType((Integer)value);
      }
      break;

    case BUSINESS_ID:
      if (value == null) {
        unsetBusinessId();
      } else {
        setBusinessId((Integer)value);
      }
      break;

    case IS_PASSWORD:
      if (value == null) {
        unsetIsPassword();
      } else {
        setIsPassword((Integer)value);
      }
      break;

    case PASSWORD_CODE:
      if (value == null) {
        unsetPassword_code();
      } else {
        setPassword_code((String)value);
      }
      break;

    case IS_USABLE:
      if (value == null) {
        unsetIsUsable();
      } else {
        setIsUsable((Integer)value);
      }
      break;

    case UNUSEABLE_MSG:
      if (value == null) {
        unsetUnuseableMsg();
      } else {
        setUnuseableMsg((String)value);
      }
      break;

    case LEFT_USE_NUM:
      if (value == null) {
        unsetLeftUseNum();
      } else {
        setLeftUseNum((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case USE_START_TIME:
      if (value == null) {
        unsetUseStartTime();
      } else {
        setUseStartTime((String)value);
      }
      break;

    case USE_END_TIME:
      if (value == null) {
        unsetUseEndTime();
      } else {
        setUseEndTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUPON_CODE:
      return getCouponCode();

    case VALUE:
      return getValue();

    case MIN_PRICE:
      return getMinPrice();

    case USE_RANGE:
      return getUseRange();

    case START_TIME:
      return getStartTime();

    case EXPIRE_TIME:
      return getExpireTime();

    case BIND_TIME:
      return getBindTime();

    case BIND_USER_ID:
      return getBindUserId();

    case TIME_VALID_TYPE:
      return getTimeValidType();

    case VALID_DAY:
      return getValidDay();

    case BUSINESS_TYPE:
      return getBusinessType();

    case BUSINESS_ID:
      return getBusinessId();

    case IS_PASSWORD:
      return getIsPassword();

    case PASSWORD_CODE:
      return getPassword_code();

    case IS_USABLE:
      return getIsUsable();

    case UNUSEABLE_MSG:
      return getUnuseableMsg();

    case LEFT_USE_NUM:
      return getLeftUseNum();

    case TYPE:
      return getType();

    case USE_START_TIME:
      return getUseStartTime();

    case USE_END_TIME:
      return getUseEndTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUPON_CODE:
      return isSetCouponCode();
    case VALUE:
      return isSetValue();
    case MIN_PRICE:
      return isSetMinPrice();
    case USE_RANGE:
      return isSetUseRange();
    case START_TIME:
      return isSetStartTime();
    case EXPIRE_TIME:
      return isSetExpireTime();
    case BIND_TIME:
      return isSetBindTime();
    case BIND_USER_ID:
      return isSetBindUserId();
    case TIME_VALID_TYPE:
      return isSetTimeValidType();
    case VALID_DAY:
      return isSetValidDay();
    case BUSINESS_TYPE:
      return isSetBusinessType();
    case BUSINESS_ID:
      return isSetBusinessId();
    case IS_PASSWORD:
      return isSetIsPassword();
    case PASSWORD_CODE:
      return isSetPassword_code();
    case IS_USABLE:
      return isSetIsUsable();
    case UNUSEABLE_MSG:
      return isSetUnuseableMsg();
    case LEFT_USE_NUM:
      return isSetLeftUseNum();
    case TYPE:
      return isSetType();
    case USE_START_TIME:
      return isSetUseStartTime();
    case USE_END_TIME:
      return isSetUseEndTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCoupon)
      return this.equals((TCoupon)that);
    return false;
  }

  public boolean equals(TCoupon that) {
    if (that == null)
      return false;

    boolean this_present_couponCode = true && this.isSetCouponCode();
    boolean that_present_couponCode = true && that.isSetCouponCode();
    if (this_present_couponCode || that_present_couponCode) {
      if (!(this_present_couponCode && that_present_couponCode))
        return false;
      if (!this.couponCode.equals(that.couponCode))
        return false;
    }

    boolean this_present_value = true;
    boolean that_present_value = true;
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    boolean this_present_minPrice = true;
    boolean that_present_minPrice = true;
    if (this_present_minPrice || that_present_minPrice) {
      if (!(this_present_minPrice && that_present_minPrice))
        return false;
      if (this.minPrice != that.minPrice)
        return false;
    }

    boolean this_present_useRange = true && this.isSetUseRange();
    boolean that_present_useRange = true && that.isSetUseRange();
    if (this_present_useRange || that_present_useRange) {
      if (!(this_present_useRange && that_present_useRange))
        return false;
      if (!this.useRange.equals(that.useRange))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_expireTime = true && this.isSetExpireTime();
    boolean that_present_expireTime = true && that.isSetExpireTime();
    if (this_present_expireTime || that_present_expireTime) {
      if (!(this_present_expireTime && that_present_expireTime))
        return false;
      if (!this.expireTime.equals(that.expireTime))
        return false;
    }

    boolean this_present_bindTime = true && this.isSetBindTime();
    boolean that_present_bindTime = true && that.isSetBindTime();
    if (this_present_bindTime || that_present_bindTime) {
      if (!(this_present_bindTime && that_present_bindTime))
        return false;
      if (!this.bindTime.equals(that.bindTime))
        return false;
    }

    boolean this_present_bindUserId = true;
    boolean that_present_bindUserId = true;
    if (this_present_bindUserId || that_present_bindUserId) {
      if (!(this_present_bindUserId && that_present_bindUserId))
        return false;
      if (this.bindUserId != that.bindUserId)
        return false;
    }

    boolean this_present_timeValidType = true;
    boolean that_present_timeValidType = true;
    if (this_present_timeValidType || that_present_timeValidType) {
      if (!(this_present_timeValidType && that_present_timeValidType))
        return false;
      if (this.timeValidType != that.timeValidType)
        return false;
    }

    boolean this_present_validDay = true;
    boolean that_present_validDay = true;
    if (this_present_validDay || that_present_validDay) {
      if (!(this_present_validDay && that_present_validDay))
        return false;
      if (this.validDay != that.validDay)
        return false;
    }

    boolean this_present_businessType = true;
    boolean that_present_businessType = true;
    if (this_present_businessType || that_present_businessType) {
      if (!(this_present_businessType && that_present_businessType))
        return false;
      if (this.businessType != that.businessType)
        return false;
    }

    boolean this_present_businessId = true;
    boolean that_present_businessId = true;
    if (this_present_businessId || that_present_businessId) {
      if (!(this_present_businessId && that_present_businessId))
        return false;
      if (this.businessId != that.businessId)
        return false;
    }

    boolean this_present_isPassword = true;
    boolean that_present_isPassword = true;
    if (this_present_isPassword || that_present_isPassword) {
      if (!(this_present_isPassword && that_present_isPassword))
        return false;
      if (this.isPassword != that.isPassword)
        return false;
    }

    boolean this_present_password_code = true && this.isSetPassword_code();
    boolean that_present_password_code = true && that.isSetPassword_code();
    if (this_present_password_code || that_present_password_code) {
      if (!(this_present_password_code && that_present_password_code))
        return false;
      if (!this.password_code.equals(that.password_code))
        return false;
    }

    boolean this_present_isUsable = true;
    boolean that_present_isUsable = true;
    if (this_present_isUsable || that_present_isUsable) {
      if (!(this_present_isUsable && that_present_isUsable))
        return false;
      if (this.isUsable != that.isUsable)
        return false;
    }

    boolean this_present_unuseableMsg = true && this.isSetUnuseableMsg();
    boolean that_present_unuseableMsg = true && that.isSetUnuseableMsg();
    if (this_present_unuseableMsg || that_present_unuseableMsg) {
      if (!(this_present_unuseableMsg && that_present_unuseableMsg))
        return false;
      if (!this.unuseableMsg.equals(that.unuseableMsg))
        return false;
    }

    boolean this_present_leftUseNum = true;
    boolean that_present_leftUseNum = true;
    if (this_present_leftUseNum || that_present_leftUseNum) {
      if (!(this_present_leftUseNum && that_present_leftUseNum))
        return false;
      if (this.leftUseNum != that.leftUseNum)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_useStartTime = true && this.isSetUseStartTime();
    boolean that_present_useStartTime = true && that.isSetUseStartTime();
    if (this_present_useStartTime || that_present_useStartTime) {
      if (!(this_present_useStartTime && that_present_useStartTime))
        return false;
      if (!this.useStartTime.equals(that.useStartTime))
        return false;
    }

    boolean this_present_useEndTime = true && this.isSetUseEndTime();
    boolean that_present_useEndTime = true && that.isSetUseEndTime();
    if (this_present_useEndTime || that_present_useEndTime) {
      if (!(this_present_useEndTime && that_present_useEndTime))
        return false;
      if (!this.useEndTime.equals(that.useEndTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_couponCode = true && (isSetCouponCode());
    list.add(present_couponCode);
    if (present_couponCode)
      list.add(couponCode);

    boolean present_value = true;
    list.add(present_value);
    if (present_value)
      list.add(value);

    boolean present_minPrice = true;
    list.add(present_minPrice);
    if (present_minPrice)
      list.add(minPrice);

    boolean present_useRange = true && (isSetUseRange());
    list.add(present_useRange);
    if (present_useRange)
      list.add(useRange);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_expireTime = true && (isSetExpireTime());
    list.add(present_expireTime);
    if (present_expireTime)
      list.add(expireTime);

    boolean present_bindTime = true && (isSetBindTime());
    list.add(present_bindTime);
    if (present_bindTime)
      list.add(bindTime);

    boolean present_bindUserId = true;
    list.add(present_bindUserId);
    if (present_bindUserId)
      list.add(bindUserId);

    boolean present_timeValidType = true;
    list.add(present_timeValidType);
    if (present_timeValidType)
      list.add(timeValidType);

    boolean present_validDay = true;
    list.add(present_validDay);
    if (present_validDay)
      list.add(validDay);

    boolean present_businessType = true;
    list.add(present_businessType);
    if (present_businessType)
      list.add(businessType);

    boolean present_businessId = true;
    list.add(present_businessId);
    if (present_businessId)
      list.add(businessId);

    boolean present_isPassword = true;
    list.add(present_isPassword);
    if (present_isPassword)
      list.add(isPassword);

    boolean present_password_code = true && (isSetPassword_code());
    list.add(present_password_code);
    if (present_password_code)
      list.add(password_code);

    boolean present_isUsable = true;
    list.add(present_isUsable);
    if (present_isUsable)
      list.add(isUsable);

    boolean present_unuseableMsg = true && (isSetUnuseableMsg());
    list.add(present_unuseableMsg);
    if (present_unuseableMsg)
      list.add(unuseableMsg);

    boolean present_leftUseNum = true;
    list.add(present_leftUseNum);
    if (present_leftUseNum)
      list.add(leftUseNum);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_useStartTime = true && (isSetUseStartTime());
    list.add(present_useStartTime);
    if (present_useStartTime)
      list.add(useStartTime);

    boolean present_useEndTime = true && (isSetUseEndTime());
    list.add(present_useEndTime);
    if (present_useEndTime)
      list.add(useEndTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCoupon other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCouponCode()).compareTo(other.isSetCouponCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponCode, other.couponCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinPrice()).compareTo(other.isSetMinPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minPrice, other.minPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseRange()).compareTo(other.isSetUseRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useRange, other.useRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBindTime()).compareTo(other.isSetBindTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBindTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindTime, other.bindTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBindUserId()).compareTo(other.isSetBindUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBindUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindUserId, other.bindUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeValidType()).compareTo(other.isSetTimeValidType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeValidType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeValidType, other.timeValidType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidDay()).compareTo(other.isSetValidDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validDay, other.validDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessId()).compareTo(other.isSetBusinessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessId, other.businessId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPassword()).compareTo(other.isSetIsPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPassword, other.isPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword_code()).compareTo(other.isSetPassword_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password_code, other.password_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsUsable()).compareTo(other.isSetIsUsable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsUsable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isUsable, other.isUsable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnuseableMsg()).compareTo(other.isSetUnuseableMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnuseableMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unuseableMsg, other.unuseableMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeftUseNum()).compareTo(other.isSetLeftUseNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftUseNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftUseNum, other.leftUseNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseStartTime()).compareTo(other.isSetUseStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useStartTime, other.useStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseEndTime()).compareTo(other.isSetUseEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useEndTime, other.useEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCoupon(");
    boolean first = true;

    sb.append("couponCode:");
    if (this.couponCode == null) {
      sb.append("null");
    } else {
      sb.append(this.couponCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    sb.append(this.value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minPrice:");
    sb.append(this.minPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useRange:");
    if (this.useRange == null) {
      sb.append("null");
    } else {
      sb.append(this.useRange);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireTime:");
    if (this.expireTime == null) {
      sb.append("null");
    } else {
      sb.append(this.expireTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bindTime:");
    if (this.bindTime == null) {
      sb.append("null");
    } else {
      sb.append(this.bindTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bindUserId:");
    sb.append(this.bindUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeValidType:");
    sb.append(this.timeValidType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validDay:");
    sb.append(this.validDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessType:");
    sb.append(this.businessType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessId:");
    sb.append(this.businessId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPassword:");
    sb.append(this.isPassword);
    first = false;
    if (!first) sb.append(", ");
    sb.append("password_code:");
    if (this.password_code == null) {
      sb.append("null");
    } else {
      sb.append(this.password_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isUsable:");
    sb.append(this.isUsable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unuseableMsg:");
    if (this.unuseableMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.unuseableMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("leftUseNum:");
    sb.append(this.leftUseNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("useStartTime:");
    if (this.useStartTime == null) {
      sb.append("null");
    } else {
      sb.append(this.useStartTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("useEndTime:");
    if (this.useEndTime == null) {
      sb.append("null");
    } else {
      sb.append(this.useEndTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCouponStandardSchemeFactory implements SchemeFactory {
    public TCouponStandardScheme getScheme() {
      return new TCouponStandardScheme();
    }
  }

  private static class TCouponStandardScheme extends StandardScheme<TCoupon> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCoupon struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUPON_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.couponCode = iprot.readString();
              struct.setCouponCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.value = iprot.readDouble();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.minPrice = iprot.readDouble();
              struct.setMinPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USE_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.useRange = iprot.readString();
              struct.setUseRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expireTime = iprot.readString();
              struct.setExpireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BIND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bindTime = iprot.readString();
              struct.setBindTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BIND_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bindUserId = iprot.readI32();
              struct.setBindUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIME_VALID_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeValidType = iprot.readI32();
              struct.setTimeValidTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VALID_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.validDay = iprot.readI32();
              struct.setValidDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BUSINESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessType = iprot.readI32();
              struct.setBusinessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BUSINESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessId = iprot.readI32();
              struct.setBusinessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isPassword = iprot.readI32();
              struct.setIsPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PASSWORD_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password_code = iprot.readString();
              struct.setPassword_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_USABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isUsable = iprot.readI32();
              struct.setIsUsableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UNUSEABLE_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unuseableMsg = iprot.readString();
              struct.setUnuseableMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LEFT_USE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leftUseNum = iprot.readI32();
              struct.setLeftUseNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // USE_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.useStartTime = iprot.readString();
              struct.setUseStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // USE_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.useEndTime = iprot.readString();
              struct.setUseEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCoupon struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.couponCode != null) {
        oprot.writeFieldBegin(COUPON_CODE_FIELD_DESC);
        oprot.writeString(struct.couponCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeDouble(struct.value);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.minPrice);
      oprot.writeFieldEnd();
      if (struct.useRange != null) {
        oprot.writeFieldBegin(USE_RANGE_FIELD_DESC);
        oprot.writeString(struct.useRange);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeString(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.expireTime != null) {
        oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
        oprot.writeString(struct.expireTime);
        oprot.writeFieldEnd();
      }
      if (struct.bindTime != null) {
        oprot.writeFieldBegin(BIND_TIME_FIELD_DESC);
        oprot.writeString(struct.bindTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIND_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.bindUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_VALID_TYPE_FIELD_DESC);
      oprot.writeI32(struct.timeValidType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VALID_DAY_FIELD_DESC);
      oprot.writeI32(struct.validDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.businessType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_ID_FIELD_DESC);
      oprot.writeI32(struct.businessId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PASSWORD_FIELD_DESC);
      oprot.writeI32(struct.isPassword);
      oprot.writeFieldEnd();
      if (struct.password_code != null) {
        oprot.writeFieldBegin(PASSWORD_CODE_FIELD_DESC);
        oprot.writeString(struct.password_code);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_USABLE_FIELD_DESC);
      oprot.writeI32(struct.isUsable);
      oprot.writeFieldEnd();
      if (struct.unuseableMsg != null) {
        oprot.writeFieldBegin(UNUSEABLE_MSG_FIELD_DESC);
        oprot.writeString(struct.unuseableMsg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEFT_USE_NUM_FIELD_DESC);
      oprot.writeI32(struct.leftUseNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.useStartTime != null) {
        oprot.writeFieldBegin(USE_START_TIME_FIELD_DESC);
        oprot.writeString(struct.useStartTime);
        oprot.writeFieldEnd();
      }
      if (struct.useEndTime != null) {
        oprot.writeFieldBegin(USE_END_TIME_FIELD_DESC);
        oprot.writeString(struct.useEndTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCouponTupleSchemeFactory implements SchemeFactory {
    public TCouponTupleScheme getScheme() {
      return new TCouponTupleScheme();
    }
  }

  private static class TCouponTupleScheme extends TupleScheme<TCoupon> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCoupon struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCouponCode()) {
        optionals.set(0);
      }
      if (struct.isSetValue()) {
        optionals.set(1);
      }
      if (struct.isSetMinPrice()) {
        optionals.set(2);
      }
      if (struct.isSetUseRange()) {
        optionals.set(3);
      }
      if (struct.isSetStartTime()) {
        optionals.set(4);
      }
      if (struct.isSetExpireTime()) {
        optionals.set(5);
      }
      if (struct.isSetBindTime()) {
        optionals.set(6);
      }
      if (struct.isSetBindUserId()) {
        optionals.set(7);
      }
      if (struct.isSetTimeValidType()) {
        optionals.set(8);
      }
      if (struct.isSetValidDay()) {
        optionals.set(9);
      }
      if (struct.isSetBusinessType()) {
        optionals.set(10);
      }
      if (struct.isSetBusinessId()) {
        optionals.set(11);
      }
      if (struct.isSetIsPassword()) {
        optionals.set(12);
      }
      if (struct.isSetPassword_code()) {
        optionals.set(13);
      }
      if (struct.isSetIsUsable()) {
        optionals.set(14);
      }
      if (struct.isSetUnuseableMsg()) {
        optionals.set(15);
      }
      if (struct.isSetLeftUseNum()) {
        optionals.set(16);
      }
      if (struct.isSetType()) {
        optionals.set(17);
      }
      if (struct.isSetUseStartTime()) {
        optionals.set(18);
      }
      if (struct.isSetUseEndTime()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetCouponCode()) {
        oprot.writeString(struct.couponCode);
      }
      if (struct.isSetValue()) {
        oprot.writeDouble(struct.value);
      }
      if (struct.isSetMinPrice()) {
        oprot.writeDouble(struct.minPrice);
      }
      if (struct.isSetUseRange()) {
        oprot.writeString(struct.useRange);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetExpireTime()) {
        oprot.writeString(struct.expireTime);
      }
      if (struct.isSetBindTime()) {
        oprot.writeString(struct.bindTime);
      }
      if (struct.isSetBindUserId()) {
        oprot.writeI32(struct.bindUserId);
      }
      if (struct.isSetTimeValidType()) {
        oprot.writeI32(struct.timeValidType);
      }
      if (struct.isSetValidDay()) {
        oprot.writeI32(struct.validDay);
      }
      if (struct.isSetBusinessType()) {
        oprot.writeI32(struct.businessType);
      }
      if (struct.isSetBusinessId()) {
        oprot.writeI32(struct.businessId);
      }
      if (struct.isSetIsPassword()) {
        oprot.writeI32(struct.isPassword);
      }
      if (struct.isSetPassword_code()) {
        oprot.writeString(struct.password_code);
      }
      if (struct.isSetIsUsable()) {
        oprot.writeI32(struct.isUsable);
      }
      if (struct.isSetUnuseableMsg()) {
        oprot.writeString(struct.unuseableMsg);
      }
      if (struct.isSetLeftUseNum()) {
        oprot.writeI32(struct.leftUseNum);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetUseStartTime()) {
        oprot.writeString(struct.useStartTime);
      }
      if (struct.isSetUseEndTime()) {
        oprot.writeString(struct.useEndTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCoupon struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.couponCode = iprot.readString();
        struct.setCouponCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.value = iprot.readDouble();
        struct.setValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.minPrice = iprot.readDouble();
        struct.setMinPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.useRange = iprot.readString();
        struct.setUseRangeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.expireTime = iprot.readString();
        struct.setExpireTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bindTime = iprot.readString();
        struct.setBindTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bindUserId = iprot.readI32();
        struct.setBindUserIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.timeValidType = iprot.readI32();
        struct.setTimeValidTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.validDay = iprot.readI32();
        struct.setValidDayIsSet(true);
      }
      if (incoming.get(10)) {
        struct.businessType = iprot.readI32();
        struct.setBusinessTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.businessId = iprot.readI32();
        struct.setBusinessIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isPassword = iprot.readI32();
        struct.setIsPasswordIsSet(true);
      }
      if (incoming.get(13)) {
        struct.password_code = iprot.readString();
        struct.setPassword_codeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.isUsable = iprot.readI32();
        struct.setIsUsableIsSet(true);
      }
      if (incoming.get(15)) {
        struct.unuseableMsg = iprot.readString();
        struct.setUnuseableMsgIsSet(true);
      }
      if (incoming.get(16)) {
        struct.leftUseNum = iprot.readI32();
        struct.setLeftUseNumIsSet(true);
      }
      if (incoming.get(17)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.useStartTime = iprot.readString();
        struct.setUseStartTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.useEndTime = iprot.readString();
        struct.setUseEndTimeIsSet(true);
      }
    }
  }

}

