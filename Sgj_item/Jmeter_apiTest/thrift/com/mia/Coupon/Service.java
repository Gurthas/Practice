/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.Coupon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-18")
public class Service {

  public interface Iface {

    public com.mia.Coupon.TResultQueryCouponForCheckout queryCouponForCheckout(com.mia.Coupon.TParamsQueryCouponForCheckout params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException;

    public com.mia.Coupon.TResultCheckoutCommonCoupon checkoutCommonCoupon(com.mia.Coupon.TParamsCheckoutCommonCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException;

    public com.mia.Coupon.TResultPreUseCoupon preUseCoupon(com.mia.Coupon.TParamsPreUseCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException;

    public com.mia.Coupon.TResultRollbackCoupon rollbackCoupon(com.mia.Coupon.TParamsRollbackCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException;

    public com.mia.Coupon.TResultUseCoupon useCoupon(com.mia.Coupon.TParamsUseCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException;

    public com.mia.Coupon.TResultQueryUserCoupon queryUserCoupon(com.mia.Coupon.TParamsQueryUserCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException;

    public com.mia.Coupon.TResultBindCouponByBatchCode bindCouponByBatchCode(com.mia.Coupon.TParamsBindCouponByBatchCode params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException;

    public com.mia.Coupon.TResultBindCouponByCode bindCouponByCode(com.mia.Coupon.TParamsBindCouponByCode params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException;

    public com.mia.Coupon.TResultRecoverCoupon recoverCoupon(com.mia.Coupon.TParamsRecoverCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryCouponForCheckout(com.mia.Coupon.TParamsQueryCouponForCheckout params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkoutCommonCoupon(com.mia.Coupon.TParamsCheckoutCommonCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void preUseCoupon(com.mia.Coupon.TParamsPreUseCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rollbackCoupon(com.mia.Coupon.TParamsRollbackCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void useCoupon(com.mia.Coupon.TParamsUseCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryUserCoupon(com.mia.Coupon.TParamsQueryUserCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bindCouponByBatchCode(com.mia.Coupon.TParamsBindCouponByBatchCode params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bindCouponByCode(com.mia.Coupon.TParamsBindCouponByCode params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void recoverCoupon(com.mia.Coupon.TParamsRecoverCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.mia.Coupon.TResultQueryCouponForCheckout queryCouponForCheckout(com.mia.Coupon.TParamsQueryCouponForCheckout params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      send_queryCouponForCheckout(params, att);
      return recv_queryCouponForCheckout();
    }

    public void send_queryCouponForCheckout(com.mia.Coupon.TParamsQueryCouponForCheckout params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      queryCouponForCheckout_args args = new queryCouponForCheckout_args();
      args.setParams(params);
      args.setAtt(att);
      sendBase("queryCouponForCheckout", args);
    }

    public com.mia.Coupon.TResultQueryCouponForCheckout recv_queryCouponForCheckout() throws org.apache.thrift.TException
    {
      queryCouponForCheckout_result result = new queryCouponForCheckout_result();
      receiveBase(result, "queryCouponForCheckout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryCouponForCheckout failed: unknown result");
    }

    public com.mia.Coupon.TResultCheckoutCommonCoupon checkoutCommonCoupon(com.mia.Coupon.TParamsCheckoutCommonCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      send_checkoutCommonCoupon(params, att);
      return recv_checkoutCommonCoupon();
    }

    public void send_checkoutCommonCoupon(com.mia.Coupon.TParamsCheckoutCommonCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      checkoutCommonCoupon_args args = new checkoutCommonCoupon_args();
      args.setParams(params);
      args.setAtt(att);
      sendBase("checkoutCommonCoupon", args);
    }

    public com.mia.Coupon.TResultCheckoutCommonCoupon recv_checkoutCommonCoupon() throws org.apache.thrift.TException
    {
      checkoutCommonCoupon_result result = new checkoutCommonCoupon_result();
      receiveBase(result, "checkoutCommonCoupon");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkoutCommonCoupon failed: unknown result");
    }

    public com.mia.Coupon.TResultPreUseCoupon preUseCoupon(com.mia.Coupon.TParamsPreUseCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      send_preUseCoupon(params, att);
      return recv_preUseCoupon();
    }

    public void send_preUseCoupon(com.mia.Coupon.TParamsPreUseCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      preUseCoupon_args args = new preUseCoupon_args();
      args.setParams(params);
      args.setAtt(att);
      sendBase("preUseCoupon", args);
    }

    public com.mia.Coupon.TResultPreUseCoupon recv_preUseCoupon() throws org.apache.thrift.TException
    {
      preUseCoupon_result result = new preUseCoupon_result();
      receiveBase(result, "preUseCoupon");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "preUseCoupon failed: unknown result");
    }

    public com.mia.Coupon.TResultRollbackCoupon rollbackCoupon(com.mia.Coupon.TParamsRollbackCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      send_rollbackCoupon(params, att);
      return recv_rollbackCoupon();
    }

    public void send_rollbackCoupon(com.mia.Coupon.TParamsRollbackCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      rollbackCoupon_args args = new rollbackCoupon_args();
      args.setParams(params);
      args.setAtt(att);
      sendBase("rollbackCoupon", args);
    }

    public com.mia.Coupon.TResultRollbackCoupon recv_rollbackCoupon() throws org.apache.thrift.TException
    {
      rollbackCoupon_result result = new rollbackCoupon_result();
      receiveBase(result, "rollbackCoupon");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rollbackCoupon failed: unknown result");
    }

    public com.mia.Coupon.TResultUseCoupon useCoupon(com.mia.Coupon.TParamsUseCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      send_useCoupon(params, att);
      return recv_useCoupon();
    }

    public void send_useCoupon(com.mia.Coupon.TParamsUseCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      useCoupon_args args = new useCoupon_args();
      args.setParams(params);
      args.setAtt(att);
      sendBase("useCoupon", args);
    }

    public com.mia.Coupon.TResultUseCoupon recv_useCoupon() throws org.apache.thrift.TException
    {
      useCoupon_result result = new useCoupon_result();
      receiveBase(result, "useCoupon");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "useCoupon failed: unknown result");
    }

    public com.mia.Coupon.TResultQueryUserCoupon queryUserCoupon(com.mia.Coupon.TParamsQueryUserCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      send_queryUserCoupon(params, att);
      return recv_queryUserCoupon();
    }

    public void send_queryUserCoupon(com.mia.Coupon.TParamsQueryUserCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      queryUserCoupon_args args = new queryUserCoupon_args();
      args.setParams(params);
      args.setAtt(att);
      sendBase("queryUserCoupon", args);
    }

    public com.mia.Coupon.TResultQueryUserCoupon recv_queryUserCoupon() throws org.apache.thrift.TException
    {
      queryUserCoupon_result result = new queryUserCoupon_result();
      receiveBase(result, "queryUserCoupon");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserCoupon failed: unknown result");
    }

    public com.mia.Coupon.TResultBindCouponByBatchCode bindCouponByBatchCode(com.mia.Coupon.TParamsBindCouponByBatchCode params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      send_bindCouponByBatchCode(params, att);
      return recv_bindCouponByBatchCode();
    }

    public void send_bindCouponByBatchCode(com.mia.Coupon.TParamsBindCouponByBatchCode params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      bindCouponByBatchCode_args args = new bindCouponByBatchCode_args();
      args.setParams(params);
      args.setAtt(att);
      sendBase("bindCouponByBatchCode", args);
    }

    public com.mia.Coupon.TResultBindCouponByBatchCode recv_bindCouponByBatchCode() throws org.apache.thrift.TException
    {
      bindCouponByBatchCode_result result = new bindCouponByBatchCode_result();
      receiveBase(result, "bindCouponByBatchCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bindCouponByBatchCode failed: unknown result");
    }

    public com.mia.Coupon.TResultBindCouponByCode bindCouponByCode(com.mia.Coupon.TParamsBindCouponByCode params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      send_bindCouponByCode(params, att);
      return recv_bindCouponByCode();
    }

    public void send_bindCouponByCode(com.mia.Coupon.TParamsBindCouponByCode params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      bindCouponByCode_args args = new bindCouponByCode_args();
      args.setParams(params);
      args.setAtt(att);
      sendBase("bindCouponByCode", args);
    }

    public com.mia.Coupon.TResultBindCouponByCode recv_bindCouponByCode() throws org.apache.thrift.TException
    {
      bindCouponByCode_result result = new bindCouponByCode_result();
      receiveBase(result, "bindCouponByCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bindCouponByCode failed: unknown result");
    }

    public com.mia.Coupon.TResultRecoverCoupon recoverCoupon(com.mia.Coupon.TParamsRecoverCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      send_recoverCoupon(params, att);
      return recv_recoverCoupon();
    }

    public void send_recoverCoupon(com.mia.Coupon.TParamsRecoverCoupon params, com.mia.Coupon.CommonParams att) throws org.apache.thrift.TException
    {
      recoverCoupon_args args = new recoverCoupon_args();
      args.setParams(params);
      args.setAtt(att);
      sendBase("recoverCoupon", args);
    }

    public com.mia.Coupon.TResultRecoverCoupon recv_recoverCoupon() throws org.apache.thrift.TException
    {
      recoverCoupon_result result = new recoverCoupon_result();
      receiveBase(result, "recoverCoupon");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recoverCoupon failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryCouponForCheckout(com.mia.Coupon.TParamsQueryCouponForCheckout params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryCouponForCheckout_call method_call = new queryCouponForCheckout_call(params, att, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryCouponForCheckout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.Coupon.TParamsQueryCouponForCheckout params;
      private com.mia.Coupon.CommonParams att;
      public queryCouponForCheckout_call(com.mia.Coupon.TParamsQueryCouponForCheckout params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.att = att;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryCouponForCheckout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryCouponForCheckout_args args = new queryCouponForCheckout_args();
        args.setParams(params);
        args.setAtt(att);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.Coupon.TResultQueryCouponForCheckout getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryCouponForCheckout();
      }
    }

    public void checkoutCommonCoupon(com.mia.Coupon.TParamsCheckoutCommonCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkoutCommonCoupon_call method_call = new checkoutCommonCoupon_call(params, att, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkoutCommonCoupon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.Coupon.TParamsCheckoutCommonCoupon params;
      private com.mia.Coupon.CommonParams att;
      public checkoutCommonCoupon_call(com.mia.Coupon.TParamsCheckoutCommonCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.att = att;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkoutCommonCoupon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkoutCommonCoupon_args args = new checkoutCommonCoupon_args();
        args.setParams(params);
        args.setAtt(att);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.Coupon.TResultCheckoutCommonCoupon getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkoutCommonCoupon();
      }
    }

    public void preUseCoupon(com.mia.Coupon.TParamsPreUseCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      preUseCoupon_call method_call = new preUseCoupon_call(params, att, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class preUseCoupon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.Coupon.TParamsPreUseCoupon params;
      private com.mia.Coupon.CommonParams att;
      public preUseCoupon_call(com.mia.Coupon.TParamsPreUseCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.att = att;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("preUseCoupon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        preUseCoupon_args args = new preUseCoupon_args();
        args.setParams(params);
        args.setAtt(att);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.Coupon.TResultPreUseCoupon getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_preUseCoupon();
      }
    }

    public void rollbackCoupon(com.mia.Coupon.TParamsRollbackCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rollbackCoupon_call method_call = new rollbackCoupon_call(params, att, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rollbackCoupon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.Coupon.TParamsRollbackCoupon params;
      private com.mia.Coupon.CommonParams att;
      public rollbackCoupon_call(com.mia.Coupon.TParamsRollbackCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.att = att;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rollbackCoupon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rollbackCoupon_args args = new rollbackCoupon_args();
        args.setParams(params);
        args.setAtt(att);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.Coupon.TResultRollbackCoupon getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rollbackCoupon();
      }
    }

    public void useCoupon(com.mia.Coupon.TParamsUseCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      useCoupon_call method_call = new useCoupon_call(params, att, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class useCoupon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.Coupon.TParamsUseCoupon params;
      private com.mia.Coupon.CommonParams att;
      public useCoupon_call(com.mia.Coupon.TParamsUseCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.att = att;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("useCoupon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        useCoupon_args args = new useCoupon_args();
        args.setParams(params);
        args.setAtt(att);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.Coupon.TResultUseCoupon getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_useCoupon();
      }
    }

    public void queryUserCoupon(com.mia.Coupon.TParamsQueryUserCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryUserCoupon_call method_call = new queryUserCoupon_call(params, att, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryUserCoupon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.Coupon.TParamsQueryUserCoupon params;
      private com.mia.Coupon.CommonParams att;
      public queryUserCoupon_call(com.mia.Coupon.TParamsQueryUserCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.att = att;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserCoupon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryUserCoupon_args args = new queryUserCoupon_args();
        args.setParams(params);
        args.setAtt(att);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.Coupon.TResultQueryUserCoupon getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryUserCoupon();
      }
    }

    public void bindCouponByBatchCode(com.mia.Coupon.TParamsBindCouponByBatchCode params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bindCouponByBatchCode_call method_call = new bindCouponByBatchCode_call(params, att, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bindCouponByBatchCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.Coupon.TParamsBindCouponByBatchCode params;
      private com.mia.Coupon.CommonParams att;
      public bindCouponByBatchCode_call(com.mia.Coupon.TParamsBindCouponByBatchCode params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.att = att;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bindCouponByBatchCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bindCouponByBatchCode_args args = new bindCouponByBatchCode_args();
        args.setParams(params);
        args.setAtt(att);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.Coupon.TResultBindCouponByBatchCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bindCouponByBatchCode();
      }
    }

    public void bindCouponByCode(com.mia.Coupon.TParamsBindCouponByCode params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bindCouponByCode_call method_call = new bindCouponByCode_call(params, att, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bindCouponByCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.Coupon.TParamsBindCouponByCode params;
      private com.mia.Coupon.CommonParams att;
      public bindCouponByCode_call(com.mia.Coupon.TParamsBindCouponByCode params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.att = att;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bindCouponByCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bindCouponByCode_args args = new bindCouponByCode_args();
        args.setParams(params);
        args.setAtt(att);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.Coupon.TResultBindCouponByCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bindCouponByCode();
      }
    }

    public void recoverCoupon(com.mia.Coupon.TParamsRecoverCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recoverCoupon_call method_call = new recoverCoupon_call(params, att, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recoverCoupon_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.Coupon.TParamsRecoverCoupon params;
      private com.mia.Coupon.CommonParams att;
      public recoverCoupon_call(com.mia.Coupon.TParamsRecoverCoupon params, com.mia.Coupon.CommonParams att, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.att = att;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recoverCoupon", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recoverCoupon_args args = new recoverCoupon_args();
        args.setParams(params);
        args.setAtt(att);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.Coupon.TResultRecoverCoupon getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recoverCoupon();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryCouponForCheckout", new queryCouponForCheckout());
      processMap.put("checkoutCommonCoupon", new checkoutCommonCoupon());
      processMap.put("preUseCoupon", new preUseCoupon());
      processMap.put("rollbackCoupon", new rollbackCoupon());
      processMap.put("useCoupon", new useCoupon());
      processMap.put("queryUserCoupon", new queryUserCoupon());
      processMap.put("bindCouponByBatchCode", new bindCouponByBatchCode());
      processMap.put("bindCouponByCode", new bindCouponByCode());
      processMap.put("recoverCoupon", new recoverCoupon());
      return processMap;
    }

    public static class queryCouponForCheckout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryCouponForCheckout_args> {
      public queryCouponForCheckout() {
        super("queryCouponForCheckout");
      }

      public queryCouponForCheckout_args getEmptyArgsInstance() {
        return new queryCouponForCheckout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryCouponForCheckout_result getResult(I iface, queryCouponForCheckout_args args) throws org.apache.thrift.TException {
        queryCouponForCheckout_result result = new queryCouponForCheckout_result();
        result.success = iface.queryCouponForCheckout(args.params, args.att);
        return result;
      }
    }

    public static class checkoutCommonCoupon<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkoutCommonCoupon_args> {
      public checkoutCommonCoupon() {
        super("checkoutCommonCoupon");
      }

      public checkoutCommonCoupon_args getEmptyArgsInstance() {
        return new checkoutCommonCoupon_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkoutCommonCoupon_result getResult(I iface, checkoutCommonCoupon_args args) throws org.apache.thrift.TException {
        checkoutCommonCoupon_result result = new checkoutCommonCoupon_result();
        result.success = iface.checkoutCommonCoupon(args.params, args.att);
        return result;
      }
    }

    public static class preUseCoupon<I extends Iface> extends org.apache.thrift.ProcessFunction<I, preUseCoupon_args> {
      public preUseCoupon() {
        super("preUseCoupon");
      }

      public preUseCoupon_args getEmptyArgsInstance() {
        return new preUseCoupon_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public preUseCoupon_result getResult(I iface, preUseCoupon_args args) throws org.apache.thrift.TException {
        preUseCoupon_result result = new preUseCoupon_result();
        result.success = iface.preUseCoupon(args.params, args.att);
        return result;
      }
    }

    public static class rollbackCoupon<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rollbackCoupon_args> {
      public rollbackCoupon() {
        super("rollbackCoupon");
      }

      public rollbackCoupon_args getEmptyArgsInstance() {
        return new rollbackCoupon_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rollbackCoupon_result getResult(I iface, rollbackCoupon_args args) throws org.apache.thrift.TException {
        rollbackCoupon_result result = new rollbackCoupon_result();
        result.success = iface.rollbackCoupon(args.params, args.att);
        return result;
      }
    }

    public static class useCoupon<I extends Iface> extends org.apache.thrift.ProcessFunction<I, useCoupon_args> {
      public useCoupon() {
        super("useCoupon");
      }

      public useCoupon_args getEmptyArgsInstance() {
        return new useCoupon_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public useCoupon_result getResult(I iface, useCoupon_args args) throws org.apache.thrift.TException {
        useCoupon_result result = new useCoupon_result();
        result.success = iface.useCoupon(args.params, args.att);
        return result;
      }
    }

    public static class queryUserCoupon<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserCoupon_args> {
      public queryUserCoupon() {
        super("queryUserCoupon");
      }

      public queryUserCoupon_args getEmptyArgsInstance() {
        return new queryUserCoupon_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryUserCoupon_result getResult(I iface, queryUserCoupon_args args) throws org.apache.thrift.TException {
        queryUserCoupon_result result = new queryUserCoupon_result();
        result.success = iface.queryUserCoupon(args.params, args.att);
        return result;
      }
    }

    public static class bindCouponByBatchCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bindCouponByBatchCode_args> {
      public bindCouponByBatchCode() {
        super("bindCouponByBatchCode");
      }

      public bindCouponByBatchCode_args getEmptyArgsInstance() {
        return new bindCouponByBatchCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bindCouponByBatchCode_result getResult(I iface, bindCouponByBatchCode_args args) throws org.apache.thrift.TException {
        bindCouponByBatchCode_result result = new bindCouponByBatchCode_result();
        result.success = iface.bindCouponByBatchCode(args.params, args.att);
        return result;
      }
    }

    public static class bindCouponByCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bindCouponByCode_args> {
      public bindCouponByCode() {
        super("bindCouponByCode");
      }

      public bindCouponByCode_args getEmptyArgsInstance() {
        return new bindCouponByCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bindCouponByCode_result getResult(I iface, bindCouponByCode_args args) throws org.apache.thrift.TException {
        bindCouponByCode_result result = new bindCouponByCode_result();
        result.success = iface.bindCouponByCode(args.params, args.att);
        return result;
      }
    }

    public static class recoverCoupon<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recoverCoupon_args> {
      public recoverCoupon() {
        super("recoverCoupon");
      }

      public recoverCoupon_args getEmptyArgsInstance() {
        return new recoverCoupon_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public recoverCoupon_result getResult(I iface, recoverCoupon_args args) throws org.apache.thrift.TException {
        recoverCoupon_result result = new recoverCoupon_result();
        result.success = iface.recoverCoupon(args.params, args.att);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryCouponForCheckout", new queryCouponForCheckout());
      processMap.put("checkoutCommonCoupon", new checkoutCommonCoupon());
      processMap.put("preUseCoupon", new preUseCoupon());
      processMap.put("rollbackCoupon", new rollbackCoupon());
      processMap.put("useCoupon", new useCoupon());
      processMap.put("queryUserCoupon", new queryUserCoupon());
      processMap.put("bindCouponByBatchCode", new bindCouponByBatchCode());
      processMap.put("bindCouponByCode", new bindCouponByCode());
      processMap.put("recoverCoupon", new recoverCoupon());
      return processMap;
    }

    public static class queryCouponForCheckout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryCouponForCheckout_args, com.mia.Coupon.TResultQueryCouponForCheckout> {
      public queryCouponForCheckout() {
        super("queryCouponForCheckout");
      }

      public queryCouponForCheckout_args getEmptyArgsInstance() {
        return new queryCouponForCheckout_args();
      }

      public AsyncMethodCallback<com.mia.Coupon.TResultQueryCouponForCheckout> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.Coupon.TResultQueryCouponForCheckout>() { 
          public void onComplete(com.mia.Coupon.TResultQueryCouponForCheckout o) {
            queryCouponForCheckout_result result = new queryCouponForCheckout_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryCouponForCheckout_result result = new queryCouponForCheckout_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryCouponForCheckout_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.Coupon.TResultQueryCouponForCheckout> resultHandler) throws TException {
        iface.queryCouponForCheckout(args.params, args.att,resultHandler);
      }
    }

    public static class checkoutCommonCoupon<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkoutCommonCoupon_args, com.mia.Coupon.TResultCheckoutCommonCoupon> {
      public checkoutCommonCoupon() {
        super("checkoutCommonCoupon");
      }

      public checkoutCommonCoupon_args getEmptyArgsInstance() {
        return new checkoutCommonCoupon_args();
      }

      public AsyncMethodCallback<com.mia.Coupon.TResultCheckoutCommonCoupon> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.Coupon.TResultCheckoutCommonCoupon>() { 
          public void onComplete(com.mia.Coupon.TResultCheckoutCommonCoupon o) {
            checkoutCommonCoupon_result result = new checkoutCommonCoupon_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkoutCommonCoupon_result result = new checkoutCommonCoupon_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkoutCommonCoupon_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.Coupon.TResultCheckoutCommonCoupon> resultHandler) throws TException {
        iface.checkoutCommonCoupon(args.params, args.att,resultHandler);
      }
    }

    public static class preUseCoupon<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, preUseCoupon_args, com.mia.Coupon.TResultPreUseCoupon> {
      public preUseCoupon() {
        super("preUseCoupon");
      }

      public preUseCoupon_args getEmptyArgsInstance() {
        return new preUseCoupon_args();
      }

      public AsyncMethodCallback<com.mia.Coupon.TResultPreUseCoupon> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.Coupon.TResultPreUseCoupon>() { 
          public void onComplete(com.mia.Coupon.TResultPreUseCoupon o) {
            preUseCoupon_result result = new preUseCoupon_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            preUseCoupon_result result = new preUseCoupon_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, preUseCoupon_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.Coupon.TResultPreUseCoupon> resultHandler) throws TException {
        iface.preUseCoupon(args.params, args.att,resultHandler);
      }
    }

    public static class rollbackCoupon<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rollbackCoupon_args, com.mia.Coupon.TResultRollbackCoupon> {
      public rollbackCoupon() {
        super("rollbackCoupon");
      }

      public rollbackCoupon_args getEmptyArgsInstance() {
        return new rollbackCoupon_args();
      }

      public AsyncMethodCallback<com.mia.Coupon.TResultRollbackCoupon> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.Coupon.TResultRollbackCoupon>() { 
          public void onComplete(com.mia.Coupon.TResultRollbackCoupon o) {
            rollbackCoupon_result result = new rollbackCoupon_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rollbackCoupon_result result = new rollbackCoupon_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rollbackCoupon_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.Coupon.TResultRollbackCoupon> resultHandler) throws TException {
        iface.rollbackCoupon(args.params, args.att,resultHandler);
      }
    }

    public static class useCoupon<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, useCoupon_args, com.mia.Coupon.TResultUseCoupon> {
      public useCoupon() {
        super("useCoupon");
      }

      public useCoupon_args getEmptyArgsInstance() {
        return new useCoupon_args();
      }

      public AsyncMethodCallback<com.mia.Coupon.TResultUseCoupon> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.Coupon.TResultUseCoupon>() { 
          public void onComplete(com.mia.Coupon.TResultUseCoupon o) {
            useCoupon_result result = new useCoupon_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            useCoupon_result result = new useCoupon_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, useCoupon_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.Coupon.TResultUseCoupon> resultHandler) throws TException {
        iface.useCoupon(args.params, args.att,resultHandler);
      }
    }

    public static class queryUserCoupon<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserCoupon_args, com.mia.Coupon.TResultQueryUserCoupon> {
      public queryUserCoupon() {
        super("queryUserCoupon");
      }

      public queryUserCoupon_args getEmptyArgsInstance() {
        return new queryUserCoupon_args();
      }

      public AsyncMethodCallback<com.mia.Coupon.TResultQueryUserCoupon> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.Coupon.TResultQueryUserCoupon>() { 
          public void onComplete(com.mia.Coupon.TResultQueryUserCoupon o) {
            queryUserCoupon_result result = new queryUserCoupon_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryUserCoupon_result result = new queryUserCoupon_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryUserCoupon_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.Coupon.TResultQueryUserCoupon> resultHandler) throws TException {
        iface.queryUserCoupon(args.params, args.att,resultHandler);
      }
    }

    public static class bindCouponByBatchCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bindCouponByBatchCode_args, com.mia.Coupon.TResultBindCouponByBatchCode> {
      public bindCouponByBatchCode() {
        super("bindCouponByBatchCode");
      }

      public bindCouponByBatchCode_args getEmptyArgsInstance() {
        return new bindCouponByBatchCode_args();
      }

      public AsyncMethodCallback<com.mia.Coupon.TResultBindCouponByBatchCode> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.Coupon.TResultBindCouponByBatchCode>() { 
          public void onComplete(com.mia.Coupon.TResultBindCouponByBatchCode o) {
            bindCouponByBatchCode_result result = new bindCouponByBatchCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bindCouponByBatchCode_result result = new bindCouponByBatchCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bindCouponByBatchCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.Coupon.TResultBindCouponByBatchCode> resultHandler) throws TException {
        iface.bindCouponByBatchCode(args.params, args.att,resultHandler);
      }
    }

    public static class bindCouponByCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bindCouponByCode_args, com.mia.Coupon.TResultBindCouponByCode> {
      public bindCouponByCode() {
        super("bindCouponByCode");
      }

      public bindCouponByCode_args getEmptyArgsInstance() {
        return new bindCouponByCode_args();
      }

      public AsyncMethodCallback<com.mia.Coupon.TResultBindCouponByCode> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.Coupon.TResultBindCouponByCode>() { 
          public void onComplete(com.mia.Coupon.TResultBindCouponByCode o) {
            bindCouponByCode_result result = new bindCouponByCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bindCouponByCode_result result = new bindCouponByCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bindCouponByCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.Coupon.TResultBindCouponByCode> resultHandler) throws TException {
        iface.bindCouponByCode(args.params, args.att,resultHandler);
      }
    }

    public static class recoverCoupon<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recoverCoupon_args, com.mia.Coupon.TResultRecoverCoupon> {
      public recoverCoupon() {
        super("recoverCoupon");
      }

      public recoverCoupon_args getEmptyArgsInstance() {
        return new recoverCoupon_args();
      }

      public AsyncMethodCallback<com.mia.Coupon.TResultRecoverCoupon> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.Coupon.TResultRecoverCoupon>() { 
          public void onComplete(com.mia.Coupon.TResultRecoverCoupon o) {
            recoverCoupon_result result = new recoverCoupon_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            recoverCoupon_result result = new recoverCoupon_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, recoverCoupon_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.Coupon.TResultRecoverCoupon> resultHandler) throws TException {
        iface.recoverCoupon(args.params, args.att,resultHandler);
      }
    }

  }

  public static class queryCouponForCheckout_args implements org.apache.thrift.TBase<queryCouponForCheckout_args, queryCouponForCheckout_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryCouponForCheckout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCouponForCheckout_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_FIELD_DESC = new org.apache.thrift.protocol.TField("att", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCouponForCheckout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCouponForCheckout_argsTupleSchemeFactory());
    }

    public com.mia.Coupon.TParamsQueryCouponForCheckout params; // required
    public com.mia.Coupon.CommonParams att; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      ATT((short)2, "att");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // ATT
            return ATT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TParamsQueryCouponForCheckout.class)));
      tmpMap.put(_Fields.ATT, new org.apache.thrift.meta_data.FieldMetaData("att", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCouponForCheckout_args.class, metaDataMap);
    }

    public queryCouponForCheckout_args() {
    }

    public queryCouponForCheckout_args(
      com.mia.Coupon.TParamsQueryCouponForCheckout params,
      com.mia.Coupon.CommonParams att)
    {
      this();
      this.params = params;
      this.att = att;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCouponForCheckout_args(queryCouponForCheckout_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.Coupon.TParamsQueryCouponForCheckout(other.params);
      }
      if (other.isSetAtt()) {
        this.att = new com.mia.Coupon.CommonParams(other.att);
      }
    }

    public queryCouponForCheckout_args deepCopy() {
      return new queryCouponForCheckout_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.att = null;
    }

    public com.mia.Coupon.TParamsQueryCouponForCheckout getParams() {
      return this.params;
    }

    public queryCouponForCheckout_args setParams(com.mia.Coupon.TParamsQueryCouponForCheckout params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.Coupon.CommonParams getAtt() {
      return this.att;
    }

    public queryCouponForCheckout_args setAtt(com.mia.Coupon.CommonParams att) {
      this.att = att;
      return this;
    }

    public void unsetAtt() {
      this.att = null;
    }

    /** Returns true if field att is set (has been assigned a value) and false otherwise */
    public boolean isSetAtt() {
      return this.att != null;
    }

    public void setAttIsSet(boolean value) {
      if (!value) {
        this.att = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.Coupon.TParamsQueryCouponForCheckout)value);
        }
        break;

      case ATT:
        if (value == null) {
          unsetAtt();
        } else {
          setAtt((com.mia.Coupon.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case ATT:
        return getAtt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case ATT:
        return isSetAtt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCouponForCheckout_args)
        return this.equals((queryCouponForCheckout_args)that);
      return false;
    }

    public boolean equals(queryCouponForCheckout_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_att = true && this.isSetAtt();
      boolean that_present_att = true && that.isSetAtt();
      if (this_present_att || that_present_att) {
        if (!(this_present_att && that_present_att))
          return false;
        if (!this.att.equals(that.att))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_att = true && (isSetAtt());
      list.add(present_att);
      if (present_att)
        list.add(att);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCouponForCheckout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtt()).compareTo(other.isSetAtt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att, other.att);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCouponForCheckout_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("att:");
      if (this.att == null) {
        sb.append("null");
      } else {
        sb.append(this.att);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (att != null) {
        att.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCouponForCheckout_argsStandardSchemeFactory implements SchemeFactory {
      public queryCouponForCheckout_argsStandardScheme getScheme() {
        return new queryCouponForCheckout_argsStandardScheme();
      }
    }

    private static class queryCouponForCheckout_argsStandardScheme extends StandardScheme<queryCouponForCheckout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCouponForCheckout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.Coupon.TParamsQueryCouponForCheckout();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.att = new com.mia.Coupon.CommonParams();
                struct.att.read(iprot);
                struct.setAttIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCouponForCheckout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.att != null) {
          oprot.writeFieldBegin(ATT_FIELD_DESC);
          struct.att.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCouponForCheckout_argsTupleSchemeFactory implements SchemeFactory {
      public queryCouponForCheckout_argsTupleScheme getScheme() {
        return new queryCouponForCheckout_argsTupleScheme();
      }
    }

    private static class queryCouponForCheckout_argsTupleScheme extends TupleScheme<queryCouponForCheckout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCouponForCheckout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetAtt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetAtt()) {
          struct.att.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCouponForCheckout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.Coupon.TParamsQueryCouponForCheckout();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.att = new com.mia.Coupon.CommonParams();
          struct.att.read(iprot);
          struct.setAttIsSet(true);
        }
      }
    }

  }

  public static class queryCouponForCheckout_result implements org.apache.thrift.TBase<queryCouponForCheckout_result, queryCouponForCheckout_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryCouponForCheckout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryCouponForCheckout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryCouponForCheckout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryCouponForCheckout_resultTupleSchemeFactory());
    }

    public com.mia.Coupon.TResultQueryCouponForCheckout success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TResultQueryCouponForCheckout.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryCouponForCheckout_result.class, metaDataMap);
    }

    public queryCouponForCheckout_result() {
    }

    public queryCouponForCheckout_result(
      com.mia.Coupon.TResultQueryCouponForCheckout success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryCouponForCheckout_result(queryCouponForCheckout_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.Coupon.TResultQueryCouponForCheckout(other.success);
      }
    }

    public queryCouponForCheckout_result deepCopy() {
      return new queryCouponForCheckout_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.Coupon.TResultQueryCouponForCheckout getSuccess() {
      return this.success;
    }

    public queryCouponForCheckout_result setSuccess(com.mia.Coupon.TResultQueryCouponForCheckout success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.Coupon.TResultQueryCouponForCheckout)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryCouponForCheckout_result)
        return this.equals((queryCouponForCheckout_result)that);
      return false;
    }

    public boolean equals(queryCouponForCheckout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryCouponForCheckout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryCouponForCheckout_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryCouponForCheckout_resultStandardSchemeFactory implements SchemeFactory {
      public queryCouponForCheckout_resultStandardScheme getScheme() {
        return new queryCouponForCheckout_resultStandardScheme();
      }
    }

    private static class queryCouponForCheckout_resultStandardScheme extends StandardScheme<queryCouponForCheckout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryCouponForCheckout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.Coupon.TResultQueryCouponForCheckout();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryCouponForCheckout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryCouponForCheckout_resultTupleSchemeFactory implements SchemeFactory {
      public queryCouponForCheckout_resultTupleScheme getScheme() {
        return new queryCouponForCheckout_resultTupleScheme();
      }
    }

    private static class queryCouponForCheckout_resultTupleScheme extends TupleScheme<queryCouponForCheckout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryCouponForCheckout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryCouponForCheckout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.Coupon.TResultQueryCouponForCheckout();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkoutCommonCoupon_args implements org.apache.thrift.TBase<checkoutCommonCoupon_args, checkoutCommonCoupon_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkoutCommonCoupon_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkoutCommonCoupon_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_FIELD_DESC = new org.apache.thrift.protocol.TField("att", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkoutCommonCoupon_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkoutCommonCoupon_argsTupleSchemeFactory());
    }

    public com.mia.Coupon.TParamsCheckoutCommonCoupon params; // required
    public com.mia.Coupon.CommonParams att; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      ATT((short)2, "att");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // ATT
            return ATT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TParamsCheckoutCommonCoupon.class)));
      tmpMap.put(_Fields.ATT, new org.apache.thrift.meta_data.FieldMetaData("att", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkoutCommonCoupon_args.class, metaDataMap);
    }

    public checkoutCommonCoupon_args() {
    }

    public checkoutCommonCoupon_args(
      com.mia.Coupon.TParamsCheckoutCommonCoupon params,
      com.mia.Coupon.CommonParams att)
    {
      this();
      this.params = params;
      this.att = att;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkoutCommonCoupon_args(checkoutCommonCoupon_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.Coupon.TParamsCheckoutCommonCoupon(other.params);
      }
      if (other.isSetAtt()) {
        this.att = new com.mia.Coupon.CommonParams(other.att);
      }
    }

    public checkoutCommonCoupon_args deepCopy() {
      return new checkoutCommonCoupon_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.att = null;
    }

    public com.mia.Coupon.TParamsCheckoutCommonCoupon getParams() {
      return this.params;
    }

    public checkoutCommonCoupon_args setParams(com.mia.Coupon.TParamsCheckoutCommonCoupon params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.Coupon.CommonParams getAtt() {
      return this.att;
    }

    public checkoutCommonCoupon_args setAtt(com.mia.Coupon.CommonParams att) {
      this.att = att;
      return this;
    }

    public void unsetAtt() {
      this.att = null;
    }

    /** Returns true if field att is set (has been assigned a value) and false otherwise */
    public boolean isSetAtt() {
      return this.att != null;
    }

    public void setAttIsSet(boolean value) {
      if (!value) {
        this.att = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.Coupon.TParamsCheckoutCommonCoupon)value);
        }
        break;

      case ATT:
        if (value == null) {
          unsetAtt();
        } else {
          setAtt((com.mia.Coupon.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case ATT:
        return getAtt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case ATT:
        return isSetAtt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkoutCommonCoupon_args)
        return this.equals((checkoutCommonCoupon_args)that);
      return false;
    }

    public boolean equals(checkoutCommonCoupon_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_att = true && this.isSetAtt();
      boolean that_present_att = true && that.isSetAtt();
      if (this_present_att || that_present_att) {
        if (!(this_present_att && that_present_att))
          return false;
        if (!this.att.equals(that.att))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_att = true && (isSetAtt());
      list.add(present_att);
      if (present_att)
        list.add(att);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkoutCommonCoupon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtt()).compareTo(other.isSetAtt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att, other.att);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkoutCommonCoupon_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("att:");
      if (this.att == null) {
        sb.append("null");
      } else {
        sb.append(this.att);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (att != null) {
        att.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkoutCommonCoupon_argsStandardSchemeFactory implements SchemeFactory {
      public checkoutCommonCoupon_argsStandardScheme getScheme() {
        return new checkoutCommonCoupon_argsStandardScheme();
      }
    }

    private static class checkoutCommonCoupon_argsStandardScheme extends StandardScheme<checkoutCommonCoupon_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkoutCommonCoupon_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.Coupon.TParamsCheckoutCommonCoupon();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.att = new com.mia.Coupon.CommonParams();
                struct.att.read(iprot);
                struct.setAttIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkoutCommonCoupon_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.att != null) {
          oprot.writeFieldBegin(ATT_FIELD_DESC);
          struct.att.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkoutCommonCoupon_argsTupleSchemeFactory implements SchemeFactory {
      public checkoutCommonCoupon_argsTupleScheme getScheme() {
        return new checkoutCommonCoupon_argsTupleScheme();
      }
    }

    private static class checkoutCommonCoupon_argsTupleScheme extends TupleScheme<checkoutCommonCoupon_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkoutCommonCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetAtt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetAtt()) {
          struct.att.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkoutCommonCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.Coupon.TParamsCheckoutCommonCoupon();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.att = new com.mia.Coupon.CommonParams();
          struct.att.read(iprot);
          struct.setAttIsSet(true);
        }
      }
    }

  }

  public static class checkoutCommonCoupon_result implements org.apache.thrift.TBase<checkoutCommonCoupon_result, checkoutCommonCoupon_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkoutCommonCoupon_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkoutCommonCoupon_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkoutCommonCoupon_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkoutCommonCoupon_resultTupleSchemeFactory());
    }

    public com.mia.Coupon.TResultCheckoutCommonCoupon success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TResultCheckoutCommonCoupon.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkoutCommonCoupon_result.class, metaDataMap);
    }

    public checkoutCommonCoupon_result() {
    }

    public checkoutCommonCoupon_result(
      com.mia.Coupon.TResultCheckoutCommonCoupon success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkoutCommonCoupon_result(checkoutCommonCoupon_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.Coupon.TResultCheckoutCommonCoupon(other.success);
      }
    }

    public checkoutCommonCoupon_result deepCopy() {
      return new checkoutCommonCoupon_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.Coupon.TResultCheckoutCommonCoupon getSuccess() {
      return this.success;
    }

    public checkoutCommonCoupon_result setSuccess(com.mia.Coupon.TResultCheckoutCommonCoupon success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.Coupon.TResultCheckoutCommonCoupon)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkoutCommonCoupon_result)
        return this.equals((checkoutCommonCoupon_result)that);
      return false;
    }

    public boolean equals(checkoutCommonCoupon_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkoutCommonCoupon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkoutCommonCoupon_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkoutCommonCoupon_resultStandardSchemeFactory implements SchemeFactory {
      public checkoutCommonCoupon_resultStandardScheme getScheme() {
        return new checkoutCommonCoupon_resultStandardScheme();
      }
    }

    private static class checkoutCommonCoupon_resultStandardScheme extends StandardScheme<checkoutCommonCoupon_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkoutCommonCoupon_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.Coupon.TResultCheckoutCommonCoupon();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkoutCommonCoupon_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkoutCommonCoupon_resultTupleSchemeFactory implements SchemeFactory {
      public checkoutCommonCoupon_resultTupleScheme getScheme() {
        return new checkoutCommonCoupon_resultTupleScheme();
      }
    }

    private static class checkoutCommonCoupon_resultTupleScheme extends TupleScheme<checkoutCommonCoupon_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkoutCommonCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkoutCommonCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.Coupon.TResultCheckoutCommonCoupon();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class preUseCoupon_args implements org.apache.thrift.TBase<preUseCoupon_args, preUseCoupon_args._Fields>, java.io.Serializable, Cloneable, Comparable<preUseCoupon_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("preUseCoupon_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_FIELD_DESC = new org.apache.thrift.protocol.TField("att", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new preUseCoupon_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new preUseCoupon_argsTupleSchemeFactory());
    }

    public com.mia.Coupon.TParamsPreUseCoupon params; // required
    public com.mia.Coupon.CommonParams att; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      ATT((short)2, "att");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // ATT
            return ATT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TParamsPreUseCoupon.class)));
      tmpMap.put(_Fields.ATT, new org.apache.thrift.meta_data.FieldMetaData("att", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(preUseCoupon_args.class, metaDataMap);
    }

    public preUseCoupon_args() {
    }

    public preUseCoupon_args(
      com.mia.Coupon.TParamsPreUseCoupon params,
      com.mia.Coupon.CommonParams att)
    {
      this();
      this.params = params;
      this.att = att;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public preUseCoupon_args(preUseCoupon_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.Coupon.TParamsPreUseCoupon(other.params);
      }
      if (other.isSetAtt()) {
        this.att = new com.mia.Coupon.CommonParams(other.att);
      }
    }

    public preUseCoupon_args deepCopy() {
      return new preUseCoupon_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.att = null;
    }

    public com.mia.Coupon.TParamsPreUseCoupon getParams() {
      return this.params;
    }

    public preUseCoupon_args setParams(com.mia.Coupon.TParamsPreUseCoupon params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.Coupon.CommonParams getAtt() {
      return this.att;
    }

    public preUseCoupon_args setAtt(com.mia.Coupon.CommonParams att) {
      this.att = att;
      return this;
    }

    public void unsetAtt() {
      this.att = null;
    }

    /** Returns true if field att is set (has been assigned a value) and false otherwise */
    public boolean isSetAtt() {
      return this.att != null;
    }

    public void setAttIsSet(boolean value) {
      if (!value) {
        this.att = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.Coupon.TParamsPreUseCoupon)value);
        }
        break;

      case ATT:
        if (value == null) {
          unsetAtt();
        } else {
          setAtt((com.mia.Coupon.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case ATT:
        return getAtt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case ATT:
        return isSetAtt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof preUseCoupon_args)
        return this.equals((preUseCoupon_args)that);
      return false;
    }

    public boolean equals(preUseCoupon_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_att = true && this.isSetAtt();
      boolean that_present_att = true && that.isSetAtt();
      if (this_present_att || that_present_att) {
        if (!(this_present_att && that_present_att))
          return false;
        if (!this.att.equals(that.att))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_att = true && (isSetAtt());
      list.add(present_att);
      if (present_att)
        list.add(att);

      return list.hashCode();
    }

    @Override
    public int compareTo(preUseCoupon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtt()).compareTo(other.isSetAtt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att, other.att);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("preUseCoupon_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("att:");
      if (this.att == null) {
        sb.append("null");
      } else {
        sb.append(this.att);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (att != null) {
        att.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class preUseCoupon_argsStandardSchemeFactory implements SchemeFactory {
      public preUseCoupon_argsStandardScheme getScheme() {
        return new preUseCoupon_argsStandardScheme();
      }
    }

    private static class preUseCoupon_argsStandardScheme extends StandardScheme<preUseCoupon_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, preUseCoupon_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.Coupon.TParamsPreUseCoupon();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.att = new com.mia.Coupon.CommonParams();
                struct.att.read(iprot);
                struct.setAttIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, preUseCoupon_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.att != null) {
          oprot.writeFieldBegin(ATT_FIELD_DESC);
          struct.att.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class preUseCoupon_argsTupleSchemeFactory implements SchemeFactory {
      public preUseCoupon_argsTupleScheme getScheme() {
        return new preUseCoupon_argsTupleScheme();
      }
    }

    private static class preUseCoupon_argsTupleScheme extends TupleScheme<preUseCoupon_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, preUseCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetAtt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetAtt()) {
          struct.att.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, preUseCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.Coupon.TParamsPreUseCoupon();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.att = new com.mia.Coupon.CommonParams();
          struct.att.read(iprot);
          struct.setAttIsSet(true);
        }
      }
    }

  }

  public static class preUseCoupon_result implements org.apache.thrift.TBase<preUseCoupon_result, preUseCoupon_result._Fields>, java.io.Serializable, Cloneable, Comparable<preUseCoupon_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("preUseCoupon_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new preUseCoupon_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new preUseCoupon_resultTupleSchemeFactory());
    }

    public com.mia.Coupon.TResultPreUseCoupon success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TResultPreUseCoupon.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(preUseCoupon_result.class, metaDataMap);
    }

    public preUseCoupon_result() {
    }

    public preUseCoupon_result(
      com.mia.Coupon.TResultPreUseCoupon success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public preUseCoupon_result(preUseCoupon_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.Coupon.TResultPreUseCoupon(other.success);
      }
    }

    public preUseCoupon_result deepCopy() {
      return new preUseCoupon_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.Coupon.TResultPreUseCoupon getSuccess() {
      return this.success;
    }

    public preUseCoupon_result setSuccess(com.mia.Coupon.TResultPreUseCoupon success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.Coupon.TResultPreUseCoupon)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof preUseCoupon_result)
        return this.equals((preUseCoupon_result)that);
      return false;
    }

    public boolean equals(preUseCoupon_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(preUseCoupon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("preUseCoupon_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class preUseCoupon_resultStandardSchemeFactory implements SchemeFactory {
      public preUseCoupon_resultStandardScheme getScheme() {
        return new preUseCoupon_resultStandardScheme();
      }
    }

    private static class preUseCoupon_resultStandardScheme extends StandardScheme<preUseCoupon_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, preUseCoupon_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.Coupon.TResultPreUseCoupon();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, preUseCoupon_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class preUseCoupon_resultTupleSchemeFactory implements SchemeFactory {
      public preUseCoupon_resultTupleScheme getScheme() {
        return new preUseCoupon_resultTupleScheme();
      }
    }

    private static class preUseCoupon_resultTupleScheme extends TupleScheme<preUseCoupon_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, preUseCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, preUseCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.Coupon.TResultPreUseCoupon();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rollbackCoupon_args implements org.apache.thrift.TBase<rollbackCoupon_args, rollbackCoupon_args._Fields>, java.io.Serializable, Cloneable, Comparable<rollbackCoupon_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rollbackCoupon_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_FIELD_DESC = new org.apache.thrift.protocol.TField("att", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rollbackCoupon_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rollbackCoupon_argsTupleSchemeFactory());
    }

    public com.mia.Coupon.TParamsRollbackCoupon params; // required
    public com.mia.Coupon.CommonParams att; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      ATT((short)2, "att");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // ATT
            return ATT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TParamsRollbackCoupon.class)));
      tmpMap.put(_Fields.ATT, new org.apache.thrift.meta_data.FieldMetaData("att", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rollbackCoupon_args.class, metaDataMap);
    }

    public rollbackCoupon_args() {
    }

    public rollbackCoupon_args(
      com.mia.Coupon.TParamsRollbackCoupon params,
      com.mia.Coupon.CommonParams att)
    {
      this();
      this.params = params;
      this.att = att;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rollbackCoupon_args(rollbackCoupon_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.Coupon.TParamsRollbackCoupon(other.params);
      }
      if (other.isSetAtt()) {
        this.att = new com.mia.Coupon.CommonParams(other.att);
      }
    }

    public rollbackCoupon_args deepCopy() {
      return new rollbackCoupon_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.att = null;
    }

    public com.mia.Coupon.TParamsRollbackCoupon getParams() {
      return this.params;
    }

    public rollbackCoupon_args setParams(com.mia.Coupon.TParamsRollbackCoupon params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.Coupon.CommonParams getAtt() {
      return this.att;
    }

    public rollbackCoupon_args setAtt(com.mia.Coupon.CommonParams att) {
      this.att = att;
      return this;
    }

    public void unsetAtt() {
      this.att = null;
    }

    /** Returns true if field att is set (has been assigned a value) and false otherwise */
    public boolean isSetAtt() {
      return this.att != null;
    }

    public void setAttIsSet(boolean value) {
      if (!value) {
        this.att = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.Coupon.TParamsRollbackCoupon)value);
        }
        break;

      case ATT:
        if (value == null) {
          unsetAtt();
        } else {
          setAtt((com.mia.Coupon.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case ATT:
        return getAtt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case ATT:
        return isSetAtt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rollbackCoupon_args)
        return this.equals((rollbackCoupon_args)that);
      return false;
    }

    public boolean equals(rollbackCoupon_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_att = true && this.isSetAtt();
      boolean that_present_att = true && that.isSetAtt();
      if (this_present_att || that_present_att) {
        if (!(this_present_att && that_present_att))
          return false;
        if (!this.att.equals(that.att))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_att = true && (isSetAtt());
      list.add(present_att);
      if (present_att)
        list.add(att);

      return list.hashCode();
    }

    @Override
    public int compareTo(rollbackCoupon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtt()).compareTo(other.isSetAtt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att, other.att);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rollbackCoupon_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("att:");
      if (this.att == null) {
        sb.append("null");
      } else {
        sb.append(this.att);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (att != null) {
        att.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rollbackCoupon_argsStandardSchemeFactory implements SchemeFactory {
      public rollbackCoupon_argsStandardScheme getScheme() {
        return new rollbackCoupon_argsStandardScheme();
      }
    }

    private static class rollbackCoupon_argsStandardScheme extends StandardScheme<rollbackCoupon_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rollbackCoupon_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.Coupon.TParamsRollbackCoupon();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.att = new com.mia.Coupon.CommonParams();
                struct.att.read(iprot);
                struct.setAttIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rollbackCoupon_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.att != null) {
          oprot.writeFieldBegin(ATT_FIELD_DESC);
          struct.att.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rollbackCoupon_argsTupleSchemeFactory implements SchemeFactory {
      public rollbackCoupon_argsTupleScheme getScheme() {
        return new rollbackCoupon_argsTupleScheme();
      }
    }

    private static class rollbackCoupon_argsTupleScheme extends TupleScheme<rollbackCoupon_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rollbackCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetAtt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetAtt()) {
          struct.att.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rollbackCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.Coupon.TParamsRollbackCoupon();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.att = new com.mia.Coupon.CommonParams();
          struct.att.read(iprot);
          struct.setAttIsSet(true);
        }
      }
    }

  }

  public static class rollbackCoupon_result implements org.apache.thrift.TBase<rollbackCoupon_result, rollbackCoupon_result._Fields>, java.io.Serializable, Cloneable, Comparable<rollbackCoupon_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rollbackCoupon_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rollbackCoupon_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rollbackCoupon_resultTupleSchemeFactory());
    }

    public com.mia.Coupon.TResultRollbackCoupon success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TResultRollbackCoupon.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rollbackCoupon_result.class, metaDataMap);
    }

    public rollbackCoupon_result() {
    }

    public rollbackCoupon_result(
      com.mia.Coupon.TResultRollbackCoupon success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rollbackCoupon_result(rollbackCoupon_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.Coupon.TResultRollbackCoupon(other.success);
      }
    }

    public rollbackCoupon_result deepCopy() {
      return new rollbackCoupon_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.Coupon.TResultRollbackCoupon getSuccess() {
      return this.success;
    }

    public rollbackCoupon_result setSuccess(com.mia.Coupon.TResultRollbackCoupon success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.Coupon.TResultRollbackCoupon)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rollbackCoupon_result)
        return this.equals((rollbackCoupon_result)that);
      return false;
    }

    public boolean equals(rollbackCoupon_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rollbackCoupon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rollbackCoupon_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rollbackCoupon_resultStandardSchemeFactory implements SchemeFactory {
      public rollbackCoupon_resultStandardScheme getScheme() {
        return new rollbackCoupon_resultStandardScheme();
      }
    }

    private static class rollbackCoupon_resultStandardScheme extends StandardScheme<rollbackCoupon_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rollbackCoupon_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.Coupon.TResultRollbackCoupon();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rollbackCoupon_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rollbackCoupon_resultTupleSchemeFactory implements SchemeFactory {
      public rollbackCoupon_resultTupleScheme getScheme() {
        return new rollbackCoupon_resultTupleScheme();
      }
    }

    private static class rollbackCoupon_resultTupleScheme extends TupleScheme<rollbackCoupon_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rollbackCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rollbackCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.Coupon.TResultRollbackCoupon();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class useCoupon_args implements org.apache.thrift.TBase<useCoupon_args, useCoupon_args._Fields>, java.io.Serializable, Cloneable, Comparable<useCoupon_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("useCoupon_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_FIELD_DESC = new org.apache.thrift.protocol.TField("att", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new useCoupon_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new useCoupon_argsTupleSchemeFactory());
    }

    public com.mia.Coupon.TParamsUseCoupon params; // required
    public com.mia.Coupon.CommonParams att; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      ATT((short)2, "att");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // ATT
            return ATT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TParamsUseCoupon.class)));
      tmpMap.put(_Fields.ATT, new org.apache.thrift.meta_data.FieldMetaData("att", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(useCoupon_args.class, metaDataMap);
    }

    public useCoupon_args() {
    }

    public useCoupon_args(
      com.mia.Coupon.TParamsUseCoupon params,
      com.mia.Coupon.CommonParams att)
    {
      this();
      this.params = params;
      this.att = att;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public useCoupon_args(useCoupon_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.Coupon.TParamsUseCoupon(other.params);
      }
      if (other.isSetAtt()) {
        this.att = new com.mia.Coupon.CommonParams(other.att);
      }
    }

    public useCoupon_args deepCopy() {
      return new useCoupon_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.att = null;
    }

    public com.mia.Coupon.TParamsUseCoupon getParams() {
      return this.params;
    }

    public useCoupon_args setParams(com.mia.Coupon.TParamsUseCoupon params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.Coupon.CommonParams getAtt() {
      return this.att;
    }

    public useCoupon_args setAtt(com.mia.Coupon.CommonParams att) {
      this.att = att;
      return this;
    }

    public void unsetAtt() {
      this.att = null;
    }

    /** Returns true if field att is set (has been assigned a value) and false otherwise */
    public boolean isSetAtt() {
      return this.att != null;
    }

    public void setAttIsSet(boolean value) {
      if (!value) {
        this.att = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.Coupon.TParamsUseCoupon)value);
        }
        break;

      case ATT:
        if (value == null) {
          unsetAtt();
        } else {
          setAtt((com.mia.Coupon.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case ATT:
        return getAtt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case ATT:
        return isSetAtt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof useCoupon_args)
        return this.equals((useCoupon_args)that);
      return false;
    }

    public boolean equals(useCoupon_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_att = true && this.isSetAtt();
      boolean that_present_att = true && that.isSetAtt();
      if (this_present_att || that_present_att) {
        if (!(this_present_att && that_present_att))
          return false;
        if (!this.att.equals(that.att))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_att = true && (isSetAtt());
      list.add(present_att);
      if (present_att)
        list.add(att);

      return list.hashCode();
    }

    @Override
    public int compareTo(useCoupon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtt()).compareTo(other.isSetAtt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att, other.att);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("useCoupon_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("att:");
      if (this.att == null) {
        sb.append("null");
      } else {
        sb.append(this.att);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (att != null) {
        att.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class useCoupon_argsStandardSchemeFactory implements SchemeFactory {
      public useCoupon_argsStandardScheme getScheme() {
        return new useCoupon_argsStandardScheme();
      }
    }

    private static class useCoupon_argsStandardScheme extends StandardScheme<useCoupon_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, useCoupon_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.Coupon.TParamsUseCoupon();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.att = new com.mia.Coupon.CommonParams();
                struct.att.read(iprot);
                struct.setAttIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, useCoupon_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.att != null) {
          oprot.writeFieldBegin(ATT_FIELD_DESC);
          struct.att.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class useCoupon_argsTupleSchemeFactory implements SchemeFactory {
      public useCoupon_argsTupleScheme getScheme() {
        return new useCoupon_argsTupleScheme();
      }
    }

    private static class useCoupon_argsTupleScheme extends TupleScheme<useCoupon_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, useCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetAtt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetAtt()) {
          struct.att.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, useCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.Coupon.TParamsUseCoupon();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.att = new com.mia.Coupon.CommonParams();
          struct.att.read(iprot);
          struct.setAttIsSet(true);
        }
      }
    }

  }

  public static class useCoupon_result implements org.apache.thrift.TBase<useCoupon_result, useCoupon_result._Fields>, java.io.Serializable, Cloneable, Comparable<useCoupon_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("useCoupon_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new useCoupon_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new useCoupon_resultTupleSchemeFactory());
    }

    public com.mia.Coupon.TResultUseCoupon success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TResultUseCoupon.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(useCoupon_result.class, metaDataMap);
    }

    public useCoupon_result() {
    }

    public useCoupon_result(
      com.mia.Coupon.TResultUseCoupon success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public useCoupon_result(useCoupon_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.Coupon.TResultUseCoupon(other.success);
      }
    }

    public useCoupon_result deepCopy() {
      return new useCoupon_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.Coupon.TResultUseCoupon getSuccess() {
      return this.success;
    }

    public useCoupon_result setSuccess(com.mia.Coupon.TResultUseCoupon success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.Coupon.TResultUseCoupon)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof useCoupon_result)
        return this.equals((useCoupon_result)that);
      return false;
    }

    public boolean equals(useCoupon_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(useCoupon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("useCoupon_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class useCoupon_resultStandardSchemeFactory implements SchemeFactory {
      public useCoupon_resultStandardScheme getScheme() {
        return new useCoupon_resultStandardScheme();
      }
    }

    private static class useCoupon_resultStandardScheme extends StandardScheme<useCoupon_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, useCoupon_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.Coupon.TResultUseCoupon();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, useCoupon_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class useCoupon_resultTupleSchemeFactory implements SchemeFactory {
      public useCoupon_resultTupleScheme getScheme() {
        return new useCoupon_resultTupleScheme();
      }
    }

    private static class useCoupon_resultTupleScheme extends TupleScheme<useCoupon_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, useCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, useCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.Coupon.TResultUseCoupon();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryUserCoupon_args implements org.apache.thrift.TBase<queryUserCoupon_args, queryUserCoupon_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserCoupon_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserCoupon_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_FIELD_DESC = new org.apache.thrift.protocol.TField("att", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserCoupon_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserCoupon_argsTupleSchemeFactory());
    }

    public com.mia.Coupon.TParamsQueryUserCoupon params; // required
    public com.mia.Coupon.CommonParams att; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      ATT((short)2, "att");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // ATT
            return ATT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TParamsQueryUserCoupon.class)));
      tmpMap.put(_Fields.ATT, new org.apache.thrift.meta_data.FieldMetaData("att", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserCoupon_args.class, metaDataMap);
    }

    public queryUserCoupon_args() {
    }

    public queryUserCoupon_args(
      com.mia.Coupon.TParamsQueryUserCoupon params,
      com.mia.Coupon.CommonParams att)
    {
      this();
      this.params = params;
      this.att = att;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserCoupon_args(queryUserCoupon_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.Coupon.TParamsQueryUserCoupon(other.params);
      }
      if (other.isSetAtt()) {
        this.att = new com.mia.Coupon.CommonParams(other.att);
      }
    }

    public queryUserCoupon_args deepCopy() {
      return new queryUserCoupon_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.att = null;
    }

    public com.mia.Coupon.TParamsQueryUserCoupon getParams() {
      return this.params;
    }

    public queryUserCoupon_args setParams(com.mia.Coupon.TParamsQueryUserCoupon params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.Coupon.CommonParams getAtt() {
      return this.att;
    }

    public queryUserCoupon_args setAtt(com.mia.Coupon.CommonParams att) {
      this.att = att;
      return this;
    }

    public void unsetAtt() {
      this.att = null;
    }

    /** Returns true if field att is set (has been assigned a value) and false otherwise */
    public boolean isSetAtt() {
      return this.att != null;
    }

    public void setAttIsSet(boolean value) {
      if (!value) {
        this.att = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.Coupon.TParamsQueryUserCoupon)value);
        }
        break;

      case ATT:
        if (value == null) {
          unsetAtt();
        } else {
          setAtt((com.mia.Coupon.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case ATT:
        return getAtt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case ATT:
        return isSetAtt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserCoupon_args)
        return this.equals((queryUserCoupon_args)that);
      return false;
    }

    public boolean equals(queryUserCoupon_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_att = true && this.isSetAtt();
      boolean that_present_att = true && that.isSetAtt();
      if (this_present_att || that_present_att) {
        if (!(this_present_att && that_present_att))
          return false;
        if (!this.att.equals(that.att))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_att = true && (isSetAtt());
      list.add(present_att);
      if (present_att)
        list.add(att);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryUserCoupon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtt()).compareTo(other.isSetAtt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att, other.att);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserCoupon_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("att:");
      if (this.att == null) {
        sb.append("null");
      } else {
        sb.append(this.att);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (att != null) {
        att.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserCoupon_argsStandardSchemeFactory implements SchemeFactory {
      public queryUserCoupon_argsStandardScheme getScheme() {
        return new queryUserCoupon_argsStandardScheme();
      }
    }

    private static class queryUserCoupon_argsStandardScheme extends StandardScheme<queryUserCoupon_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserCoupon_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.Coupon.TParamsQueryUserCoupon();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.att = new com.mia.Coupon.CommonParams();
                struct.att.read(iprot);
                struct.setAttIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserCoupon_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.att != null) {
          oprot.writeFieldBegin(ATT_FIELD_DESC);
          struct.att.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserCoupon_argsTupleSchemeFactory implements SchemeFactory {
      public queryUserCoupon_argsTupleScheme getScheme() {
        return new queryUserCoupon_argsTupleScheme();
      }
    }

    private static class queryUserCoupon_argsTupleScheme extends TupleScheme<queryUserCoupon_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetAtt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetAtt()) {
          struct.att.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.Coupon.TParamsQueryUserCoupon();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.att = new com.mia.Coupon.CommonParams();
          struct.att.read(iprot);
          struct.setAttIsSet(true);
        }
      }
    }

  }

  public static class queryUserCoupon_result implements org.apache.thrift.TBase<queryUserCoupon_result, queryUserCoupon_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserCoupon_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserCoupon_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryUserCoupon_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryUserCoupon_resultTupleSchemeFactory());
    }

    public com.mia.Coupon.TResultQueryUserCoupon success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TResultQueryUserCoupon.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserCoupon_result.class, metaDataMap);
    }

    public queryUserCoupon_result() {
    }

    public queryUserCoupon_result(
      com.mia.Coupon.TResultQueryUserCoupon success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUserCoupon_result(queryUserCoupon_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.Coupon.TResultQueryUserCoupon(other.success);
      }
    }

    public queryUserCoupon_result deepCopy() {
      return new queryUserCoupon_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.Coupon.TResultQueryUserCoupon getSuccess() {
      return this.success;
    }

    public queryUserCoupon_result setSuccess(com.mia.Coupon.TResultQueryUserCoupon success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.Coupon.TResultQueryUserCoupon)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUserCoupon_result)
        return this.equals((queryUserCoupon_result)that);
      return false;
    }

    public boolean equals(queryUserCoupon_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryUserCoupon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryUserCoupon_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUserCoupon_resultStandardSchemeFactory implements SchemeFactory {
      public queryUserCoupon_resultStandardScheme getScheme() {
        return new queryUserCoupon_resultStandardScheme();
      }
    }

    private static class queryUserCoupon_resultStandardScheme extends StandardScheme<queryUserCoupon_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserCoupon_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.Coupon.TResultQueryUserCoupon();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserCoupon_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUserCoupon_resultTupleSchemeFactory implements SchemeFactory {
      public queryUserCoupon_resultTupleScheme getScheme() {
        return new queryUserCoupon_resultTupleScheme();
      }
    }

    private static class queryUserCoupon_resultTupleScheme extends TupleScheme<queryUserCoupon_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUserCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUserCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.Coupon.TResultQueryUserCoupon();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bindCouponByBatchCode_args implements org.apache.thrift.TBase<bindCouponByBatchCode_args, bindCouponByBatchCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<bindCouponByBatchCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindCouponByBatchCode_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_FIELD_DESC = new org.apache.thrift.protocol.TField("att", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bindCouponByBatchCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bindCouponByBatchCode_argsTupleSchemeFactory());
    }

    public com.mia.Coupon.TParamsBindCouponByBatchCode params; // required
    public com.mia.Coupon.CommonParams att; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      ATT((short)2, "att");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // ATT
            return ATT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TParamsBindCouponByBatchCode.class)));
      tmpMap.put(_Fields.ATT, new org.apache.thrift.meta_data.FieldMetaData("att", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindCouponByBatchCode_args.class, metaDataMap);
    }

    public bindCouponByBatchCode_args() {
    }

    public bindCouponByBatchCode_args(
      com.mia.Coupon.TParamsBindCouponByBatchCode params,
      com.mia.Coupon.CommonParams att)
    {
      this();
      this.params = params;
      this.att = att;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindCouponByBatchCode_args(bindCouponByBatchCode_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.Coupon.TParamsBindCouponByBatchCode(other.params);
      }
      if (other.isSetAtt()) {
        this.att = new com.mia.Coupon.CommonParams(other.att);
      }
    }

    public bindCouponByBatchCode_args deepCopy() {
      return new bindCouponByBatchCode_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.att = null;
    }

    public com.mia.Coupon.TParamsBindCouponByBatchCode getParams() {
      return this.params;
    }

    public bindCouponByBatchCode_args setParams(com.mia.Coupon.TParamsBindCouponByBatchCode params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.Coupon.CommonParams getAtt() {
      return this.att;
    }

    public bindCouponByBatchCode_args setAtt(com.mia.Coupon.CommonParams att) {
      this.att = att;
      return this;
    }

    public void unsetAtt() {
      this.att = null;
    }

    /** Returns true if field att is set (has been assigned a value) and false otherwise */
    public boolean isSetAtt() {
      return this.att != null;
    }

    public void setAttIsSet(boolean value) {
      if (!value) {
        this.att = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.Coupon.TParamsBindCouponByBatchCode)value);
        }
        break;

      case ATT:
        if (value == null) {
          unsetAtt();
        } else {
          setAtt((com.mia.Coupon.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case ATT:
        return getAtt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case ATT:
        return isSetAtt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindCouponByBatchCode_args)
        return this.equals((bindCouponByBatchCode_args)that);
      return false;
    }

    public boolean equals(bindCouponByBatchCode_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_att = true && this.isSetAtt();
      boolean that_present_att = true && that.isSetAtt();
      if (this_present_att || that_present_att) {
        if (!(this_present_att && that_present_att))
          return false;
        if (!this.att.equals(that.att))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_att = true && (isSetAtt());
      list.add(present_att);
      if (present_att)
        list.add(att);

      return list.hashCode();
    }

    @Override
    public int compareTo(bindCouponByBatchCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtt()).compareTo(other.isSetAtt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att, other.att);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindCouponByBatchCode_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("att:");
      if (this.att == null) {
        sb.append("null");
      } else {
        sb.append(this.att);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (att != null) {
        att.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindCouponByBatchCode_argsStandardSchemeFactory implements SchemeFactory {
      public bindCouponByBatchCode_argsStandardScheme getScheme() {
        return new bindCouponByBatchCode_argsStandardScheme();
      }
    }

    private static class bindCouponByBatchCode_argsStandardScheme extends StandardScheme<bindCouponByBatchCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindCouponByBatchCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.Coupon.TParamsBindCouponByBatchCode();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.att = new com.mia.Coupon.CommonParams();
                struct.att.read(iprot);
                struct.setAttIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindCouponByBatchCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.att != null) {
          oprot.writeFieldBegin(ATT_FIELD_DESC);
          struct.att.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindCouponByBatchCode_argsTupleSchemeFactory implements SchemeFactory {
      public bindCouponByBatchCode_argsTupleScheme getScheme() {
        return new bindCouponByBatchCode_argsTupleScheme();
      }
    }

    private static class bindCouponByBatchCode_argsTupleScheme extends TupleScheme<bindCouponByBatchCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindCouponByBatchCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetAtt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetAtt()) {
          struct.att.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindCouponByBatchCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.Coupon.TParamsBindCouponByBatchCode();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.att = new com.mia.Coupon.CommonParams();
          struct.att.read(iprot);
          struct.setAttIsSet(true);
        }
      }
    }

  }

  public static class bindCouponByBatchCode_result implements org.apache.thrift.TBase<bindCouponByBatchCode_result, bindCouponByBatchCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<bindCouponByBatchCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindCouponByBatchCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bindCouponByBatchCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bindCouponByBatchCode_resultTupleSchemeFactory());
    }

    public com.mia.Coupon.TResultBindCouponByBatchCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TResultBindCouponByBatchCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindCouponByBatchCode_result.class, metaDataMap);
    }

    public bindCouponByBatchCode_result() {
    }

    public bindCouponByBatchCode_result(
      com.mia.Coupon.TResultBindCouponByBatchCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindCouponByBatchCode_result(bindCouponByBatchCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.Coupon.TResultBindCouponByBatchCode(other.success);
      }
    }

    public bindCouponByBatchCode_result deepCopy() {
      return new bindCouponByBatchCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.Coupon.TResultBindCouponByBatchCode getSuccess() {
      return this.success;
    }

    public bindCouponByBatchCode_result setSuccess(com.mia.Coupon.TResultBindCouponByBatchCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.Coupon.TResultBindCouponByBatchCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindCouponByBatchCode_result)
        return this.equals((bindCouponByBatchCode_result)that);
      return false;
    }

    public boolean equals(bindCouponByBatchCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bindCouponByBatchCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindCouponByBatchCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindCouponByBatchCode_resultStandardSchemeFactory implements SchemeFactory {
      public bindCouponByBatchCode_resultStandardScheme getScheme() {
        return new bindCouponByBatchCode_resultStandardScheme();
      }
    }

    private static class bindCouponByBatchCode_resultStandardScheme extends StandardScheme<bindCouponByBatchCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindCouponByBatchCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.Coupon.TResultBindCouponByBatchCode();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindCouponByBatchCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindCouponByBatchCode_resultTupleSchemeFactory implements SchemeFactory {
      public bindCouponByBatchCode_resultTupleScheme getScheme() {
        return new bindCouponByBatchCode_resultTupleScheme();
      }
    }

    private static class bindCouponByBatchCode_resultTupleScheme extends TupleScheme<bindCouponByBatchCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindCouponByBatchCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindCouponByBatchCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.Coupon.TResultBindCouponByBatchCode();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bindCouponByCode_args implements org.apache.thrift.TBase<bindCouponByCode_args, bindCouponByCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<bindCouponByCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindCouponByCode_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_FIELD_DESC = new org.apache.thrift.protocol.TField("att", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bindCouponByCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bindCouponByCode_argsTupleSchemeFactory());
    }

    public com.mia.Coupon.TParamsBindCouponByCode params; // required
    public com.mia.Coupon.CommonParams att; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      ATT((short)2, "att");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // ATT
            return ATT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TParamsBindCouponByCode.class)));
      tmpMap.put(_Fields.ATT, new org.apache.thrift.meta_data.FieldMetaData("att", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindCouponByCode_args.class, metaDataMap);
    }

    public bindCouponByCode_args() {
    }

    public bindCouponByCode_args(
      com.mia.Coupon.TParamsBindCouponByCode params,
      com.mia.Coupon.CommonParams att)
    {
      this();
      this.params = params;
      this.att = att;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindCouponByCode_args(bindCouponByCode_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.Coupon.TParamsBindCouponByCode(other.params);
      }
      if (other.isSetAtt()) {
        this.att = new com.mia.Coupon.CommonParams(other.att);
      }
    }

    public bindCouponByCode_args deepCopy() {
      return new bindCouponByCode_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.att = null;
    }

    public com.mia.Coupon.TParamsBindCouponByCode getParams() {
      return this.params;
    }

    public bindCouponByCode_args setParams(com.mia.Coupon.TParamsBindCouponByCode params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.Coupon.CommonParams getAtt() {
      return this.att;
    }

    public bindCouponByCode_args setAtt(com.mia.Coupon.CommonParams att) {
      this.att = att;
      return this;
    }

    public void unsetAtt() {
      this.att = null;
    }

    /** Returns true if field att is set (has been assigned a value) and false otherwise */
    public boolean isSetAtt() {
      return this.att != null;
    }

    public void setAttIsSet(boolean value) {
      if (!value) {
        this.att = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.Coupon.TParamsBindCouponByCode)value);
        }
        break;

      case ATT:
        if (value == null) {
          unsetAtt();
        } else {
          setAtt((com.mia.Coupon.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case ATT:
        return getAtt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case ATT:
        return isSetAtt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindCouponByCode_args)
        return this.equals((bindCouponByCode_args)that);
      return false;
    }

    public boolean equals(bindCouponByCode_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_att = true && this.isSetAtt();
      boolean that_present_att = true && that.isSetAtt();
      if (this_present_att || that_present_att) {
        if (!(this_present_att && that_present_att))
          return false;
        if (!this.att.equals(that.att))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_att = true && (isSetAtt());
      list.add(present_att);
      if (present_att)
        list.add(att);

      return list.hashCode();
    }

    @Override
    public int compareTo(bindCouponByCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtt()).compareTo(other.isSetAtt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att, other.att);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindCouponByCode_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("att:");
      if (this.att == null) {
        sb.append("null");
      } else {
        sb.append(this.att);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (att != null) {
        att.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindCouponByCode_argsStandardSchemeFactory implements SchemeFactory {
      public bindCouponByCode_argsStandardScheme getScheme() {
        return new bindCouponByCode_argsStandardScheme();
      }
    }

    private static class bindCouponByCode_argsStandardScheme extends StandardScheme<bindCouponByCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindCouponByCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.Coupon.TParamsBindCouponByCode();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.att = new com.mia.Coupon.CommonParams();
                struct.att.read(iprot);
                struct.setAttIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindCouponByCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.att != null) {
          oprot.writeFieldBegin(ATT_FIELD_DESC);
          struct.att.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindCouponByCode_argsTupleSchemeFactory implements SchemeFactory {
      public bindCouponByCode_argsTupleScheme getScheme() {
        return new bindCouponByCode_argsTupleScheme();
      }
    }

    private static class bindCouponByCode_argsTupleScheme extends TupleScheme<bindCouponByCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindCouponByCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetAtt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetAtt()) {
          struct.att.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindCouponByCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.Coupon.TParamsBindCouponByCode();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.att = new com.mia.Coupon.CommonParams();
          struct.att.read(iprot);
          struct.setAttIsSet(true);
        }
      }
    }

  }

  public static class bindCouponByCode_result implements org.apache.thrift.TBase<bindCouponByCode_result, bindCouponByCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<bindCouponByCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindCouponByCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bindCouponByCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bindCouponByCode_resultTupleSchemeFactory());
    }

    public com.mia.Coupon.TResultBindCouponByCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TResultBindCouponByCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindCouponByCode_result.class, metaDataMap);
    }

    public bindCouponByCode_result() {
    }

    public bindCouponByCode_result(
      com.mia.Coupon.TResultBindCouponByCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindCouponByCode_result(bindCouponByCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.Coupon.TResultBindCouponByCode(other.success);
      }
    }

    public bindCouponByCode_result deepCopy() {
      return new bindCouponByCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.Coupon.TResultBindCouponByCode getSuccess() {
      return this.success;
    }

    public bindCouponByCode_result setSuccess(com.mia.Coupon.TResultBindCouponByCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.Coupon.TResultBindCouponByCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindCouponByCode_result)
        return this.equals((bindCouponByCode_result)that);
      return false;
    }

    public boolean equals(bindCouponByCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bindCouponByCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindCouponByCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindCouponByCode_resultStandardSchemeFactory implements SchemeFactory {
      public bindCouponByCode_resultStandardScheme getScheme() {
        return new bindCouponByCode_resultStandardScheme();
      }
    }

    private static class bindCouponByCode_resultStandardScheme extends StandardScheme<bindCouponByCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindCouponByCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.Coupon.TResultBindCouponByCode();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindCouponByCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindCouponByCode_resultTupleSchemeFactory implements SchemeFactory {
      public bindCouponByCode_resultTupleScheme getScheme() {
        return new bindCouponByCode_resultTupleScheme();
      }
    }

    private static class bindCouponByCode_resultTupleScheme extends TupleScheme<bindCouponByCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindCouponByCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindCouponByCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.Coupon.TResultBindCouponByCode();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class recoverCoupon_args implements org.apache.thrift.TBase<recoverCoupon_args, recoverCoupon_args._Fields>, java.io.Serializable, Cloneable, Comparable<recoverCoupon_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recoverCoupon_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ATT_FIELD_DESC = new org.apache.thrift.protocol.TField("att", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recoverCoupon_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recoverCoupon_argsTupleSchemeFactory());
    }

    public com.mia.Coupon.TParamsRecoverCoupon params; // required
    public com.mia.Coupon.CommonParams att; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      ATT((short)2, "att");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // ATT
            return ATT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TParamsRecoverCoupon.class)));
      tmpMap.put(_Fields.ATT, new org.apache.thrift.meta_data.FieldMetaData("att", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recoverCoupon_args.class, metaDataMap);
    }

    public recoverCoupon_args() {
    }

    public recoverCoupon_args(
      com.mia.Coupon.TParamsRecoverCoupon params,
      com.mia.Coupon.CommonParams att)
    {
      this();
      this.params = params;
      this.att = att;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recoverCoupon_args(recoverCoupon_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.Coupon.TParamsRecoverCoupon(other.params);
      }
      if (other.isSetAtt()) {
        this.att = new com.mia.Coupon.CommonParams(other.att);
      }
    }

    public recoverCoupon_args deepCopy() {
      return new recoverCoupon_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.att = null;
    }

    public com.mia.Coupon.TParamsRecoverCoupon getParams() {
      return this.params;
    }

    public recoverCoupon_args setParams(com.mia.Coupon.TParamsRecoverCoupon params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.Coupon.CommonParams getAtt() {
      return this.att;
    }

    public recoverCoupon_args setAtt(com.mia.Coupon.CommonParams att) {
      this.att = att;
      return this;
    }

    public void unsetAtt() {
      this.att = null;
    }

    /** Returns true if field att is set (has been assigned a value) and false otherwise */
    public boolean isSetAtt() {
      return this.att != null;
    }

    public void setAttIsSet(boolean value) {
      if (!value) {
        this.att = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.Coupon.TParamsRecoverCoupon)value);
        }
        break;

      case ATT:
        if (value == null) {
          unsetAtt();
        } else {
          setAtt((com.mia.Coupon.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case ATT:
        return getAtt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case ATT:
        return isSetAtt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recoverCoupon_args)
        return this.equals((recoverCoupon_args)that);
      return false;
    }

    public boolean equals(recoverCoupon_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_att = true && this.isSetAtt();
      boolean that_present_att = true && that.isSetAtt();
      if (this_present_att || that_present_att) {
        if (!(this_present_att && that_present_att))
          return false;
        if (!this.att.equals(that.att))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_att = true && (isSetAtt());
      list.add(present_att);
      if (present_att)
        list.add(att);

      return list.hashCode();
    }

    @Override
    public int compareTo(recoverCoupon_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAtt()).compareTo(other.isSetAtt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAtt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.att, other.att);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recoverCoupon_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("att:");
      if (this.att == null) {
        sb.append("null");
      } else {
        sb.append(this.att);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (att != null) {
        att.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recoverCoupon_argsStandardSchemeFactory implements SchemeFactory {
      public recoverCoupon_argsStandardScheme getScheme() {
        return new recoverCoupon_argsStandardScheme();
      }
    }

    private static class recoverCoupon_argsStandardScheme extends StandardScheme<recoverCoupon_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recoverCoupon_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.Coupon.TParamsRecoverCoupon();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.att = new com.mia.Coupon.CommonParams();
                struct.att.read(iprot);
                struct.setAttIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recoverCoupon_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.att != null) {
          oprot.writeFieldBegin(ATT_FIELD_DESC);
          struct.att.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recoverCoupon_argsTupleSchemeFactory implements SchemeFactory {
      public recoverCoupon_argsTupleScheme getScheme() {
        return new recoverCoupon_argsTupleScheme();
      }
    }

    private static class recoverCoupon_argsTupleScheme extends TupleScheme<recoverCoupon_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recoverCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetAtt()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetAtt()) {
          struct.att.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recoverCoupon_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.Coupon.TParamsRecoverCoupon();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.att = new com.mia.Coupon.CommonParams();
          struct.att.read(iprot);
          struct.setAttIsSet(true);
        }
      }
    }

  }

  public static class recoverCoupon_result implements org.apache.thrift.TBase<recoverCoupon_result, recoverCoupon_result._Fields>, java.io.Serializable, Cloneable, Comparable<recoverCoupon_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recoverCoupon_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recoverCoupon_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recoverCoupon_resultTupleSchemeFactory());
    }

    public com.mia.Coupon.TResultRecoverCoupon success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TResultRecoverCoupon.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recoverCoupon_result.class, metaDataMap);
    }

    public recoverCoupon_result() {
    }

    public recoverCoupon_result(
      com.mia.Coupon.TResultRecoverCoupon success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recoverCoupon_result(recoverCoupon_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.Coupon.TResultRecoverCoupon(other.success);
      }
    }

    public recoverCoupon_result deepCopy() {
      return new recoverCoupon_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.Coupon.TResultRecoverCoupon getSuccess() {
      return this.success;
    }

    public recoverCoupon_result setSuccess(com.mia.Coupon.TResultRecoverCoupon success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.Coupon.TResultRecoverCoupon)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recoverCoupon_result)
        return this.equals((recoverCoupon_result)that);
      return false;
    }

    public boolean equals(recoverCoupon_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(recoverCoupon_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recoverCoupon_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recoverCoupon_resultStandardSchemeFactory implements SchemeFactory {
      public recoverCoupon_resultStandardScheme getScheme() {
        return new recoverCoupon_resultStandardScheme();
      }
    }

    private static class recoverCoupon_resultStandardScheme extends StandardScheme<recoverCoupon_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recoverCoupon_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.Coupon.TResultRecoverCoupon();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recoverCoupon_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recoverCoupon_resultTupleSchemeFactory implements SchemeFactory {
      public recoverCoupon_resultTupleScheme getScheme() {
        return new recoverCoupon_resultTupleScheme();
      }
    }

    private static class recoverCoupon_resultTupleScheme extends TupleScheme<recoverCoupon_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recoverCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recoverCoupon_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.Coupon.TResultRecoverCoupon();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
