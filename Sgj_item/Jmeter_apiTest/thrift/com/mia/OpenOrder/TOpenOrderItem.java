/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.OpenOrder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-06")
public class TOpenOrderItem implements org.apache.thrift.TBase<TOpenOrderItem, TOpenOrderItem._Fields>, java.io.Serializable, Cloneable, Comparable<TOpenOrderItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOpenOrderItem");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemSize", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_PAY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemPayPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_TAX_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemTaxPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ITEM_SHIP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemShipPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TOpenOrderItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TOpenOrderItemTupleSchemeFactory());
  }

  public int itemId; // required
  public String itemSize; // required
  public int quantity; // required
  public double itemPayPrice; // required
  public double itemTaxPrice; // required
  public double itemShipPrice; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    ITEM_SIZE((short)2, "itemSize"),
    QUANTITY((short)3, "quantity"),
    ITEM_PAY_PRICE((short)4, "itemPayPrice"),
    ITEM_TAX_PRICE((short)5, "itemTaxPrice"),
    ITEM_SHIP_PRICE((short)6, "itemShipPrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // ITEM_SIZE
          return ITEM_SIZE;
        case 3: // QUANTITY
          return QUANTITY;
        case 4: // ITEM_PAY_PRICE
          return ITEM_PAY_PRICE;
        case 5: // ITEM_TAX_PRICE
          return ITEM_TAX_PRICE;
        case 6: // ITEM_SHIP_PRICE
          return ITEM_SHIP_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMID_ISSET_ID = 0;
  private static final int __QUANTITY_ISSET_ID = 1;
  private static final int __ITEMPAYPRICE_ISSET_ID = 2;
  private static final int __ITEMTAXPRICE_ISSET_ID = 3;
  private static final int __ITEMSHIPPRICE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_SIZE, new org.apache.thrift.meta_data.FieldMetaData("itemSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_PAY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("itemPayPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ITEM_TAX_PRICE, new org.apache.thrift.meta_data.FieldMetaData("itemTaxPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ITEM_SHIP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("itemShipPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOpenOrderItem.class, metaDataMap);
  }

  public TOpenOrderItem() {
  }

  public TOpenOrderItem(
    int itemId,
    String itemSize,
    int quantity,
    double itemPayPrice,
    double itemTaxPrice,
    double itemShipPrice)
  {
    this();
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.itemSize = itemSize;
    this.quantity = quantity;
    setQuantityIsSet(true);
    this.itemPayPrice = itemPayPrice;
    setItemPayPriceIsSet(true);
    this.itemTaxPrice = itemTaxPrice;
    setItemTaxPriceIsSet(true);
    this.itemShipPrice = itemShipPrice;
    setItemShipPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOpenOrderItem(TOpenOrderItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.itemId = other.itemId;
    if (other.isSetItemSize()) {
      this.itemSize = other.itemSize;
    }
    this.quantity = other.quantity;
    this.itemPayPrice = other.itemPayPrice;
    this.itemTaxPrice = other.itemTaxPrice;
    this.itemShipPrice = other.itemShipPrice;
  }

  public TOpenOrderItem deepCopy() {
    return new TOpenOrderItem(this);
  }

  @Override
  public void clear() {
    setItemIdIsSet(false);
    this.itemId = 0;
    this.itemSize = null;
    setQuantityIsSet(false);
    this.quantity = 0;
    setItemPayPriceIsSet(false);
    this.itemPayPrice = 0.0;
    setItemTaxPriceIsSet(false);
    this.itemTaxPrice = 0.0;
    setItemShipPriceIsSet(false);
    this.itemShipPrice = 0.0;
  }

  public int getItemId() {
    return this.itemId;
  }

  public TOpenOrderItem setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public String getItemSize() {
    return this.itemSize;
  }

  public TOpenOrderItem setItemSize(String itemSize) {
    this.itemSize = itemSize;
    return this;
  }

  public void unsetItemSize() {
    this.itemSize = null;
  }

  /** Returns true if field itemSize is set (has been assigned a value) and false otherwise */
  public boolean isSetItemSize() {
    return this.itemSize != null;
  }

  public void setItemSizeIsSet(boolean value) {
    if (!value) {
      this.itemSize = null;
    }
  }

  public int getQuantity() {
    return this.quantity;
  }

  public TOpenOrderItem setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public double getItemPayPrice() {
    return this.itemPayPrice;
  }

  public TOpenOrderItem setItemPayPrice(double itemPayPrice) {
    this.itemPayPrice = itemPayPrice;
    setItemPayPriceIsSet(true);
    return this;
  }

  public void unsetItemPayPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMPAYPRICE_ISSET_ID);
  }

  /** Returns true if field itemPayPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetItemPayPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMPAYPRICE_ISSET_ID);
  }

  public void setItemPayPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMPAYPRICE_ISSET_ID, value);
  }

  public double getItemTaxPrice() {
    return this.itemTaxPrice;
  }

  public TOpenOrderItem setItemTaxPrice(double itemTaxPrice) {
    this.itemTaxPrice = itemTaxPrice;
    setItemTaxPriceIsSet(true);
    return this;
  }

  public void unsetItemTaxPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMTAXPRICE_ISSET_ID);
  }

  /** Returns true if field itemTaxPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetItemTaxPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMTAXPRICE_ISSET_ID);
  }

  public void setItemTaxPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMTAXPRICE_ISSET_ID, value);
  }

  public double getItemShipPrice() {
    return this.itemShipPrice;
  }

  public TOpenOrderItem setItemShipPrice(double itemShipPrice) {
    this.itemShipPrice = itemShipPrice;
    setItemShipPriceIsSet(true);
    return this;
  }

  public void unsetItemShipPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMSHIPPRICE_ISSET_ID);
  }

  /** Returns true if field itemShipPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetItemShipPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMSHIPPRICE_ISSET_ID);
  }

  public void setItemShipPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMSHIPPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case ITEM_SIZE:
      if (value == null) {
        unsetItemSize();
      } else {
        setItemSize((String)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case ITEM_PAY_PRICE:
      if (value == null) {
        unsetItemPayPrice();
      } else {
        setItemPayPrice((Double)value);
      }
      break;

    case ITEM_TAX_PRICE:
      if (value == null) {
        unsetItemTaxPrice();
      } else {
        setItemTaxPrice((Double)value);
      }
      break;

    case ITEM_SHIP_PRICE:
      if (value == null) {
        unsetItemShipPrice();
      } else {
        setItemShipPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return getItemId();

    case ITEM_SIZE:
      return getItemSize();

    case QUANTITY:
      return getQuantity();

    case ITEM_PAY_PRICE:
      return getItemPayPrice();

    case ITEM_TAX_PRICE:
      return getItemTaxPrice();

    case ITEM_SHIP_PRICE:
      return getItemShipPrice();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case ITEM_SIZE:
      return isSetItemSize();
    case QUANTITY:
      return isSetQuantity();
    case ITEM_PAY_PRICE:
      return isSetItemPayPrice();
    case ITEM_TAX_PRICE:
      return isSetItemTaxPrice();
    case ITEM_SHIP_PRICE:
      return isSetItemShipPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TOpenOrderItem)
      return this.equals((TOpenOrderItem)that);
    return false;
  }

  public boolean equals(TOpenOrderItem that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_itemSize = true && this.isSetItemSize();
    boolean that_present_itemSize = true && that.isSetItemSize();
    if (this_present_itemSize || that_present_itemSize) {
      if (!(this_present_itemSize && that_present_itemSize))
        return false;
      if (!this.itemSize.equals(that.itemSize))
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_itemPayPrice = true;
    boolean that_present_itemPayPrice = true;
    if (this_present_itemPayPrice || that_present_itemPayPrice) {
      if (!(this_present_itemPayPrice && that_present_itemPayPrice))
        return false;
      if (this.itemPayPrice != that.itemPayPrice)
        return false;
    }

    boolean this_present_itemTaxPrice = true;
    boolean that_present_itemTaxPrice = true;
    if (this_present_itemTaxPrice || that_present_itemTaxPrice) {
      if (!(this_present_itemTaxPrice && that_present_itemTaxPrice))
        return false;
      if (this.itemTaxPrice != that.itemTaxPrice)
        return false;
    }

    boolean this_present_itemShipPrice = true;
    boolean that_present_itemShipPrice = true;
    if (this_present_itemShipPrice || that_present_itemShipPrice) {
      if (!(this_present_itemShipPrice && that_present_itemShipPrice))
        return false;
      if (this.itemShipPrice != that.itemShipPrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_itemId = true;
    list.add(present_itemId);
    if (present_itemId)
      list.add(itemId);

    boolean present_itemSize = true && (isSetItemSize());
    list.add(present_itemSize);
    if (present_itemSize)
      list.add(itemSize);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    boolean present_itemPayPrice = true;
    list.add(present_itemPayPrice);
    if (present_itemPayPrice)
      list.add(itemPayPrice);

    boolean present_itemTaxPrice = true;
    list.add(present_itemTaxPrice);
    if (present_itemTaxPrice)
      list.add(itemTaxPrice);

    boolean present_itemShipPrice = true;
    list.add(present_itemShipPrice);
    if (present_itemShipPrice)
      list.add(itemShipPrice);

    return list.hashCode();
  }

  @Override
  public int compareTo(TOpenOrderItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemSize()).compareTo(other.isSetItemSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemSize, other.itemSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemPayPrice()).compareTo(other.isSetItemPayPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemPayPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemPayPrice, other.itemPayPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemTaxPrice()).compareTo(other.isSetItemTaxPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemTaxPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemTaxPrice, other.itemTaxPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemShipPrice()).compareTo(other.isSetItemShipPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemShipPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemShipPrice, other.itemShipPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TOpenOrderItem(");
    boolean first = true;

    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemSize:");
    if (this.itemSize == null) {
      sb.append("null");
    } else {
      sb.append(this.itemSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemPayPrice:");
    sb.append(this.itemPayPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemTaxPrice:");
    sb.append(this.itemTaxPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemShipPrice:");
    sb.append(this.itemShipPrice);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOpenOrderItemStandardSchemeFactory implements SchemeFactory {
    public TOpenOrderItemStandardScheme getScheme() {
      return new TOpenOrderItemStandardScheme();
    }
  }

  private static class TOpenOrderItemStandardScheme extends StandardScheme<TOpenOrderItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TOpenOrderItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemSize = iprot.readString();
              struct.setItemSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_PAY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.itemPayPrice = iprot.readDouble();
              struct.setItemPayPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEM_TAX_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.itemTaxPrice = iprot.readDouble();
              struct.setItemTaxPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ITEM_SHIP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.itemShipPrice = iprot.readDouble();
              struct.setItemShipPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TOpenOrderItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      if (struct.itemSize != null) {
        oprot.writeFieldBegin(ITEM_SIZE_FIELD_DESC);
        oprot.writeString(struct.itemSize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_PAY_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.itemPayPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_TAX_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.itemTaxPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_SHIP_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.itemShipPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOpenOrderItemTupleSchemeFactory implements SchemeFactory {
    public TOpenOrderItemTupleScheme getScheme() {
      return new TOpenOrderItemTupleScheme();
    }
  }

  private static class TOpenOrderItemTupleScheme extends TupleScheme<TOpenOrderItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOpenOrderItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemId()) {
        optionals.set(0);
      }
      if (struct.isSetItemSize()) {
        optionals.set(1);
      }
      if (struct.isSetQuantity()) {
        optionals.set(2);
      }
      if (struct.isSetItemPayPrice()) {
        optionals.set(3);
      }
      if (struct.isSetItemTaxPrice()) {
        optionals.set(4);
      }
      if (struct.isSetItemShipPrice()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetItemSize()) {
        oprot.writeString(struct.itemSize);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetItemPayPrice()) {
        oprot.writeDouble(struct.itemPayPrice);
      }
      if (struct.isSetItemTaxPrice()) {
        oprot.writeDouble(struct.itemTaxPrice);
      }
      if (struct.isSetItemShipPrice()) {
        oprot.writeDouble(struct.itemShipPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOpenOrderItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemSize = iprot.readString();
        struct.setItemSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.itemPayPrice = iprot.readDouble();
        struct.setItemPayPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.itemTaxPrice = iprot.readDouble();
        struct.setItemTaxPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.itemShipPrice = iprot.readDouble();
        struct.setItemShipPriceIsSet(true);
      }
    }
  }

}

