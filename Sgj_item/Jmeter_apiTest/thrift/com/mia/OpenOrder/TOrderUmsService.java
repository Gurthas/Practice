/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.OpenOrder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-06")
public class TOrderUmsService {

  public interface Iface {

    public com.mia.OpenOrder.TResultCancelOrder cancelOrderForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException;

    public com.mia.OpenOrder.TResultCancelOrder cancelVirtualOrderForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException;

    public com.mia.OpenOrder.TResultCancelOrder cancelOrderItemForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException;

    public com.mia.OpenOrder.TResultOpenOrderCreate openOrderCreate(com.mia.OpenOrder.TParamsOpenOrderCreate params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException;

    public com.mia.OpenOrder.TResultPing ping(com.mia.OpenOrder.TParamsPing param) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void cancelOrderForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelVirtualOrderForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelOrderItemForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openOrderCreate(com.mia.OpenOrder.TParamsOpenOrderCreate params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ping(com.mia.OpenOrder.TParamsPing param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.mia.OpenOrder.TResultCancelOrder cancelOrderForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException
    {
      send_cancelOrderForBackEndSystem(params, cParams);
      return recv_cancelOrderForBackEndSystem();
    }

    public void send_cancelOrderForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException
    {
      cancelOrderForBackEndSystem_args args = new cancelOrderForBackEndSystem_args();
      args.setParams(params);
      args.setCParams(cParams);
      sendBase("cancelOrderForBackEndSystem", args);
    }

    public com.mia.OpenOrder.TResultCancelOrder recv_cancelOrderForBackEndSystem() throws org.apache.thrift.TException
    {
      cancelOrderForBackEndSystem_result result = new cancelOrderForBackEndSystem_result();
      receiveBase(result, "cancelOrderForBackEndSystem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelOrderForBackEndSystem failed: unknown result");
    }

    public com.mia.OpenOrder.TResultCancelOrder cancelVirtualOrderForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException
    {
      send_cancelVirtualOrderForBackEndSystem(params, cParams);
      return recv_cancelVirtualOrderForBackEndSystem();
    }

    public void send_cancelVirtualOrderForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException
    {
      cancelVirtualOrderForBackEndSystem_args args = new cancelVirtualOrderForBackEndSystem_args();
      args.setParams(params);
      args.setCParams(cParams);
      sendBase("cancelVirtualOrderForBackEndSystem", args);
    }

    public com.mia.OpenOrder.TResultCancelOrder recv_cancelVirtualOrderForBackEndSystem() throws org.apache.thrift.TException
    {
      cancelVirtualOrderForBackEndSystem_result result = new cancelVirtualOrderForBackEndSystem_result();
      receiveBase(result, "cancelVirtualOrderForBackEndSystem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelVirtualOrderForBackEndSystem failed: unknown result");
    }

    public com.mia.OpenOrder.TResultCancelOrder cancelOrderItemForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException
    {
      send_cancelOrderItemForBackEndSystem(params, cParams);
      return recv_cancelOrderItemForBackEndSystem();
    }

    public void send_cancelOrderItemForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException
    {
      cancelOrderItemForBackEndSystem_args args = new cancelOrderItemForBackEndSystem_args();
      args.setParams(params);
      args.setCParams(cParams);
      sendBase("cancelOrderItemForBackEndSystem", args);
    }

    public com.mia.OpenOrder.TResultCancelOrder recv_cancelOrderItemForBackEndSystem() throws org.apache.thrift.TException
    {
      cancelOrderItemForBackEndSystem_result result = new cancelOrderItemForBackEndSystem_result();
      receiveBase(result, "cancelOrderItemForBackEndSystem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelOrderItemForBackEndSystem failed: unknown result");
    }

    public com.mia.OpenOrder.TResultOpenOrderCreate openOrderCreate(com.mia.OpenOrder.TParamsOpenOrderCreate params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException
    {
      send_openOrderCreate(params, cParams);
      return recv_openOrderCreate();
    }

    public void send_openOrderCreate(com.mia.OpenOrder.TParamsOpenOrderCreate params, com.mia.OpenOrder.CommonParams cParams) throws org.apache.thrift.TException
    {
      openOrderCreate_args args = new openOrderCreate_args();
      args.setParams(params);
      args.setCParams(cParams);
      sendBase("openOrderCreate", args);
    }

    public com.mia.OpenOrder.TResultOpenOrderCreate recv_openOrderCreate() throws org.apache.thrift.TException
    {
      openOrderCreate_result result = new openOrderCreate_result();
      receiveBase(result, "openOrderCreate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openOrderCreate failed: unknown result");
    }

    public com.mia.OpenOrder.TResultPing ping(com.mia.OpenOrder.TParamsPing param) throws org.apache.thrift.TException
    {
      send_ping(param);
      return recv_ping();
    }

    public void send_ping(com.mia.OpenOrder.TParamsPing param) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setParam(param);
      sendBase("ping", args);
    }

    public com.mia.OpenOrder.TResultPing recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void cancelOrderForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelOrderForBackEndSystem_call method_call = new cancelOrderForBackEndSystem_call(params, cParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelOrderForBackEndSystem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params;
      private com.mia.OpenOrder.CommonParams cParams;
      public cancelOrderForBackEndSystem_call(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.cParams = cParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelOrderForBackEndSystem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelOrderForBackEndSystem_args args = new cancelOrderForBackEndSystem_args();
        args.setParams(params);
        args.setCParams(cParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.OpenOrder.TResultCancelOrder getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelOrderForBackEndSystem();
      }
    }

    public void cancelVirtualOrderForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelVirtualOrderForBackEndSystem_call method_call = new cancelVirtualOrderForBackEndSystem_call(params, cParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelVirtualOrderForBackEndSystem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params;
      private com.mia.OpenOrder.CommonParams cParams;
      public cancelVirtualOrderForBackEndSystem_call(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.cParams = cParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelVirtualOrderForBackEndSystem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelVirtualOrderForBackEndSystem_args args = new cancelVirtualOrderForBackEndSystem_args();
        args.setParams(params);
        args.setCParams(cParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.OpenOrder.TResultCancelOrder getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelVirtualOrderForBackEndSystem();
      }
    }

    public void cancelOrderItemForBackEndSystem(com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelOrderItemForBackEndSystem_call method_call = new cancelOrderItemForBackEndSystem_call(params, cParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelOrderItemForBackEndSystem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem params;
      private com.mia.OpenOrder.CommonParams cParams;
      public cancelOrderItemForBackEndSystem_call(com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.cParams = cParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelOrderItemForBackEndSystem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelOrderItemForBackEndSystem_args args = new cancelOrderItemForBackEndSystem_args();
        args.setParams(params);
        args.setCParams(cParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.OpenOrder.TResultCancelOrder getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelOrderItemForBackEndSystem();
      }
    }

    public void openOrderCreate(com.mia.OpenOrder.TParamsOpenOrderCreate params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openOrderCreate_call method_call = new openOrderCreate_call(params, cParams, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openOrderCreate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.OpenOrder.TParamsOpenOrderCreate params;
      private com.mia.OpenOrder.CommonParams cParams;
      public openOrderCreate_call(com.mia.OpenOrder.TParamsOpenOrderCreate params, com.mia.OpenOrder.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.params = params;
        this.cParams = cParams;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openOrderCreate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openOrderCreate_args args = new openOrderCreate_args();
        args.setParams(params);
        args.setCParams(cParams);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.OpenOrder.TResultOpenOrderCreate getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openOrderCreate();
      }
    }

    public void ping(com.mia.OpenOrder.TParamsPing param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.mia.OpenOrder.TParamsPing param;
      public ping_call(com.mia.OpenOrder.TParamsPing param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.mia.OpenOrder.TResultPing getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("cancelOrderForBackEndSystem", new cancelOrderForBackEndSystem());
      processMap.put("cancelVirtualOrderForBackEndSystem", new cancelVirtualOrderForBackEndSystem());
      processMap.put("cancelOrderItemForBackEndSystem", new cancelOrderItemForBackEndSystem());
      processMap.put("openOrderCreate", new openOrderCreate());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class cancelOrderForBackEndSystem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelOrderForBackEndSystem_args> {
      public cancelOrderForBackEndSystem() {
        super("cancelOrderForBackEndSystem");
      }

      public cancelOrderForBackEndSystem_args getEmptyArgsInstance() {
        return new cancelOrderForBackEndSystem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelOrderForBackEndSystem_result getResult(I iface, cancelOrderForBackEndSystem_args args) throws org.apache.thrift.TException {
        cancelOrderForBackEndSystem_result result = new cancelOrderForBackEndSystem_result();
        result.success = iface.cancelOrderForBackEndSystem(args.params, args.cParams);
        return result;
      }
    }

    public static class cancelVirtualOrderForBackEndSystem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelVirtualOrderForBackEndSystem_args> {
      public cancelVirtualOrderForBackEndSystem() {
        super("cancelVirtualOrderForBackEndSystem");
      }

      public cancelVirtualOrderForBackEndSystem_args getEmptyArgsInstance() {
        return new cancelVirtualOrderForBackEndSystem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelVirtualOrderForBackEndSystem_result getResult(I iface, cancelVirtualOrderForBackEndSystem_args args) throws org.apache.thrift.TException {
        cancelVirtualOrderForBackEndSystem_result result = new cancelVirtualOrderForBackEndSystem_result();
        result.success = iface.cancelVirtualOrderForBackEndSystem(args.params, args.cParams);
        return result;
      }
    }

    public static class cancelOrderItemForBackEndSystem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelOrderItemForBackEndSystem_args> {
      public cancelOrderItemForBackEndSystem() {
        super("cancelOrderItemForBackEndSystem");
      }

      public cancelOrderItemForBackEndSystem_args getEmptyArgsInstance() {
        return new cancelOrderItemForBackEndSystem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelOrderItemForBackEndSystem_result getResult(I iface, cancelOrderItemForBackEndSystem_args args) throws org.apache.thrift.TException {
        cancelOrderItemForBackEndSystem_result result = new cancelOrderItemForBackEndSystem_result();
        result.success = iface.cancelOrderItemForBackEndSystem(args.params, args.cParams);
        return result;
      }
    }

    public static class openOrderCreate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openOrderCreate_args> {
      public openOrderCreate() {
        super("openOrderCreate");
      }

      public openOrderCreate_args getEmptyArgsInstance() {
        return new openOrderCreate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openOrderCreate_result getResult(I iface, openOrderCreate_args args) throws org.apache.thrift.TException {
        openOrderCreate_result result = new openOrderCreate_result();
        result.success = iface.openOrderCreate(args.params, args.cParams);
        return result;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping(args.param);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("cancelOrderForBackEndSystem", new cancelOrderForBackEndSystem());
      processMap.put("cancelVirtualOrderForBackEndSystem", new cancelVirtualOrderForBackEndSystem());
      processMap.put("cancelOrderItemForBackEndSystem", new cancelOrderItemForBackEndSystem());
      processMap.put("openOrderCreate", new openOrderCreate());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class cancelOrderForBackEndSystem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelOrderForBackEndSystem_args, com.mia.OpenOrder.TResultCancelOrder> {
      public cancelOrderForBackEndSystem() {
        super("cancelOrderForBackEndSystem");
      }

      public cancelOrderForBackEndSystem_args getEmptyArgsInstance() {
        return new cancelOrderForBackEndSystem_args();
      }

      public AsyncMethodCallback<com.mia.OpenOrder.TResultCancelOrder> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.OpenOrder.TResultCancelOrder>() { 
          public void onComplete(com.mia.OpenOrder.TResultCancelOrder o) {
            cancelOrderForBackEndSystem_result result = new cancelOrderForBackEndSystem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelOrderForBackEndSystem_result result = new cancelOrderForBackEndSystem_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelOrderForBackEndSystem_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.OpenOrder.TResultCancelOrder> resultHandler) throws TException {
        iface.cancelOrderForBackEndSystem(args.params, args.cParams,resultHandler);
      }
    }

    public static class cancelVirtualOrderForBackEndSystem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelVirtualOrderForBackEndSystem_args, com.mia.OpenOrder.TResultCancelOrder> {
      public cancelVirtualOrderForBackEndSystem() {
        super("cancelVirtualOrderForBackEndSystem");
      }

      public cancelVirtualOrderForBackEndSystem_args getEmptyArgsInstance() {
        return new cancelVirtualOrderForBackEndSystem_args();
      }

      public AsyncMethodCallback<com.mia.OpenOrder.TResultCancelOrder> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.OpenOrder.TResultCancelOrder>() { 
          public void onComplete(com.mia.OpenOrder.TResultCancelOrder o) {
            cancelVirtualOrderForBackEndSystem_result result = new cancelVirtualOrderForBackEndSystem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelVirtualOrderForBackEndSystem_result result = new cancelVirtualOrderForBackEndSystem_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelVirtualOrderForBackEndSystem_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.OpenOrder.TResultCancelOrder> resultHandler) throws TException {
        iface.cancelVirtualOrderForBackEndSystem(args.params, args.cParams,resultHandler);
      }
    }

    public static class cancelOrderItemForBackEndSystem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelOrderItemForBackEndSystem_args, com.mia.OpenOrder.TResultCancelOrder> {
      public cancelOrderItemForBackEndSystem() {
        super("cancelOrderItemForBackEndSystem");
      }

      public cancelOrderItemForBackEndSystem_args getEmptyArgsInstance() {
        return new cancelOrderItemForBackEndSystem_args();
      }

      public AsyncMethodCallback<com.mia.OpenOrder.TResultCancelOrder> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.OpenOrder.TResultCancelOrder>() { 
          public void onComplete(com.mia.OpenOrder.TResultCancelOrder o) {
            cancelOrderItemForBackEndSystem_result result = new cancelOrderItemForBackEndSystem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelOrderItemForBackEndSystem_result result = new cancelOrderItemForBackEndSystem_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelOrderItemForBackEndSystem_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.OpenOrder.TResultCancelOrder> resultHandler) throws TException {
        iface.cancelOrderItemForBackEndSystem(args.params, args.cParams,resultHandler);
      }
    }

    public static class openOrderCreate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openOrderCreate_args, com.mia.OpenOrder.TResultOpenOrderCreate> {
      public openOrderCreate() {
        super("openOrderCreate");
      }

      public openOrderCreate_args getEmptyArgsInstance() {
        return new openOrderCreate_args();
      }

      public AsyncMethodCallback<com.mia.OpenOrder.TResultOpenOrderCreate> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.OpenOrder.TResultOpenOrderCreate>() { 
          public void onComplete(com.mia.OpenOrder.TResultOpenOrderCreate o) {
            openOrderCreate_result result = new openOrderCreate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openOrderCreate_result result = new openOrderCreate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openOrderCreate_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.OpenOrder.TResultOpenOrderCreate> resultHandler) throws TException {
        iface.openOrderCreate(args.params, args.cParams,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, com.mia.OpenOrder.TResultPing> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<com.mia.OpenOrder.TResultPing> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.mia.OpenOrder.TResultPing>() { 
          public void onComplete(com.mia.OpenOrder.TResultPing o) {
            ping_result result = new ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<com.mia.OpenOrder.TResultPing> resultHandler) throws TException {
        iface.ping(args.param,resultHandler);
      }
    }

  }

  public static class cancelOrderForBackEndSystem_args implements org.apache.thrift.TBase<cancelOrderForBackEndSystem_args, cancelOrderForBackEndSystem_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelOrderForBackEndSystem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelOrderForBackEndSystem_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField C_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("cParams", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelOrderForBackEndSystem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelOrderForBackEndSystem_argsTupleSchemeFactory());
    }

    public com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params; // required
    public com.mia.OpenOrder.CommonParams cParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      C_PARAMS((short)2, "cParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // C_PARAMS
            return C_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem.class)));
      tmpMap.put(_Fields.C_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("cParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrderForBackEndSystem_args.class, metaDataMap);
    }

    public cancelOrderForBackEndSystem_args() {
    }

    public cancelOrderForBackEndSystem_args(
      com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params,
      com.mia.OpenOrder.CommonParams cParams)
    {
      this();
      this.params = params;
      this.cParams = cParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelOrderForBackEndSystem_args(cancelOrderForBackEndSystem_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem(other.params);
      }
      if (other.isSetCParams()) {
        this.cParams = new com.mia.OpenOrder.CommonParams(other.cParams);
      }
    }

    public cancelOrderForBackEndSystem_args deepCopy() {
      return new cancelOrderForBackEndSystem_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.cParams = null;
    }

    public com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem getParams() {
      return this.params;
    }

    public cancelOrderForBackEndSystem_args setParams(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.OpenOrder.CommonParams getCParams() {
      return this.cParams;
    }

    public cancelOrderForBackEndSystem_args setCParams(com.mia.OpenOrder.CommonParams cParams) {
      this.cParams = cParams;
      return this;
    }

    public void unsetCParams() {
      this.cParams = null;
    }

    /** Returns true if field cParams is set (has been assigned a value) and false otherwise */
    public boolean isSetCParams() {
      return this.cParams != null;
    }

    public void setCParamsIsSet(boolean value) {
      if (!value) {
        this.cParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem)value);
        }
        break;

      case C_PARAMS:
        if (value == null) {
          unsetCParams();
        } else {
          setCParams((com.mia.OpenOrder.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case C_PARAMS:
        return getCParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case C_PARAMS:
        return isSetCParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelOrderForBackEndSystem_args)
        return this.equals((cancelOrderForBackEndSystem_args)that);
      return false;
    }

    public boolean equals(cancelOrderForBackEndSystem_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_cParams = true && this.isSetCParams();
      boolean that_present_cParams = true && that.isSetCParams();
      if (this_present_cParams || that_present_cParams) {
        if (!(this_present_cParams && that_present_cParams))
          return false;
        if (!this.cParams.equals(that.cParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_cParams = true && (isSetCParams());
      list.add(present_cParams);
      if (present_cParams)
        list.add(cParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelOrderForBackEndSystem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCParams()).compareTo(other.isSetCParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cParams, other.cParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelOrderForBackEndSystem_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cParams:");
      if (this.cParams == null) {
        sb.append("null");
      } else {
        sb.append(this.cParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (cParams != null) {
        cParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelOrderForBackEndSystem_argsStandardSchemeFactory implements SchemeFactory {
      public cancelOrderForBackEndSystem_argsStandardScheme getScheme() {
        return new cancelOrderForBackEndSystem_argsStandardScheme();
      }
    }

    private static class cancelOrderForBackEndSystem_argsStandardScheme extends StandardScheme<cancelOrderForBackEndSystem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrderForBackEndSystem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cParams = new com.mia.OpenOrder.CommonParams();
                struct.cParams.read(iprot);
                struct.setCParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrderForBackEndSystem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cParams != null) {
          oprot.writeFieldBegin(C_PARAMS_FIELD_DESC);
          struct.cParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelOrderForBackEndSystem_argsTupleSchemeFactory implements SchemeFactory {
      public cancelOrderForBackEndSystem_argsTupleScheme getScheme() {
        return new cancelOrderForBackEndSystem_argsTupleScheme();
      }
    }

    private static class cancelOrderForBackEndSystem_argsTupleScheme extends TupleScheme<cancelOrderForBackEndSystem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrderForBackEndSystem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetCParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetCParams()) {
          struct.cParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrderForBackEndSystem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cParams = new com.mia.OpenOrder.CommonParams();
          struct.cParams.read(iprot);
          struct.setCParamsIsSet(true);
        }
      }
    }

  }

  public static class cancelOrderForBackEndSystem_result implements org.apache.thrift.TBase<cancelOrderForBackEndSystem_result, cancelOrderForBackEndSystem_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelOrderForBackEndSystem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelOrderForBackEndSystem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelOrderForBackEndSystem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelOrderForBackEndSystem_resultTupleSchemeFactory());
    }

    public com.mia.OpenOrder.TResultCancelOrder success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.TResultCancelOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrderForBackEndSystem_result.class, metaDataMap);
    }

    public cancelOrderForBackEndSystem_result() {
    }

    public cancelOrderForBackEndSystem_result(
      com.mia.OpenOrder.TResultCancelOrder success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelOrderForBackEndSystem_result(cancelOrderForBackEndSystem_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.OpenOrder.TResultCancelOrder(other.success);
      }
    }

    public cancelOrderForBackEndSystem_result deepCopy() {
      return new cancelOrderForBackEndSystem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.OpenOrder.TResultCancelOrder getSuccess() {
      return this.success;
    }

    public cancelOrderForBackEndSystem_result setSuccess(com.mia.OpenOrder.TResultCancelOrder success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.OpenOrder.TResultCancelOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelOrderForBackEndSystem_result)
        return this.equals((cancelOrderForBackEndSystem_result)that);
      return false;
    }

    public boolean equals(cancelOrderForBackEndSystem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelOrderForBackEndSystem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelOrderForBackEndSystem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelOrderForBackEndSystem_resultStandardSchemeFactory implements SchemeFactory {
      public cancelOrderForBackEndSystem_resultStandardScheme getScheme() {
        return new cancelOrderForBackEndSystem_resultStandardScheme();
      }
    }

    private static class cancelOrderForBackEndSystem_resultStandardScheme extends StandardScheme<cancelOrderForBackEndSystem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrderForBackEndSystem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.OpenOrder.TResultCancelOrder();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrderForBackEndSystem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelOrderForBackEndSystem_resultTupleSchemeFactory implements SchemeFactory {
      public cancelOrderForBackEndSystem_resultTupleScheme getScheme() {
        return new cancelOrderForBackEndSystem_resultTupleScheme();
      }
    }

    private static class cancelOrderForBackEndSystem_resultTupleScheme extends TupleScheme<cancelOrderForBackEndSystem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrderForBackEndSystem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrderForBackEndSystem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.OpenOrder.TResultCancelOrder();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelVirtualOrderForBackEndSystem_args implements org.apache.thrift.TBase<cancelVirtualOrderForBackEndSystem_args, cancelVirtualOrderForBackEndSystem_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelVirtualOrderForBackEndSystem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelVirtualOrderForBackEndSystem_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField C_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("cParams", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelVirtualOrderForBackEndSystem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelVirtualOrderForBackEndSystem_argsTupleSchemeFactory());
    }

    public com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params; // required
    public com.mia.OpenOrder.CommonParams cParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      C_PARAMS((short)2, "cParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // C_PARAMS
            return C_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem.class)));
      tmpMap.put(_Fields.C_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("cParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelVirtualOrderForBackEndSystem_args.class, metaDataMap);
    }

    public cancelVirtualOrderForBackEndSystem_args() {
    }

    public cancelVirtualOrderForBackEndSystem_args(
      com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params,
      com.mia.OpenOrder.CommonParams cParams)
    {
      this();
      this.params = params;
      this.cParams = cParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelVirtualOrderForBackEndSystem_args(cancelVirtualOrderForBackEndSystem_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem(other.params);
      }
      if (other.isSetCParams()) {
        this.cParams = new com.mia.OpenOrder.CommonParams(other.cParams);
      }
    }

    public cancelVirtualOrderForBackEndSystem_args deepCopy() {
      return new cancelVirtualOrderForBackEndSystem_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.cParams = null;
    }

    public com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem getParams() {
      return this.params;
    }

    public cancelVirtualOrderForBackEndSystem_args setParams(com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.OpenOrder.CommonParams getCParams() {
      return this.cParams;
    }

    public cancelVirtualOrderForBackEndSystem_args setCParams(com.mia.OpenOrder.CommonParams cParams) {
      this.cParams = cParams;
      return this;
    }

    public void unsetCParams() {
      this.cParams = null;
    }

    /** Returns true if field cParams is set (has been assigned a value) and false otherwise */
    public boolean isSetCParams() {
      return this.cParams != null;
    }

    public void setCParamsIsSet(boolean value) {
      if (!value) {
        this.cParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem)value);
        }
        break;

      case C_PARAMS:
        if (value == null) {
          unsetCParams();
        } else {
          setCParams((com.mia.OpenOrder.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case C_PARAMS:
        return getCParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case C_PARAMS:
        return isSetCParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelVirtualOrderForBackEndSystem_args)
        return this.equals((cancelVirtualOrderForBackEndSystem_args)that);
      return false;
    }

    public boolean equals(cancelVirtualOrderForBackEndSystem_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_cParams = true && this.isSetCParams();
      boolean that_present_cParams = true && that.isSetCParams();
      if (this_present_cParams || that_present_cParams) {
        if (!(this_present_cParams && that_present_cParams))
          return false;
        if (!this.cParams.equals(that.cParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_cParams = true && (isSetCParams());
      list.add(present_cParams);
      if (present_cParams)
        list.add(cParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelVirtualOrderForBackEndSystem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCParams()).compareTo(other.isSetCParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cParams, other.cParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelVirtualOrderForBackEndSystem_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cParams:");
      if (this.cParams == null) {
        sb.append("null");
      } else {
        sb.append(this.cParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (cParams != null) {
        cParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelVirtualOrderForBackEndSystem_argsStandardSchemeFactory implements SchemeFactory {
      public cancelVirtualOrderForBackEndSystem_argsStandardScheme getScheme() {
        return new cancelVirtualOrderForBackEndSystem_argsStandardScheme();
      }
    }

    private static class cancelVirtualOrderForBackEndSystem_argsStandardScheme extends StandardScheme<cancelVirtualOrderForBackEndSystem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelVirtualOrderForBackEndSystem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cParams = new com.mia.OpenOrder.CommonParams();
                struct.cParams.read(iprot);
                struct.setCParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelVirtualOrderForBackEndSystem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cParams != null) {
          oprot.writeFieldBegin(C_PARAMS_FIELD_DESC);
          struct.cParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelVirtualOrderForBackEndSystem_argsTupleSchemeFactory implements SchemeFactory {
      public cancelVirtualOrderForBackEndSystem_argsTupleScheme getScheme() {
        return new cancelVirtualOrderForBackEndSystem_argsTupleScheme();
      }
    }

    private static class cancelVirtualOrderForBackEndSystem_argsTupleScheme extends TupleScheme<cancelVirtualOrderForBackEndSystem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelVirtualOrderForBackEndSystem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetCParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetCParams()) {
          struct.cParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelVirtualOrderForBackEndSystem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.OpenOrder.TParamsCancelOrderForBackEndSystem();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cParams = new com.mia.OpenOrder.CommonParams();
          struct.cParams.read(iprot);
          struct.setCParamsIsSet(true);
        }
      }
    }

  }

  public static class cancelVirtualOrderForBackEndSystem_result implements org.apache.thrift.TBase<cancelVirtualOrderForBackEndSystem_result, cancelVirtualOrderForBackEndSystem_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelVirtualOrderForBackEndSystem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelVirtualOrderForBackEndSystem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelVirtualOrderForBackEndSystem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelVirtualOrderForBackEndSystem_resultTupleSchemeFactory());
    }

    public com.mia.OpenOrder.TResultCancelOrder success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.TResultCancelOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelVirtualOrderForBackEndSystem_result.class, metaDataMap);
    }

    public cancelVirtualOrderForBackEndSystem_result() {
    }

    public cancelVirtualOrderForBackEndSystem_result(
      com.mia.OpenOrder.TResultCancelOrder success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelVirtualOrderForBackEndSystem_result(cancelVirtualOrderForBackEndSystem_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.OpenOrder.TResultCancelOrder(other.success);
      }
    }

    public cancelVirtualOrderForBackEndSystem_result deepCopy() {
      return new cancelVirtualOrderForBackEndSystem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.OpenOrder.TResultCancelOrder getSuccess() {
      return this.success;
    }

    public cancelVirtualOrderForBackEndSystem_result setSuccess(com.mia.OpenOrder.TResultCancelOrder success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.OpenOrder.TResultCancelOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelVirtualOrderForBackEndSystem_result)
        return this.equals((cancelVirtualOrderForBackEndSystem_result)that);
      return false;
    }

    public boolean equals(cancelVirtualOrderForBackEndSystem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelVirtualOrderForBackEndSystem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelVirtualOrderForBackEndSystem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelVirtualOrderForBackEndSystem_resultStandardSchemeFactory implements SchemeFactory {
      public cancelVirtualOrderForBackEndSystem_resultStandardScheme getScheme() {
        return new cancelVirtualOrderForBackEndSystem_resultStandardScheme();
      }
    }

    private static class cancelVirtualOrderForBackEndSystem_resultStandardScheme extends StandardScheme<cancelVirtualOrderForBackEndSystem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelVirtualOrderForBackEndSystem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.OpenOrder.TResultCancelOrder();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelVirtualOrderForBackEndSystem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelVirtualOrderForBackEndSystem_resultTupleSchemeFactory implements SchemeFactory {
      public cancelVirtualOrderForBackEndSystem_resultTupleScheme getScheme() {
        return new cancelVirtualOrderForBackEndSystem_resultTupleScheme();
      }
    }

    private static class cancelVirtualOrderForBackEndSystem_resultTupleScheme extends TupleScheme<cancelVirtualOrderForBackEndSystem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelVirtualOrderForBackEndSystem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelVirtualOrderForBackEndSystem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.OpenOrder.TResultCancelOrder();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelOrderItemForBackEndSystem_args implements org.apache.thrift.TBase<cancelOrderItemForBackEndSystem_args, cancelOrderItemForBackEndSystem_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelOrderItemForBackEndSystem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelOrderItemForBackEndSystem_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField C_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("cParams", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelOrderItemForBackEndSystem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelOrderItemForBackEndSystem_argsTupleSchemeFactory());
    }

    public com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem params; // required
    public com.mia.OpenOrder.CommonParams cParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      C_PARAMS((short)2, "cParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // C_PARAMS
            return C_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem.class)));
      tmpMap.put(_Fields.C_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("cParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrderItemForBackEndSystem_args.class, metaDataMap);
    }

    public cancelOrderItemForBackEndSystem_args() {
    }

    public cancelOrderItemForBackEndSystem_args(
      com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem params,
      com.mia.OpenOrder.CommonParams cParams)
    {
      this();
      this.params = params;
      this.cParams = cParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelOrderItemForBackEndSystem_args(cancelOrderItemForBackEndSystem_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem(other.params);
      }
      if (other.isSetCParams()) {
        this.cParams = new com.mia.OpenOrder.CommonParams(other.cParams);
      }
    }

    public cancelOrderItemForBackEndSystem_args deepCopy() {
      return new cancelOrderItemForBackEndSystem_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.cParams = null;
    }

    public com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem getParams() {
      return this.params;
    }

    public cancelOrderItemForBackEndSystem_args setParams(com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.OpenOrder.CommonParams getCParams() {
      return this.cParams;
    }

    public cancelOrderItemForBackEndSystem_args setCParams(com.mia.OpenOrder.CommonParams cParams) {
      this.cParams = cParams;
      return this;
    }

    public void unsetCParams() {
      this.cParams = null;
    }

    /** Returns true if field cParams is set (has been assigned a value) and false otherwise */
    public boolean isSetCParams() {
      return this.cParams != null;
    }

    public void setCParamsIsSet(boolean value) {
      if (!value) {
        this.cParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem)value);
        }
        break;

      case C_PARAMS:
        if (value == null) {
          unsetCParams();
        } else {
          setCParams((com.mia.OpenOrder.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case C_PARAMS:
        return getCParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case C_PARAMS:
        return isSetCParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelOrderItemForBackEndSystem_args)
        return this.equals((cancelOrderItemForBackEndSystem_args)that);
      return false;
    }

    public boolean equals(cancelOrderItemForBackEndSystem_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_cParams = true && this.isSetCParams();
      boolean that_present_cParams = true && that.isSetCParams();
      if (this_present_cParams || that_present_cParams) {
        if (!(this_present_cParams && that_present_cParams))
          return false;
        if (!this.cParams.equals(that.cParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_cParams = true && (isSetCParams());
      list.add(present_cParams);
      if (present_cParams)
        list.add(cParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelOrderItemForBackEndSystem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCParams()).compareTo(other.isSetCParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cParams, other.cParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelOrderItemForBackEndSystem_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cParams:");
      if (this.cParams == null) {
        sb.append("null");
      } else {
        sb.append(this.cParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (cParams != null) {
        cParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelOrderItemForBackEndSystem_argsStandardSchemeFactory implements SchemeFactory {
      public cancelOrderItemForBackEndSystem_argsStandardScheme getScheme() {
        return new cancelOrderItemForBackEndSystem_argsStandardScheme();
      }
    }

    private static class cancelOrderItemForBackEndSystem_argsStandardScheme extends StandardScheme<cancelOrderItemForBackEndSystem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrderItemForBackEndSystem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cParams = new com.mia.OpenOrder.CommonParams();
                struct.cParams.read(iprot);
                struct.setCParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrderItemForBackEndSystem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cParams != null) {
          oprot.writeFieldBegin(C_PARAMS_FIELD_DESC);
          struct.cParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelOrderItemForBackEndSystem_argsTupleSchemeFactory implements SchemeFactory {
      public cancelOrderItemForBackEndSystem_argsTupleScheme getScheme() {
        return new cancelOrderItemForBackEndSystem_argsTupleScheme();
      }
    }

    private static class cancelOrderItemForBackEndSystem_argsTupleScheme extends TupleScheme<cancelOrderItemForBackEndSystem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrderItemForBackEndSystem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetCParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetCParams()) {
          struct.cParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrderItemForBackEndSystem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.OpenOrder.TParamsCancelOrderItemForBackEndSystem();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cParams = new com.mia.OpenOrder.CommonParams();
          struct.cParams.read(iprot);
          struct.setCParamsIsSet(true);
        }
      }
    }

  }

  public static class cancelOrderItemForBackEndSystem_result implements org.apache.thrift.TBase<cancelOrderItemForBackEndSystem_result, cancelOrderItemForBackEndSystem_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelOrderItemForBackEndSystem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelOrderItemForBackEndSystem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelOrderItemForBackEndSystem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelOrderItemForBackEndSystem_resultTupleSchemeFactory());
    }

    public com.mia.OpenOrder.TResultCancelOrder success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.TResultCancelOrder.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrderItemForBackEndSystem_result.class, metaDataMap);
    }

    public cancelOrderItemForBackEndSystem_result() {
    }

    public cancelOrderItemForBackEndSystem_result(
      com.mia.OpenOrder.TResultCancelOrder success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelOrderItemForBackEndSystem_result(cancelOrderItemForBackEndSystem_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.OpenOrder.TResultCancelOrder(other.success);
      }
    }

    public cancelOrderItemForBackEndSystem_result deepCopy() {
      return new cancelOrderItemForBackEndSystem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.OpenOrder.TResultCancelOrder getSuccess() {
      return this.success;
    }

    public cancelOrderItemForBackEndSystem_result setSuccess(com.mia.OpenOrder.TResultCancelOrder success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.OpenOrder.TResultCancelOrder)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelOrderItemForBackEndSystem_result)
        return this.equals((cancelOrderItemForBackEndSystem_result)that);
      return false;
    }

    public boolean equals(cancelOrderItemForBackEndSystem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelOrderItemForBackEndSystem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelOrderItemForBackEndSystem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelOrderItemForBackEndSystem_resultStandardSchemeFactory implements SchemeFactory {
      public cancelOrderItemForBackEndSystem_resultStandardScheme getScheme() {
        return new cancelOrderItemForBackEndSystem_resultStandardScheme();
      }
    }

    private static class cancelOrderItemForBackEndSystem_resultStandardScheme extends StandardScheme<cancelOrderItemForBackEndSystem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrderItemForBackEndSystem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.OpenOrder.TResultCancelOrder();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrderItemForBackEndSystem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelOrderItemForBackEndSystem_resultTupleSchemeFactory implements SchemeFactory {
      public cancelOrderItemForBackEndSystem_resultTupleScheme getScheme() {
        return new cancelOrderItemForBackEndSystem_resultTupleScheme();
      }
    }

    private static class cancelOrderItemForBackEndSystem_resultTupleScheme extends TupleScheme<cancelOrderItemForBackEndSystem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrderItemForBackEndSystem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrderItemForBackEndSystem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.OpenOrder.TResultCancelOrder();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class openOrderCreate_args implements org.apache.thrift.TBase<openOrderCreate_args, openOrderCreate_args._Fields>, java.io.Serializable, Cloneable, Comparable<openOrderCreate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openOrderCreate_args");

    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField C_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("cParams", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openOrderCreate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openOrderCreate_argsTupleSchemeFactory());
    }

    public com.mia.OpenOrder.TParamsOpenOrderCreate params; // required
    public com.mia.OpenOrder.CommonParams cParams; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMS((short)1, "params"),
      C_PARAMS((short)2, "cParams");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAMS
            return PARAMS;
          case 2: // C_PARAMS
            return C_PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.TParamsOpenOrderCreate.class)));
      tmpMap.put(_Fields.C_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("cParams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.CommonParams.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openOrderCreate_args.class, metaDataMap);
    }

    public openOrderCreate_args() {
    }

    public openOrderCreate_args(
      com.mia.OpenOrder.TParamsOpenOrderCreate params,
      com.mia.OpenOrder.CommonParams cParams)
    {
      this();
      this.params = params;
      this.cParams = cParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openOrderCreate_args(openOrderCreate_args other) {
      if (other.isSetParams()) {
        this.params = new com.mia.OpenOrder.TParamsOpenOrderCreate(other.params);
      }
      if (other.isSetCParams()) {
        this.cParams = new com.mia.OpenOrder.CommonParams(other.cParams);
      }
    }

    public openOrderCreate_args deepCopy() {
      return new openOrderCreate_args(this);
    }

    @Override
    public void clear() {
      this.params = null;
      this.cParams = null;
    }

    public com.mia.OpenOrder.TParamsOpenOrderCreate getParams() {
      return this.params;
    }

    public openOrderCreate_args setParams(com.mia.OpenOrder.TParamsOpenOrderCreate params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public com.mia.OpenOrder.CommonParams getCParams() {
      return this.cParams;
    }

    public openOrderCreate_args setCParams(com.mia.OpenOrder.CommonParams cParams) {
      this.cParams = cParams;
      return this;
    }

    public void unsetCParams() {
      this.cParams = null;
    }

    /** Returns true if field cParams is set (has been assigned a value) and false otherwise */
    public boolean isSetCParams() {
      return this.cParams != null;
    }

    public void setCParamsIsSet(boolean value) {
      if (!value) {
        this.cParams = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((com.mia.OpenOrder.TParamsOpenOrderCreate)value);
        }
        break;

      case C_PARAMS:
        if (value == null) {
          unsetCParams();
        } else {
          setCParams((com.mia.OpenOrder.CommonParams)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMS:
        return getParams();

      case C_PARAMS:
        return getCParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAMS:
        return isSetParams();
      case C_PARAMS:
        return isSetCParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openOrderCreate_args)
        return this.equals((openOrderCreate_args)that);
      return false;
    }

    public boolean equals(openOrderCreate_args that) {
      if (that == null)
        return false;

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_cParams = true && this.isSetCParams();
      boolean that_present_cParams = true && that.isSetCParams();
      if (this_present_cParams || that_present_cParams) {
        if (!(this_present_cParams && that_present_cParams))
          return false;
        if (!this.cParams.equals(that.cParams))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_params = true && (isSetParams());
      list.add(present_params);
      if (present_params)
        list.add(params);

      boolean present_cParams = true && (isSetCParams());
      list.add(present_cParams);
      if (present_cParams)
        list.add(cParams);

      return list.hashCode();
    }

    @Override
    public int compareTo(openOrderCreate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCParams()).compareTo(other.isSetCParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cParams, other.cParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openOrderCreate_args(");
      boolean first = true;

      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cParams:");
      if (this.cParams == null) {
        sb.append("null");
      } else {
        sb.append(this.cParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (params != null) {
        params.validate();
      }
      if (cParams != null) {
        cParams.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openOrderCreate_argsStandardSchemeFactory implements SchemeFactory {
      public openOrderCreate_argsStandardScheme getScheme() {
        return new openOrderCreate_argsStandardScheme();
      }
    }

    private static class openOrderCreate_argsStandardScheme extends StandardScheme<openOrderCreate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openOrderCreate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.params = new com.mia.OpenOrder.TParamsOpenOrderCreate();
                struct.params.read(iprot);
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // C_PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cParams = new com.mia.OpenOrder.CommonParams();
                struct.cParams.read(iprot);
                struct.setCParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openOrderCreate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cParams != null) {
          oprot.writeFieldBegin(C_PARAMS_FIELD_DESC);
          struct.cParams.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openOrderCreate_argsTupleSchemeFactory implements SchemeFactory {
      public openOrderCreate_argsTupleScheme getScheme() {
        return new openOrderCreate_argsTupleScheme();
      }
    }

    private static class openOrderCreate_argsTupleScheme extends TupleScheme<openOrderCreate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openOrderCreate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParams()) {
          optionals.set(0);
        }
        if (struct.isSetCParams()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParams()) {
          struct.params.write(oprot);
        }
        if (struct.isSetCParams()) {
          struct.cParams.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openOrderCreate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.params = new com.mia.OpenOrder.TParamsOpenOrderCreate();
          struct.params.read(iprot);
          struct.setParamsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cParams = new com.mia.OpenOrder.CommonParams();
          struct.cParams.read(iprot);
          struct.setCParamsIsSet(true);
        }
      }
    }

  }

  public static class openOrderCreate_result implements org.apache.thrift.TBase<openOrderCreate_result, openOrderCreate_result._Fields>, java.io.Serializable, Cloneable, Comparable<openOrderCreate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openOrderCreate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openOrderCreate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openOrderCreate_resultTupleSchemeFactory());
    }

    public com.mia.OpenOrder.TResultOpenOrderCreate success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.TResultOpenOrderCreate.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openOrderCreate_result.class, metaDataMap);
    }

    public openOrderCreate_result() {
    }

    public openOrderCreate_result(
      com.mia.OpenOrder.TResultOpenOrderCreate success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openOrderCreate_result(openOrderCreate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.OpenOrder.TResultOpenOrderCreate(other.success);
      }
    }

    public openOrderCreate_result deepCopy() {
      return new openOrderCreate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.OpenOrder.TResultOpenOrderCreate getSuccess() {
      return this.success;
    }

    public openOrderCreate_result setSuccess(com.mia.OpenOrder.TResultOpenOrderCreate success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.OpenOrder.TResultOpenOrderCreate)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openOrderCreate_result)
        return this.equals((openOrderCreate_result)that);
      return false;
    }

    public boolean equals(openOrderCreate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(openOrderCreate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openOrderCreate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openOrderCreate_resultStandardSchemeFactory implements SchemeFactory {
      public openOrderCreate_resultStandardScheme getScheme() {
        return new openOrderCreate_resultStandardScheme();
      }
    }

    private static class openOrderCreate_resultStandardScheme extends StandardScheme<openOrderCreate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openOrderCreate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.OpenOrder.TResultOpenOrderCreate();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openOrderCreate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openOrderCreate_resultTupleSchemeFactory implements SchemeFactory {
      public openOrderCreate_resultTupleScheme getScheme() {
        return new openOrderCreate_resultTupleScheme();
      }
    }

    private static class openOrderCreate_resultTupleScheme extends TupleScheme<openOrderCreate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openOrderCreate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openOrderCreate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.OpenOrder.TResultOpenOrderCreate();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }

    public com.mia.OpenOrder.TParamsPing param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.TParamsPing.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      com.mia.OpenOrder.TParamsPing param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      if (other.isSetParam()) {
        this.param = new com.mia.OpenOrder.TParamsPing(other.param);
      }
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public com.mia.OpenOrder.TParamsPing getParam() {
      return this.param;
    }

    public ping_args setParam(com.mia.OpenOrder.TParamsPing param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((com.mia.OpenOrder.TParamsPing)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_param = true && (isSetParam());
      list.add(present_param);
      if (present_param)
        list.add(param);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (param != null) {
        param.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.param = new com.mia.OpenOrder.TParamsPing();
                struct.param.read(iprot);
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          struct.param.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          struct.param.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.param = new com.mia.OpenOrder.TParamsPing();
          struct.param.read(iprot);
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public com.mia.OpenOrder.TResultPing success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.OpenOrder.TResultPing.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      com.mia.OpenOrder.TResultPing success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.mia.OpenOrder.TResultPing(other.success);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.mia.OpenOrder.TResultPing getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(com.mia.OpenOrder.TResultPing success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.mia.OpenOrder.TResultPing)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.mia.OpenOrder.TResultPing();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.mia.OpenOrder.TResultPing();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
