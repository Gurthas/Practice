/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TResultOrderListContent
		implements org.apache.thrift.TBase<TResultOrderListContent, TResultOrderListContent._Fields>,
		java.io.Serializable, Cloneable, Comparable<TResultOrderListContent> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TResultOrderListContent");

	private static final org.apache.thrift.protocol.TField ORDER_AMOUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderAmounts", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField ORDER_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderInfos", org.apache.thrift.protocol.TType.LIST, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TResultOrderListContentStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TResultOrderListContentTupleSchemeFactory());
	}

	public int orderAmounts; // required
	public List<TResultOrderListOfOrderInfo> orderInfos; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ORDER_AMOUNTS((short) 1, "orderAmounts"), ORDER_INFOS((short) 2, "orderInfos");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ORDER_AMOUNTS
				return ORDER_AMOUNTS;
			case 2: // ORDER_INFOS
				return ORDER_INFOS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ORDERAMOUNTS_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ORDER_AMOUNTS,
				new org.apache.thrift.meta_data.FieldMetaData("orderAmounts",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ORDER_INFOS,
				new org.apache.thrift.meta_data.FieldMetaData("orderInfos",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
										TResultOrderListOfOrderInfo.class))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultOrderListContent.class, metaDataMap);
	}

	public TResultOrderListContent() {
	}

	public TResultOrderListContent(int orderAmounts, List<TResultOrderListOfOrderInfo> orderInfos) {
		this();
		this.orderAmounts = orderAmounts;
		setOrderAmountsIsSet(true);
		this.orderInfos = orderInfos;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TResultOrderListContent(TResultOrderListContent other) {
		__isset_bitfield = other.__isset_bitfield;
		this.orderAmounts = other.orderAmounts;
		if (other.isSetOrderInfos()) {
			List<TResultOrderListOfOrderInfo> __this__orderInfos = new ArrayList<TResultOrderListOfOrderInfo>(
					other.orderInfos.size());
			for (TResultOrderListOfOrderInfo other_element : other.orderInfos) {
				__this__orderInfos.add(new TResultOrderListOfOrderInfo(other_element));
			}
			this.orderInfos = __this__orderInfos;
		}
	}

	public TResultOrderListContent deepCopy() {
		return new TResultOrderListContent(this);
	}

	@Override
	public void clear() {
		setOrderAmountsIsSet(false);
		this.orderAmounts = 0;
		this.orderInfos = null;
	}

	public int getOrderAmounts() {
		return this.orderAmounts;
	}

	public TResultOrderListContent setOrderAmounts(int orderAmounts) {
		this.orderAmounts = orderAmounts;
		setOrderAmountsIsSet(true);
		return this;
	}

	public void unsetOrderAmounts() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERAMOUNTS_ISSET_ID);
	}

	/**
	 * Returns true if field orderAmounts is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderAmounts() {
		return EncodingUtils.testBit(__isset_bitfield, __ORDERAMOUNTS_ISSET_ID);
	}

	public void setOrderAmountsIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERAMOUNTS_ISSET_ID, value);
	}

	public int getOrderInfosSize() {
		return (this.orderInfos == null) ? 0 : this.orderInfos.size();
	}

	public java.util.Iterator<TResultOrderListOfOrderInfo> getOrderInfosIterator() {
		return (this.orderInfos == null) ? null : this.orderInfos.iterator();
	}

	public void addToOrderInfos(TResultOrderListOfOrderInfo elem) {
		if (this.orderInfos == null) {
			this.orderInfos = new ArrayList<TResultOrderListOfOrderInfo>();
		}
		this.orderInfos.add(elem);
	}

	public List<TResultOrderListOfOrderInfo> getOrderInfos() {
		return this.orderInfos;
	}

	public TResultOrderListContent setOrderInfos(List<TResultOrderListOfOrderInfo> orderInfos) {
		this.orderInfos = orderInfos;
		return this;
	}

	public void unsetOrderInfos() {
		this.orderInfos = null;
	}

	/**
	 * Returns true if field orderInfos is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderInfos() {
		return this.orderInfos != null;
	}

	public void setOrderInfosIsSet(boolean value) {
		if (!value) {
			this.orderInfos = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ORDER_AMOUNTS:
			if (value == null) {
				unsetOrderAmounts();
			} else {
				setOrderAmounts((Integer) value);
			}
			break;

		case ORDER_INFOS:
			if (value == null) {
				unsetOrderInfos();
			} else {
				setOrderInfos((List<TResultOrderListOfOrderInfo>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ORDER_AMOUNTS:
			return getOrderAmounts();

		case ORDER_INFOS:
			return getOrderInfos();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ORDER_AMOUNTS:
			return isSetOrderAmounts();
		case ORDER_INFOS:
			return isSetOrderInfos();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TResultOrderListContent)
			return this.equals((TResultOrderListContent) that);
		return false;
	}

	public boolean equals(TResultOrderListContent that) {
		if (that == null)
			return false;

		boolean this_present_orderAmounts = true;
		boolean that_present_orderAmounts = true;
		if (this_present_orderAmounts || that_present_orderAmounts) {
			if (!(this_present_orderAmounts && that_present_orderAmounts))
				return false;
			if (this.orderAmounts != that.orderAmounts)
				return false;
		}

		boolean this_present_orderInfos = true && this.isSetOrderInfos();
		boolean that_present_orderInfos = true && that.isSetOrderInfos();
		if (this_present_orderInfos || that_present_orderInfos) {
			if (!(this_present_orderInfos && that_present_orderInfos))
				return false;
			if (!this.orderInfos.equals(that.orderInfos))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_orderAmounts = true;
		list.add(present_orderAmounts);
		if (present_orderAmounts)
			list.add(orderAmounts);

		boolean present_orderInfos = true && (isSetOrderInfos());
		list.add(present_orderInfos);
		if (present_orderInfos)
			list.add(orderInfos);

		return list.hashCode();
	}

	@Override
	public int compareTo(TResultOrderListContent other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetOrderAmounts()).compareTo(other.isSetOrderAmounts());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderAmounts()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderAmounts, other.orderAmounts);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderInfos()).compareTo(other.isSetOrderInfos());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderInfos()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderInfos, other.orderInfos);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TResultOrderListContent(");
		boolean first = true;

		sb.append("orderAmounts:");
		sb.append(this.orderAmounts);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderInfos:");
		if (this.orderInfos == null) {
			sb.append("null");
		} else {
			sb.append(this.orderInfos);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TResultOrderListContentStandardSchemeFactory implements SchemeFactory {
		public TResultOrderListContentStandardScheme getScheme() {
			return new TResultOrderListContentStandardScheme();
		}
	}

	private static class TResultOrderListContentStandardScheme extends StandardScheme<TResultOrderListContent> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TResultOrderListContent struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ORDER_AMOUNTS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.orderAmounts = iprot.readI32();
						struct.setOrderAmountsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // ORDER_INFOS
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
							struct.orderInfos = new ArrayList<TResultOrderListOfOrderInfo>(_list24.size);
							TResultOrderListOfOrderInfo _elem25;
							for (int _i26 = 0; _i26 < _list24.size; ++_i26) {
								_elem25 = new TResultOrderListOfOrderInfo();
								_elem25.read(iprot);
								struct.orderInfos.add(_elem25);
							}
							iprot.readListEnd();
						}
						struct.setOrderInfosIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TResultOrderListContent struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(ORDER_AMOUNTS_FIELD_DESC);
			oprot.writeI32(struct.orderAmounts);
			oprot.writeFieldEnd();
			if (struct.orderInfos != null) {
				oprot.writeFieldBegin(ORDER_INFOS_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
							struct.orderInfos.size()));
					for (TResultOrderListOfOrderInfo _iter27 : struct.orderInfos) {
						_iter27.write(oprot);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TResultOrderListContentTupleSchemeFactory implements SchemeFactory {
		public TResultOrderListContentTupleScheme getScheme() {
			return new TResultOrderListContentTupleScheme();
		}
	}

	private static class TResultOrderListContentTupleScheme extends TupleScheme<TResultOrderListContent> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TResultOrderListContent struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetOrderAmounts()) {
				optionals.set(0);
			}
			if (struct.isSetOrderInfos()) {
				optionals.set(1);
			}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetOrderAmounts()) {
				oprot.writeI32(struct.orderAmounts);
			}
			if (struct.isSetOrderInfos()) {
				{
					oprot.writeI32(struct.orderInfos.size());
					for (TResultOrderListOfOrderInfo _iter28 : struct.orderInfos) {
						_iter28.write(oprot);
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TResultOrderListContent struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
				struct.orderAmounts = iprot.readI32();
				struct.setOrderAmountsIsSet(true);
			}
			if (incoming.get(1)) {
				{
					org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
					struct.orderInfos = new ArrayList<TResultOrderListOfOrderInfo>(_list29.size);
					TResultOrderListOfOrderInfo _elem30;
					for (int _i31 = 0; _i31 < _list29.size; ++_i31) {
						_elem30 = new TResultOrderListOfOrderInfo();
						_elem30.read(iprot);
						struct.orderInfos.add(_elem30);
					}
				}
				struct.setOrderInfosIsSet(true);
			}
		}
	}

}
