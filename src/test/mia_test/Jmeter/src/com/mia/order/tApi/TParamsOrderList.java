/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TParamsOrderList implements org.apache.thrift.TBase<TParamsOrderList, TParamsOrderList._Fields>,
		java.io.Serializable, Cloneable, Comparable<TParamsOrderList> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TParamsOrderList");

	private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"userId", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"page", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"pageSize", org.apache.thrift.protocol.TType.I32, (short) 3);
	private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"type", org.apache.thrift.protocol.TType.I32, (short) 4);
	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 5);
	private static final org.apache.thrift.protocol.TField CLIENT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"clientSource", org.apache.thrift.protocol.TType.I32, (short) 6);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TParamsOrderListStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TParamsOrderListTupleSchemeFactory());
	}

	public int userId; // required
	public int page; // required
	public int pageSize; // required
	public int type; // required
	public int status; // required
	public int clientSource; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		USER_ID((short) 1, "userId"), PAGE((short) 2, "page"), PAGE_SIZE((short) 3, "pageSize"), TYPE((short) 4,
				"type"), STATUS((short) 5, "status"), CLIENT_SOURCE((short) 6, "clientSource");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // USER_ID
				return USER_ID;
			case 2: // PAGE
				return PAGE;
			case 3: // PAGE_SIZE
				return PAGE_SIZE;
			case 4: // TYPE
				return TYPE;
			case 5: // STATUS
				return STATUS;
			case 6: // CLIENT_SOURCE
				return CLIENT_SOURCE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __USERID_ISSET_ID = 0;
	private static final int __PAGE_ISSET_ID = 1;
	private static final int __PAGESIZE_ISSET_ID = 2;
	private static final int __TYPE_ISSET_ID = 3;
	private static final int __STATUS_ISSET_ID = 4;
	private static final int __CLIENTSOURCE_ISSET_ID = 5;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.USER_ID,
				new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PAGE,
				new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PAGE_SIZE,
				new org.apache.thrift.meta_data.FieldMetaData("pageSize",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CLIENT_SOURCE,
				new org.apache.thrift.meta_data.FieldMetaData("clientSource",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TParamsOrderList.class, metaDataMap);
	}

	public TParamsOrderList() {
	}

	public TParamsOrderList(int userId, int page, int pageSize, int type, int status, int clientSource) {
		this();
		this.userId = userId;
		setUserIdIsSet(true);
		this.page = page;
		setPageIsSet(true);
		this.pageSize = pageSize;
		setPageSizeIsSet(true);
		this.type = type;
		setTypeIsSet(true);
		this.status = status;
		setStatusIsSet(true);
		this.clientSource = clientSource;
		setClientSourceIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TParamsOrderList(TParamsOrderList other) {
		__isset_bitfield = other.__isset_bitfield;
		this.userId = other.userId;
		this.page = other.page;
		this.pageSize = other.pageSize;
		this.type = other.type;
		this.status = other.status;
		this.clientSource = other.clientSource;
	}

	public TParamsOrderList deepCopy() {
		return new TParamsOrderList(this);
	}

	@Override
	public void clear() {
		setUserIdIsSet(false);
		this.userId = 0;
		setPageIsSet(false);
		this.page = 0;
		setPageSizeIsSet(false);
		this.pageSize = 0;
		setTypeIsSet(false);
		this.type = 0;
		setStatusIsSet(false);
		this.status = 0;
		setClientSourceIsSet(false);
		this.clientSource = 0;
	}

	public int getUserId() {
		return this.userId;
	}

	public TParamsOrderList setUserId(int userId) {
		this.userId = userId;
		setUserIdIsSet(true);
		return this;
	}

	public void unsetUserId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
	}

	/**
	 * Returns true if field userId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUserId() {
		return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
	}

	public void setUserIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
	}

	public int getPage() {
		return this.page;
	}

	public TParamsOrderList setPage(int page) {
		this.page = page;
		setPageIsSet(true);
		return this;
	}

	public void unsetPage() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
	}

	/**
	 * Returns true if field page is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPage() {
		return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
	}

	public void setPageIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
	}

	public int getPageSize() {
		return this.pageSize;
	}

	public TParamsOrderList setPageSize(int pageSize) {
		this.pageSize = pageSize;
		setPageSizeIsSet(true);
		return this;
	}

	public void unsetPageSize() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
	}

	/**
	 * Returns true if field pageSize is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPageSize() {
		return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
	}

	public void setPageSizeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
	}

	public int getType() {
		return this.type;
	}

	public TParamsOrderList setType(int type) {
		this.type = type;
		setTypeIsSet(true);
		return this;
	}

	public void unsetType() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
	}

	/**
	 * Returns true if field type is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetType() {
		return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
	}

	public void setTypeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public TParamsOrderList setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatus() {
		return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public int getClientSource() {
		return this.clientSource;
	}

	public TParamsOrderList setClientSource(int clientSource) {
		this.clientSource = clientSource;
		setClientSourceIsSet(true);
		return this;
	}

	public void unsetClientSource() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLIENTSOURCE_ISSET_ID);
	}

	/**
	 * Returns true if field clientSource is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetClientSource() {
		return EncodingUtils.testBit(__isset_bitfield, __CLIENTSOURCE_ISSET_ID);
	}

	public void setClientSourceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLIENTSOURCE_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case USER_ID:
			if (value == null) {
				unsetUserId();
			} else {
				setUserId((Integer) value);
			}
			break;

		case PAGE:
			if (value == null) {
				unsetPage();
			} else {
				setPage((Integer) value);
			}
			break;

		case PAGE_SIZE:
			if (value == null) {
				unsetPageSize();
			} else {
				setPageSize((Integer) value);
			}
			break;

		case TYPE:
			if (value == null) {
				unsetType();
			} else {
				setType((Integer) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			} else {
				setStatus((Integer) value);
			}
			break;

		case CLIENT_SOURCE:
			if (value == null) {
				unsetClientSource();
			} else {
				setClientSource((Integer) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case USER_ID:
			return getUserId();

		case PAGE:
			return getPage();

		case PAGE_SIZE:
			return getPageSize();

		case TYPE:
			return getType();

		case STATUS:
			return getStatus();

		case CLIENT_SOURCE:
			return getClientSource();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case USER_ID:
			return isSetUserId();
		case PAGE:
			return isSetPage();
		case PAGE_SIZE:
			return isSetPageSize();
		case TYPE:
			return isSetType();
		case STATUS:
			return isSetStatus();
		case CLIENT_SOURCE:
			return isSetClientSource();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TParamsOrderList)
			return this.equals((TParamsOrderList) that);
		return false;
	}

	public boolean equals(TParamsOrderList that) {
		if (that == null)
			return false;

		boolean this_present_userId = true;
		boolean that_present_userId = true;
		if (this_present_userId || that_present_userId) {
			if (!(this_present_userId && that_present_userId))
				return false;
			if (this.userId != that.userId)
				return false;
		}

		boolean this_present_page = true;
		boolean that_present_page = true;
		if (this_present_page || that_present_page) {
			if (!(this_present_page && that_present_page))
				return false;
			if (this.page != that.page)
				return false;
		}

		boolean this_present_pageSize = true;
		boolean that_present_pageSize = true;
		if (this_present_pageSize || that_present_pageSize) {
			if (!(this_present_pageSize && that_present_pageSize))
				return false;
			if (this.pageSize != that.pageSize)
				return false;
		}

		boolean this_present_type = true;
		boolean that_present_type = true;
		if (this_present_type || that_present_type) {
			if (!(this_present_type && that_present_type))
				return false;
			if (this.type != that.type)
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_clientSource = true;
		boolean that_present_clientSource = true;
		if (this_present_clientSource || that_present_clientSource) {
			if (!(this_present_clientSource && that_present_clientSource))
				return false;
			if (this.clientSource != that.clientSource)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_userId = true;
		list.add(present_userId);
		if (present_userId)
			list.add(userId);

		boolean present_page = true;
		list.add(present_page);
		if (present_page)
			list.add(page);

		boolean present_pageSize = true;
		list.add(present_pageSize);
		if (present_pageSize)
			list.add(pageSize);

		boolean present_type = true;
		list.add(present_type);
		if (present_type)
			list.add(type);

		boolean present_status = true;
		list.add(present_status);
		if (present_status)
			list.add(status);

		boolean present_clientSource = true;
		list.add(present_clientSource);
		if (present_clientSource)
			list.add(clientSource);

		return list.hashCode();
	}

	@Override
	public int compareTo(TParamsOrderList other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUserId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPageSize()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetClientSource()).compareTo(other.isSetClientSource());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetClientSource()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientSource, other.clientSource);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TParamsOrderList(");
		boolean first = true;

		sb.append("userId:");
		sb.append(this.userId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("page:");
		sb.append(this.page);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("pageSize:");
		sb.append(this.pageSize);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("type:");
		sb.append(this.type);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("clientSource:");
		sb.append(this.clientSource);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TParamsOrderListStandardSchemeFactory implements SchemeFactory {
		public TParamsOrderListStandardScheme getScheme() {
			return new TParamsOrderListStandardScheme();
		}
	}

	private static class TParamsOrderListStandardScheme extends StandardScheme<TParamsOrderList> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TParamsOrderList struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // USER_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.userId = iprot.readI32();
						struct.setUserIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // PAGE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.page = iprot.readI32();
						struct.setPageIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // PAGE_SIZE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.pageSize = iprot.readI32();
						struct.setPageSizeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.type = iprot.readI32();
						struct.setTypeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // CLIENT_SOURCE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.clientSource = iprot.readI32();
						struct.setClientSourceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TParamsOrderList struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(USER_ID_FIELD_DESC);
			oprot.writeI32(struct.userId);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PAGE_FIELD_DESC);
			oprot.writeI32(struct.page);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
			oprot.writeI32(struct.pageSize);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(TYPE_FIELD_DESC);
			oprot.writeI32(struct.type);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(CLIENT_SOURCE_FIELD_DESC);
			oprot.writeI32(struct.clientSource);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TParamsOrderListTupleSchemeFactory implements SchemeFactory {
		public TParamsOrderListTupleScheme getScheme() {
			return new TParamsOrderListTupleScheme();
		}
	}

	private static class TParamsOrderListTupleScheme extends TupleScheme<TParamsOrderList> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TParamsOrderList struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetUserId()) {
				optionals.set(0);
			}
			if (struct.isSetPage()) {
				optionals.set(1);
			}
			if (struct.isSetPageSize()) {
				optionals.set(2);
			}
			if (struct.isSetType()) {
				optionals.set(3);
			}
			if (struct.isSetStatus()) {
				optionals.set(4);
			}
			if (struct.isSetClientSource()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetUserId()) {
				oprot.writeI32(struct.userId);
			}
			if (struct.isSetPage()) {
				oprot.writeI32(struct.page);
			}
			if (struct.isSetPageSize()) {
				oprot.writeI32(struct.pageSize);
			}
			if (struct.isSetType()) {
				oprot.writeI32(struct.type);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetClientSource()) {
				oprot.writeI32(struct.clientSource);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TParamsOrderList struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.userId = iprot.readI32();
				struct.setUserIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.page = iprot.readI32();
				struct.setPageIsSet(true);
			}
			if (incoming.get(2)) {
				struct.pageSize = iprot.readI32();
				struct.setPageSizeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.type = iprot.readI32();
				struct.setTypeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(5)) {
				struct.clientSource = iprot.readI32();
				struct.setClientSourceIsSet(true);
			}
		}
	}

}
