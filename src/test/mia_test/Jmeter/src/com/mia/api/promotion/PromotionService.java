/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.api.promotion;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-23")
public class PromotionService {

	public interface Iface {

		/**
		 * 根据活动id获取活动信息 key：promotionId，value：promotionInfo
		 * 
		 * @param queryParam
		 */
		public RPromotionList getPromotionInfo(QueryParam queryParam) throws org.apache.thrift.TException;

		/**
		 * 根据活动ID获取阶梯信息 key：promotionId，value：ladderInfo
		 * 
		 * @param queryParam
		 */
		public RPromotionLadder getPromotionLadder(QueryParam queryParam) throws org.apache.thrift.TException;

		/**
		 * 根据活动id获取活动信息，如果是阶梯活动，查询阶梯活动信息 key：promotion：活动信息，ladder：阶梯信息
		 * 
		 * @param queryParam
		 */
		public RPromotionAndLadder getPromotionAndLadder(QueryParam queryParam) throws org.apache.thrift.TException;

		/**
		 * 根据商品ID获取活动对应关系，包含限购 key：itemId，value：活动id，限购信息等
		 * 
		 * @param queryParam
		 */
		public RItemPromotion getItemPromotion(QueryParam queryParam) throws org.apache.thrift.TException;

		/**
		 * 根据商品ID获取活动数据 key：itemId：活动ID，商品限购信息等，promotion：活动信息，ladder：阶梯信息
		 * 
		 * @param queryParam
		 */
		public RItemPromotionLadder getItemPromotionInfo(QueryParam queryParam) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void getPromotionInfo(QueryParam queryParam, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void getPromotionLadder(QueryParam queryParam, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void getPromotionAndLadder(QueryParam queryParam,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void getItemPromotion(QueryParam queryParam, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void getItemPromotionInfo(QueryParam queryParam,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public RPromotionList getPromotionInfo(QueryParam queryParam) throws org.apache.thrift.TException {
			send_getPromotionInfo(queryParam);
			return recv_getPromotionInfo();
		}

		public void send_getPromotionInfo(QueryParam queryParam) throws org.apache.thrift.TException {
			getPromotionInfo_args args = new getPromotionInfo_args();
			args.setQueryParam(queryParam);
			sendBase("getPromotionInfo", args);
		}

		public RPromotionList recv_getPromotionInfo() throws org.apache.thrift.TException {
			getPromotionInfo_result result = new getPromotionInfo_result();
			receiveBase(result, "getPromotionInfo");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getPromotionInfo failed: unknown result");
		}

		public RPromotionLadder getPromotionLadder(QueryParam queryParam) throws org.apache.thrift.TException {
			send_getPromotionLadder(queryParam);
			return recv_getPromotionLadder();
		}

		public void send_getPromotionLadder(QueryParam queryParam) throws org.apache.thrift.TException {
			getPromotionLadder_args args = new getPromotionLadder_args();
			args.setQueryParam(queryParam);
			sendBase("getPromotionLadder", args);
		}

		public RPromotionLadder recv_getPromotionLadder() throws org.apache.thrift.TException {
			getPromotionLadder_result result = new getPromotionLadder_result();
			receiveBase(result, "getPromotionLadder");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getPromotionLadder failed: unknown result");
		}

		public RPromotionAndLadder getPromotionAndLadder(QueryParam queryParam) throws org.apache.thrift.TException {
			send_getPromotionAndLadder(queryParam);
			return recv_getPromotionAndLadder();
		}

		public void send_getPromotionAndLadder(QueryParam queryParam) throws org.apache.thrift.TException {
			getPromotionAndLadder_args args = new getPromotionAndLadder_args();
			args.setQueryParam(queryParam);
			sendBase("getPromotionAndLadder", args);
		}

		public RPromotionAndLadder recv_getPromotionAndLadder() throws org.apache.thrift.TException {
			getPromotionAndLadder_result result = new getPromotionAndLadder_result();
			receiveBase(result, "getPromotionAndLadder");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getPromotionAndLadder failed: unknown result");
		}

		public RItemPromotion getItemPromotion(QueryParam queryParam) throws org.apache.thrift.TException {
			send_getItemPromotion(queryParam);
			return recv_getItemPromotion();
		}

		public void send_getItemPromotion(QueryParam queryParam) throws org.apache.thrift.TException {
			getItemPromotion_args args = new getItemPromotion_args();
			args.setQueryParam(queryParam);
			sendBase("getItemPromotion", args);
		}

		public RItemPromotion recv_getItemPromotion() throws org.apache.thrift.TException {
			getItemPromotion_result result = new getItemPromotion_result();
			receiveBase(result, "getItemPromotion");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getItemPromotion failed: unknown result");
		}

		public RItemPromotionLadder getItemPromotionInfo(QueryParam queryParam) throws org.apache.thrift.TException {
			send_getItemPromotionInfo(queryParam);
			return recv_getItemPromotionInfo();
		}

		public void send_getItemPromotionInfo(QueryParam queryParam) throws org.apache.thrift.TException {
			getItemPromotionInfo_args args = new getItemPromotionInfo_args();
			args.setQueryParam(queryParam);
			sendBase("getItemPromotionInfo", args);
		}

		public RItemPromotionLadder recv_getItemPromotionInfo() throws org.apache.thrift.TException {
			getItemPromotionInfo_result result = new getItemPromotionInfo_result();
			receiveBase(result, "getItemPromotionInfo");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getItemPromotionInfo failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getPromotionInfo(QueryParam queryParam, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getPromotionInfo_call method_call = new getPromotionInfo_call(queryParam, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getPromotionInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
			private QueryParam queryParam;

			public getPromotionInfo_call(QueryParam queryParam,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.queryParam = queryParam;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPromotionInfo",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getPromotionInfo_args args = new getPromotionInfo_args();
				args.setQueryParam(queryParam);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public RPromotionList getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getPromotionInfo();
			}
		}

		public void getPromotionLadder(QueryParam queryParam, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getPromotionLadder_call method_call = new getPromotionLadder_call(queryParam, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getPromotionLadder_call extends org.apache.thrift.async.TAsyncMethodCall {
			private QueryParam queryParam;

			public getPromotionLadder_call(QueryParam queryParam,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.queryParam = queryParam;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPromotionLadder",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getPromotionLadder_args args = new getPromotionLadder_args();
				args.setQueryParam(queryParam);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public RPromotionLadder getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getPromotionLadder();
			}
		}

		public void getPromotionAndLadder(QueryParam queryParam,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			getPromotionAndLadder_call method_call = new getPromotionAndLadder_call(queryParam, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getPromotionAndLadder_call extends org.apache.thrift.async.TAsyncMethodCall {
			private QueryParam queryParam;

			public getPromotionAndLadder_call(QueryParam queryParam,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.queryParam = queryParam;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPromotionAndLadder",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getPromotionAndLadder_args args = new getPromotionAndLadder_args();
				args.setQueryParam(queryParam);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public RPromotionAndLadder getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getPromotionAndLadder();
			}
		}

		public void getItemPromotion(QueryParam queryParam, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getItemPromotion_call method_call = new getItemPromotion_call(queryParam, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getItemPromotion_call extends org.apache.thrift.async.TAsyncMethodCall {
			private QueryParam queryParam;

			public getItemPromotion_call(QueryParam queryParam,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.queryParam = queryParam;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getItemPromotion",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getItemPromotion_args args = new getItemPromotion_args();
				args.setQueryParam(queryParam);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public RItemPromotion getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getItemPromotion();
			}
		}

		public void getItemPromotionInfo(QueryParam queryParam,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			getItemPromotionInfo_call method_call = new getItemPromotionInfo_call(queryParam, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getItemPromotionInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
			private QueryParam queryParam;

			public getItemPromotionInfo_call(QueryParam queryParam,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.queryParam = queryParam;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getItemPromotionInfo",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getItemPromotionInfo_args args = new getItemPromotionInfo_args();
				args.setQueryParam(queryParam);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public RItemPromotionLadder getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getItemPromotionInfo();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getPromotionInfo", new getPromotionInfo());
			processMap.put("getPromotionLadder", new getPromotionLadder());
			processMap.put("getPromotionAndLadder", new getPromotionAndLadder());
			processMap.put("getItemPromotion", new getItemPromotion());
			processMap.put("getItemPromotionInfo", new getItemPromotionInfo());
			return processMap;
		}

		public static class getPromotionInfo<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getPromotionInfo_args> {
			public getPromotionInfo() {
				super("getPromotionInfo");
			}

			public getPromotionInfo_args getEmptyArgsInstance() {
				return new getPromotionInfo_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getPromotionInfo_result getResult(I iface, getPromotionInfo_args args)
					throws org.apache.thrift.TException {
				getPromotionInfo_result result = new getPromotionInfo_result();
				result.success = iface.getPromotionInfo(args.queryParam);
				return result;
			}
		}

		public static class getPromotionLadder<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getPromotionLadder_args> {
			public getPromotionLadder() {
				super("getPromotionLadder");
			}

			public getPromotionLadder_args getEmptyArgsInstance() {
				return new getPromotionLadder_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getPromotionLadder_result getResult(I iface, getPromotionLadder_args args)
					throws org.apache.thrift.TException {
				getPromotionLadder_result result = new getPromotionLadder_result();
				result.success = iface.getPromotionLadder(args.queryParam);
				return result;
			}
		}

		public static class getPromotionAndLadder<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getPromotionAndLadder_args> {
			public getPromotionAndLadder() {
				super("getPromotionAndLadder");
			}

			public getPromotionAndLadder_args getEmptyArgsInstance() {
				return new getPromotionAndLadder_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getPromotionAndLadder_result getResult(I iface, getPromotionAndLadder_args args)
					throws org.apache.thrift.TException {
				getPromotionAndLadder_result result = new getPromotionAndLadder_result();
				result.success = iface.getPromotionAndLadder(args.queryParam);
				return result;
			}
		}

		public static class getItemPromotion<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getItemPromotion_args> {
			public getItemPromotion() {
				super("getItemPromotion");
			}

			public getItemPromotion_args getEmptyArgsInstance() {
				return new getItemPromotion_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getItemPromotion_result getResult(I iface, getItemPromotion_args args)
					throws org.apache.thrift.TException {
				getItemPromotion_result result = new getItemPromotion_result();
				result.success = iface.getItemPromotion(args.queryParam);
				return result;
			}
		}

		public static class getItemPromotionInfo<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getItemPromotionInfo_args> {
			public getItemPromotionInfo() {
				super("getItemPromotionInfo");
			}

			public getItemPromotionInfo_args getEmptyArgsInstance() {
				return new getItemPromotionInfo_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getItemPromotionInfo_result getResult(I iface, getItemPromotionInfo_args args)
					throws org.apache.thrift.TException {
				getItemPromotionInfo_result result = new getItemPromotionInfo_result();
				result.success = iface.getItemPromotionInfo(args.queryParam);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("getPromotionInfo", new getPromotionInfo());
			processMap.put("getPromotionLadder", new getPromotionLadder());
			processMap.put("getPromotionAndLadder", new getPromotionAndLadder());
			processMap.put("getItemPromotion", new getItemPromotion());
			processMap.put("getItemPromotionInfo", new getItemPromotionInfo());
			return processMap;
		}

		public static class getPromotionInfo<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getPromotionInfo_args, RPromotionList> {
			public getPromotionInfo() {
				super("getPromotionInfo");
			}

			public getPromotionInfo_args getEmptyArgsInstance() {
				return new getPromotionInfo_args();
			}

			public AsyncMethodCallback<RPromotionList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<RPromotionList>() {
					public void onComplete(RPromotionList o) {
						getPromotionInfo_result result = new getPromotionInfo_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						getPromotionInfo_result result = new getPromotionInfo_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getPromotionInfo_args args,
					org.apache.thrift.async.AsyncMethodCallback<RPromotionList> resultHandler) throws TException {
				iface.getPromotionInfo(args.queryParam, resultHandler);
			}
		}

		public static class getPromotionLadder<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getPromotionLadder_args, RPromotionLadder> {
			public getPromotionLadder() {
				super("getPromotionLadder");
			}

			public getPromotionLadder_args getEmptyArgsInstance() {
				return new getPromotionLadder_args();
			}

			public AsyncMethodCallback<RPromotionLadder> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<RPromotionLadder>() {
					public void onComplete(RPromotionLadder o) {
						getPromotionLadder_result result = new getPromotionLadder_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						getPromotionLadder_result result = new getPromotionLadder_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getPromotionLadder_args args,
					org.apache.thrift.async.AsyncMethodCallback<RPromotionLadder> resultHandler) throws TException {
				iface.getPromotionLadder(args.queryParam, resultHandler);
			}
		}

		public static class getPromotionAndLadder<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getPromotionAndLadder_args, RPromotionAndLadder> {
			public getPromotionAndLadder() {
				super("getPromotionAndLadder");
			}

			public getPromotionAndLadder_args getEmptyArgsInstance() {
				return new getPromotionAndLadder_args();
			}

			public AsyncMethodCallback<RPromotionAndLadder> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<RPromotionAndLadder>() {
					public void onComplete(RPromotionAndLadder o) {
						getPromotionAndLadder_result result = new getPromotionAndLadder_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						getPromotionAndLadder_result result = new getPromotionAndLadder_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getPromotionAndLadder_args args,
					org.apache.thrift.async.AsyncMethodCallback<RPromotionAndLadder> resultHandler) throws TException {
				iface.getPromotionAndLadder(args.queryParam, resultHandler);
			}
		}

		public static class getItemPromotion<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getItemPromotion_args, RItemPromotion> {
			public getItemPromotion() {
				super("getItemPromotion");
			}

			public getItemPromotion_args getEmptyArgsInstance() {
				return new getItemPromotion_args();
			}

			public AsyncMethodCallback<RItemPromotion> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<RItemPromotion>() {
					public void onComplete(RItemPromotion o) {
						getItemPromotion_result result = new getItemPromotion_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						getItemPromotion_result result = new getItemPromotion_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getItemPromotion_args args,
					org.apache.thrift.async.AsyncMethodCallback<RItemPromotion> resultHandler) throws TException {
				iface.getItemPromotion(args.queryParam, resultHandler);
			}
		}

		public static class getItemPromotionInfo<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getItemPromotionInfo_args, RItemPromotionLadder> {
			public getItemPromotionInfo() {
				super("getItemPromotionInfo");
			}

			public getItemPromotionInfo_args getEmptyArgsInstance() {
				return new getItemPromotionInfo_args();
			}

			public AsyncMethodCallback<RItemPromotionLadder> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<RItemPromotionLadder>() {
					public void onComplete(RItemPromotionLadder o) {
						getItemPromotionInfo_result result = new getItemPromotionInfo_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						getItemPromotionInfo_result result = new getItemPromotionInfo_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getItemPromotionInfo_args args,
					org.apache.thrift.async.AsyncMethodCallback<RItemPromotionLadder> resultHandler) throws TException {
				iface.getItemPromotionInfo(args.queryParam, resultHandler);
			}
		}

	}

	public static class getPromotionInfo_args
			implements org.apache.thrift.TBase<getPromotionInfo_args, getPromotionInfo_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getPromotionInfo_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getPromotionInfo_args");

		private static final org.apache.thrift.protocol.TField QUERY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"queryParam", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getPromotionInfo_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getPromotionInfo_argsTupleSchemeFactory());
		}

		public QueryParam queryParam; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			QUERY_PARAM((short) 1, "queryParam");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY_PARAM
					return QUERY_PARAM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY_PARAM,
					new org.apache.thrift.meta_data.FieldMetaData("queryParam",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									QueryParam.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPromotionInfo_args.class, metaDataMap);
		}

		public getPromotionInfo_args() {
		}

		public getPromotionInfo_args(QueryParam queryParam) {
			this();
			this.queryParam = queryParam;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getPromotionInfo_args(getPromotionInfo_args other) {
			if (other.isSetQueryParam()) {
				this.queryParam = new QueryParam(other.queryParam);
			}
		}

		public getPromotionInfo_args deepCopy() {
			return new getPromotionInfo_args(this);
		}

		@Override
		public void clear() {
			this.queryParam = null;
		}

		public QueryParam getQueryParam() {
			return this.queryParam;
		}

		public getPromotionInfo_args setQueryParam(QueryParam queryParam) {
			this.queryParam = queryParam;
			return this;
		}

		public void unsetQueryParam() {
			this.queryParam = null;
		}

		/**
		 * Returns true if field queryParam is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetQueryParam() {
			return this.queryParam != null;
		}

		public void setQueryParamIsSet(boolean value) {
			if (!value) {
				this.queryParam = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case QUERY_PARAM:
				if (value == null) {
					unsetQueryParam();
				} else {
					setQueryParam((QueryParam) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY_PARAM:
				return getQueryParam();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case QUERY_PARAM:
				return isSetQueryParam();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getPromotionInfo_args)
				return this.equals((getPromotionInfo_args) that);
			return false;
		}

		public boolean equals(getPromotionInfo_args that) {
			if (that == null)
				return false;

			boolean this_present_queryParam = true && this.isSetQueryParam();
			boolean that_present_queryParam = true && that.isSetQueryParam();
			if (this_present_queryParam || that_present_queryParam) {
				if (!(this_present_queryParam && that_present_queryParam))
					return false;
				if (!this.queryParam.equals(that.queryParam))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_queryParam = true && (isSetQueryParam());
			list.add(present_queryParam);
			if (present_queryParam)
				list.add(queryParam);

			return list.hashCode();
		}

		@Override
		public int compareTo(getPromotionInfo_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetQueryParam()).compareTo(other.isSetQueryParam());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQueryParam()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryParam, other.queryParam);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getPromotionInfo_args(");
			boolean first = true;

			sb.append("queryParam:");
			if (this.queryParam == null) {
				sb.append("null");
			} else {
				sb.append(this.queryParam);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (queryParam != null) {
				queryParam.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getPromotionInfo_argsStandardSchemeFactory implements SchemeFactory {
			public getPromotionInfo_argsStandardScheme getScheme() {
				return new getPromotionInfo_argsStandardScheme();
			}
		}

		private static class getPromotionInfo_argsStandardScheme extends StandardScheme<getPromotionInfo_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getPromotionInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY_PARAM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.queryParam = new QueryParam();
							struct.queryParam.read(iprot);
							struct.setQueryParamIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getPromotionInfo_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.queryParam != null) {
					oprot.writeFieldBegin(QUERY_PARAM_FIELD_DESC);
					struct.queryParam.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getPromotionInfo_argsTupleSchemeFactory implements SchemeFactory {
			public getPromotionInfo_argsTupleScheme getScheme() {
				return new getPromotionInfo_argsTupleScheme();
			}
		}

		private static class getPromotionInfo_argsTupleScheme extends TupleScheme<getPromotionInfo_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getPromotionInfo_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetQueryParam()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQueryParam()) {
					struct.queryParam.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getPromotionInfo_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.queryParam = new QueryParam();
					struct.queryParam.read(iprot);
					struct.setQueryParamIsSet(true);
				}
			}
		}

	}

	public static class getPromotionInfo_result
			implements org.apache.thrift.TBase<getPromotionInfo_result, getPromotionInfo_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getPromotionInfo_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getPromotionInfo_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getPromotionInfo_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getPromotionInfo_resultTupleSchemeFactory());
		}

		public RPromotionList success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									RPromotionList.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPromotionInfo_result.class, metaDataMap);
		}

		public getPromotionInfo_result() {
		}

		public getPromotionInfo_result(RPromotionList success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getPromotionInfo_result(getPromotionInfo_result other) {
			if (other.isSetSuccess()) {
				this.success = new RPromotionList(other.success);
			}
		}

		public getPromotionInfo_result deepCopy() {
			return new getPromotionInfo_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public RPromotionList getSuccess() {
			return this.success;
		}

		public getPromotionInfo_result setSuccess(RPromotionList success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((RPromotionList) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getPromotionInfo_result)
				return this.equals((getPromotionInfo_result) that);
			return false;
		}

		public boolean equals(getPromotionInfo_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getPromotionInfo_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getPromotionInfo_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getPromotionInfo_resultStandardSchemeFactory implements SchemeFactory {
			public getPromotionInfo_resultStandardScheme getScheme() {
				return new getPromotionInfo_resultStandardScheme();
			}
		}

		private static class getPromotionInfo_resultStandardScheme extends StandardScheme<getPromotionInfo_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getPromotionInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new RPromotionList();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getPromotionInfo_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getPromotionInfo_resultTupleSchemeFactory implements SchemeFactory {
			public getPromotionInfo_resultTupleScheme getScheme() {
				return new getPromotionInfo_resultTupleScheme();
			}
		}

		private static class getPromotionInfo_resultTupleScheme extends TupleScheme<getPromotionInfo_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getPromotionInfo_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getPromotionInfo_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new RPromotionList();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getPromotionLadder_args
			implements org.apache.thrift.TBase<getPromotionLadder_args, getPromotionLadder_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getPromotionLadder_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getPromotionLadder_args");

		private static final org.apache.thrift.protocol.TField QUERY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"queryParam", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getPromotionLadder_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getPromotionLadder_argsTupleSchemeFactory());
		}

		public QueryParam queryParam; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			QUERY_PARAM((short) 1, "queryParam");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY_PARAM
					return QUERY_PARAM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY_PARAM,
					new org.apache.thrift.meta_data.FieldMetaData("queryParam",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									QueryParam.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPromotionLadder_args.class, metaDataMap);
		}

		public getPromotionLadder_args() {
		}

		public getPromotionLadder_args(QueryParam queryParam) {
			this();
			this.queryParam = queryParam;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getPromotionLadder_args(getPromotionLadder_args other) {
			if (other.isSetQueryParam()) {
				this.queryParam = new QueryParam(other.queryParam);
			}
		}

		public getPromotionLadder_args deepCopy() {
			return new getPromotionLadder_args(this);
		}

		@Override
		public void clear() {
			this.queryParam = null;
		}

		public QueryParam getQueryParam() {
			return this.queryParam;
		}

		public getPromotionLadder_args setQueryParam(QueryParam queryParam) {
			this.queryParam = queryParam;
			return this;
		}

		public void unsetQueryParam() {
			this.queryParam = null;
		}

		/**
		 * Returns true if field queryParam is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetQueryParam() {
			return this.queryParam != null;
		}

		public void setQueryParamIsSet(boolean value) {
			if (!value) {
				this.queryParam = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case QUERY_PARAM:
				if (value == null) {
					unsetQueryParam();
				} else {
					setQueryParam((QueryParam) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY_PARAM:
				return getQueryParam();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case QUERY_PARAM:
				return isSetQueryParam();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getPromotionLadder_args)
				return this.equals((getPromotionLadder_args) that);
			return false;
		}

		public boolean equals(getPromotionLadder_args that) {
			if (that == null)
				return false;

			boolean this_present_queryParam = true && this.isSetQueryParam();
			boolean that_present_queryParam = true && that.isSetQueryParam();
			if (this_present_queryParam || that_present_queryParam) {
				if (!(this_present_queryParam && that_present_queryParam))
					return false;
				if (!this.queryParam.equals(that.queryParam))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_queryParam = true && (isSetQueryParam());
			list.add(present_queryParam);
			if (present_queryParam)
				list.add(queryParam);

			return list.hashCode();
		}

		@Override
		public int compareTo(getPromotionLadder_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetQueryParam()).compareTo(other.isSetQueryParam());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQueryParam()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryParam, other.queryParam);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getPromotionLadder_args(");
			boolean first = true;

			sb.append("queryParam:");
			if (this.queryParam == null) {
				sb.append("null");
			} else {
				sb.append(this.queryParam);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (queryParam != null) {
				queryParam.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getPromotionLadder_argsStandardSchemeFactory implements SchemeFactory {
			public getPromotionLadder_argsStandardScheme getScheme() {
				return new getPromotionLadder_argsStandardScheme();
			}
		}

		private static class getPromotionLadder_argsStandardScheme extends StandardScheme<getPromotionLadder_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getPromotionLadder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY_PARAM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.queryParam = new QueryParam();
							struct.queryParam.read(iprot);
							struct.setQueryParamIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getPromotionLadder_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.queryParam != null) {
					oprot.writeFieldBegin(QUERY_PARAM_FIELD_DESC);
					struct.queryParam.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getPromotionLadder_argsTupleSchemeFactory implements SchemeFactory {
			public getPromotionLadder_argsTupleScheme getScheme() {
				return new getPromotionLadder_argsTupleScheme();
			}
		}

		private static class getPromotionLadder_argsTupleScheme extends TupleScheme<getPromotionLadder_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getPromotionLadder_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetQueryParam()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQueryParam()) {
					struct.queryParam.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getPromotionLadder_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.queryParam = new QueryParam();
					struct.queryParam.read(iprot);
					struct.setQueryParamIsSet(true);
				}
			}
		}

	}

	public static class getPromotionLadder_result
			implements org.apache.thrift.TBase<getPromotionLadder_result, getPromotionLadder_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getPromotionLadder_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getPromotionLadder_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getPromotionLadder_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getPromotionLadder_resultTupleSchemeFactory());
		}

		public RPromotionLadder success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									RPromotionLadder.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPromotionLadder_result.class,
					metaDataMap);
		}

		public getPromotionLadder_result() {
		}

		public getPromotionLadder_result(RPromotionLadder success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getPromotionLadder_result(getPromotionLadder_result other) {
			if (other.isSetSuccess()) {
				this.success = new RPromotionLadder(other.success);
			}
		}

		public getPromotionLadder_result deepCopy() {
			return new getPromotionLadder_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public RPromotionLadder getSuccess() {
			return this.success;
		}

		public getPromotionLadder_result setSuccess(RPromotionLadder success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((RPromotionLadder) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getPromotionLadder_result)
				return this.equals((getPromotionLadder_result) that);
			return false;
		}

		public boolean equals(getPromotionLadder_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getPromotionLadder_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getPromotionLadder_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getPromotionLadder_resultStandardSchemeFactory implements SchemeFactory {
			public getPromotionLadder_resultStandardScheme getScheme() {
				return new getPromotionLadder_resultStandardScheme();
			}
		}

		private static class getPromotionLadder_resultStandardScheme extends StandardScheme<getPromotionLadder_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getPromotionLadder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new RPromotionLadder();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getPromotionLadder_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getPromotionLadder_resultTupleSchemeFactory implements SchemeFactory {
			public getPromotionLadder_resultTupleScheme getScheme() {
				return new getPromotionLadder_resultTupleScheme();
			}
		}

		private static class getPromotionLadder_resultTupleScheme extends TupleScheme<getPromotionLadder_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getPromotionLadder_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getPromotionLadder_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new RPromotionLadder();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getPromotionAndLadder_args
			implements org.apache.thrift.TBase<getPromotionAndLadder_args, getPromotionAndLadder_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getPromotionAndLadder_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getPromotionAndLadder_args");

		private static final org.apache.thrift.protocol.TField QUERY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"queryParam", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getPromotionAndLadder_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getPromotionAndLadder_argsTupleSchemeFactory());
		}

		public QueryParam queryParam; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			QUERY_PARAM((short) 1, "queryParam");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY_PARAM
					return QUERY_PARAM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY_PARAM,
					new org.apache.thrift.meta_data.FieldMetaData("queryParam",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									QueryParam.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPromotionAndLadder_args.class,
					metaDataMap);
		}

		public getPromotionAndLadder_args() {
		}

		public getPromotionAndLadder_args(QueryParam queryParam) {
			this();
			this.queryParam = queryParam;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getPromotionAndLadder_args(getPromotionAndLadder_args other) {
			if (other.isSetQueryParam()) {
				this.queryParam = new QueryParam(other.queryParam);
			}
		}

		public getPromotionAndLadder_args deepCopy() {
			return new getPromotionAndLadder_args(this);
		}

		@Override
		public void clear() {
			this.queryParam = null;
		}

		public QueryParam getQueryParam() {
			return this.queryParam;
		}

		public getPromotionAndLadder_args setQueryParam(QueryParam queryParam) {
			this.queryParam = queryParam;
			return this;
		}

		public void unsetQueryParam() {
			this.queryParam = null;
		}

		/**
		 * Returns true if field queryParam is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetQueryParam() {
			return this.queryParam != null;
		}

		public void setQueryParamIsSet(boolean value) {
			if (!value) {
				this.queryParam = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case QUERY_PARAM:
				if (value == null) {
					unsetQueryParam();
				} else {
					setQueryParam((QueryParam) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY_PARAM:
				return getQueryParam();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case QUERY_PARAM:
				return isSetQueryParam();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getPromotionAndLadder_args)
				return this.equals((getPromotionAndLadder_args) that);
			return false;
		}

		public boolean equals(getPromotionAndLadder_args that) {
			if (that == null)
				return false;

			boolean this_present_queryParam = true && this.isSetQueryParam();
			boolean that_present_queryParam = true && that.isSetQueryParam();
			if (this_present_queryParam || that_present_queryParam) {
				if (!(this_present_queryParam && that_present_queryParam))
					return false;
				if (!this.queryParam.equals(that.queryParam))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_queryParam = true && (isSetQueryParam());
			list.add(present_queryParam);
			if (present_queryParam)
				list.add(queryParam);

			return list.hashCode();
		}

		@Override
		public int compareTo(getPromotionAndLadder_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetQueryParam()).compareTo(other.isSetQueryParam());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQueryParam()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryParam, other.queryParam);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getPromotionAndLadder_args(");
			boolean first = true;

			sb.append("queryParam:");
			if (this.queryParam == null) {
				sb.append("null");
			} else {
				sb.append(this.queryParam);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (queryParam != null) {
				queryParam.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getPromotionAndLadder_argsStandardSchemeFactory implements SchemeFactory {
			public getPromotionAndLadder_argsStandardScheme getScheme() {
				return new getPromotionAndLadder_argsStandardScheme();
			}
		}

		private static class getPromotionAndLadder_argsStandardScheme
				extends StandardScheme<getPromotionAndLadder_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getPromotionAndLadder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY_PARAM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.queryParam = new QueryParam();
							struct.queryParam.read(iprot);
							struct.setQueryParamIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getPromotionAndLadder_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.queryParam != null) {
					oprot.writeFieldBegin(QUERY_PARAM_FIELD_DESC);
					struct.queryParam.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getPromotionAndLadder_argsTupleSchemeFactory implements SchemeFactory {
			public getPromotionAndLadder_argsTupleScheme getScheme() {
				return new getPromotionAndLadder_argsTupleScheme();
			}
		}

		private static class getPromotionAndLadder_argsTupleScheme extends TupleScheme<getPromotionAndLadder_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getPromotionAndLadder_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetQueryParam()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQueryParam()) {
					struct.queryParam.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getPromotionAndLadder_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.queryParam = new QueryParam();
					struct.queryParam.read(iprot);
					struct.setQueryParamIsSet(true);
				}
			}
		}

	}

	public static class getPromotionAndLadder_result
			implements org.apache.thrift.TBase<getPromotionAndLadder_result, getPromotionAndLadder_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getPromotionAndLadder_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getPromotionAndLadder_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getPromotionAndLadder_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getPromotionAndLadder_resultTupleSchemeFactory());
		}

		public RPromotionAndLadder success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									RPromotionAndLadder.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPromotionAndLadder_result.class,
					metaDataMap);
		}

		public getPromotionAndLadder_result() {
		}

		public getPromotionAndLadder_result(RPromotionAndLadder success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getPromotionAndLadder_result(getPromotionAndLadder_result other) {
			if (other.isSetSuccess()) {
				this.success = new RPromotionAndLadder(other.success);
			}
		}

		public getPromotionAndLadder_result deepCopy() {
			return new getPromotionAndLadder_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public RPromotionAndLadder getSuccess() {
			return this.success;
		}

		public getPromotionAndLadder_result setSuccess(RPromotionAndLadder success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((RPromotionAndLadder) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getPromotionAndLadder_result)
				return this.equals((getPromotionAndLadder_result) that);
			return false;
		}

		public boolean equals(getPromotionAndLadder_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getPromotionAndLadder_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getPromotionAndLadder_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getPromotionAndLadder_resultStandardSchemeFactory implements SchemeFactory {
			public getPromotionAndLadder_resultStandardScheme getScheme() {
				return new getPromotionAndLadder_resultStandardScheme();
			}
		}

		private static class getPromotionAndLadder_resultStandardScheme
				extends StandardScheme<getPromotionAndLadder_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getPromotionAndLadder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new RPromotionAndLadder();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getPromotionAndLadder_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getPromotionAndLadder_resultTupleSchemeFactory implements SchemeFactory {
			public getPromotionAndLadder_resultTupleScheme getScheme() {
				return new getPromotionAndLadder_resultTupleScheme();
			}
		}

		private static class getPromotionAndLadder_resultTupleScheme extends TupleScheme<getPromotionAndLadder_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getPromotionAndLadder_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getPromotionAndLadder_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new RPromotionAndLadder();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getItemPromotion_args
			implements org.apache.thrift.TBase<getItemPromotion_args, getItemPromotion_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getItemPromotion_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getItemPromotion_args");

		private static final org.apache.thrift.protocol.TField QUERY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"queryParam", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getItemPromotion_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getItemPromotion_argsTupleSchemeFactory());
		}

		public QueryParam queryParam; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			QUERY_PARAM((short) 1, "queryParam");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY_PARAM
					return QUERY_PARAM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY_PARAM,
					new org.apache.thrift.meta_data.FieldMetaData("queryParam",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									QueryParam.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItemPromotion_args.class, metaDataMap);
		}

		public getItemPromotion_args() {
		}

		public getItemPromotion_args(QueryParam queryParam) {
			this();
			this.queryParam = queryParam;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getItemPromotion_args(getItemPromotion_args other) {
			if (other.isSetQueryParam()) {
				this.queryParam = new QueryParam(other.queryParam);
			}
		}

		public getItemPromotion_args deepCopy() {
			return new getItemPromotion_args(this);
		}

		@Override
		public void clear() {
			this.queryParam = null;
		}

		public QueryParam getQueryParam() {
			return this.queryParam;
		}

		public getItemPromotion_args setQueryParam(QueryParam queryParam) {
			this.queryParam = queryParam;
			return this;
		}

		public void unsetQueryParam() {
			this.queryParam = null;
		}

		/**
		 * Returns true if field queryParam is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetQueryParam() {
			return this.queryParam != null;
		}

		public void setQueryParamIsSet(boolean value) {
			if (!value) {
				this.queryParam = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case QUERY_PARAM:
				if (value == null) {
					unsetQueryParam();
				} else {
					setQueryParam((QueryParam) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY_PARAM:
				return getQueryParam();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case QUERY_PARAM:
				return isSetQueryParam();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getItemPromotion_args)
				return this.equals((getItemPromotion_args) that);
			return false;
		}

		public boolean equals(getItemPromotion_args that) {
			if (that == null)
				return false;

			boolean this_present_queryParam = true && this.isSetQueryParam();
			boolean that_present_queryParam = true && that.isSetQueryParam();
			if (this_present_queryParam || that_present_queryParam) {
				if (!(this_present_queryParam && that_present_queryParam))
					return false;
				if (!this.queryParam.equals(that.queryParam))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_queryParam = true && (isSetQueryParam());
			list.add(present_queryParam);
			if (present_queryParam)
				list.add(queryParam);

			return list.hashCode();
		}

		@Override
		public int compareTo(getItemPromotion_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetQueryParam()).compareTo(other.isSetQueryParam());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQueryParam()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryParam, other.queryParam);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getItemPromotion_args(");
			boolean first = true;

			sb.append("queryParam:");
			if (this.queryParam == null) {
				sb.append("null");
			} else {
				sb.append(this.queryParam);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (queryParam != null) {
				queryParam.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getItemPromotion_argsStandardSchemeFactory implements SchemeFactory {
			public getItemPromotion_argsStandardScheme getScheme() {
				return new getItemPromotion_argsStandardScheme();
			}
		}

		private static class getItemPromotion_argsStandardScheme extends StandardScheme<getItemPromotion_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getItemPromotion_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY_PARAM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.queryParam = new QueryParam();
							struct.queryParam.read(iprot);
							struct.setQueryParamIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getItemPromotion_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.queryParam != null) {
					oprot.writeFieldBegin(QUERY_PARAM_FIELD_DESC);
					struct.queryParam.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getItemPromotion_argsTupleSchemeFactory implements SchemeFactory {
			public getItemPromotion_argsTupleScheme getScheme() {
				return new getItemPromotion_argsTupleScheme();
			}
		}

		private static class getItemPromotion_argsTupleScheme extends TupleScheme<getItemPromotion_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getItemPromotion_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetQueryParam()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQueryParam()) {
					struct.queryParam.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getItemPromotion_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.queryParam = new QueryParam();
					struct.queryParam.read(iprot);
					struct.setQueryParamIsSet(true);
				}
			}
		}

	}

	public static class getItemPromotion_result
			implements org.apache.thrift.TBase<getItemPromotion_result, getItemPromotion_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getItemPromotion_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getItemPromotion_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getItemPromotion_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getItemPromotion_resultTupleSchemeFactory());
		}

		public RItemPromotion success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									RItemPromotion.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItemPromotion_result.class, metaDataMap);
		}

		public getItemPromotion_result() {
		}

		public getItemPromotion_result(RItemPromotion success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getItemPromotion_result(getItemPromotion_result other) {
			if (other.isSetSuccess()) {
				this.success = new RItemPromotion(other.success);
			}
		}

		public getItemPromotion_result deepCopy() {
			return new getItemPromotion_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public RItemPromotion getSuccess() {
			return this.success;
		}

		public getItemPromotion_result setSuccess(RItemPromotion success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((RItemPromotion) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getItemPromotion_result)
				return this.equals((getItemPromotion_result) that);
			return false;
		}

		public boolean equals(getItemPromotion_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getItemPromotion_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getItemPromotion_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getItemPromotion_resultStandardSchemeFactory implements SchemeFactory {
			public getItemPromotion_resultStandardScheme getScheme() {
				return new getItemPromotion_resultStandardScheme();
			}
		}

		private static class getItemPromotion_resultStandardScheme extends StandardScheme<getItemPromotion_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getItemPromotion_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new RItemPromotion();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getItemPromotion_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getItemPromotion_resultTupleSchemeFactory implements SchemeFactory {
			public getItemPromotion_resultTupleScheme getScheme() {
				return new getItemPromotion_resultTupleScheme();
			}
		}

		private static class getItemPromotion_resultTupleScheme extends TupleScheme<getItemPromotion_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getItemPromotion_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getItemPromotion_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new RItemPromotion();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getItemPromotionInfo_args
			implements org.apache.thrift.TBase<getItemPromotionInfo_args, getItemPromotionInfo_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getItemPromotionInfo_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getItemPromotionInfo_args");

		private static final org.apache.thrift.protocol.TField QUERY_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"queryParam", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getItemPromotionInfo_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getItemPromotionInfo_argsTupleSchemeFactory());
		}

		public QueryParam queryParam; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			QUERY_PARAM((short) 1, "queryParam");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY_PARAM
					return QUERY_PARAM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY_PARAM,
					new org.apache.thrift.meta_data.FieldMetaData("queryParam",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									QueryParam.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItemPromotionInfo_args.class,
					metaDataMap);
		}

		public getItemPromotionInfo_args() {
		}

		public getItemPromotionInfo_args(QueryParam queryParam) {
			this();
			this.queryParam = queryParam;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getItemPromotionInfo_args(getItemPromotionInfo_args other) {
			if (other.isSetQueryParam()) {
				this.queryParam = new QueryParam(other.queryParam);
			}
		}

		public getItemPromotionInfo_args deepCopy() {
			return new getItemPromotionInfo_args(this);
		}

		@Override
		public void clear() {
			this.queryParam = null;
		}

		public QueryParam getQueryParam() {
			return this.queryParam;
		}

		public getItemPromotionInfo_args setQueryParam(QueryParam queryParam) {
			this.queryParam = queryParam;
			return this;
		}

		public void unsetQueryParam() {
			this.queryParam = null;
		}

		/**
		 * Returns true if field queryParam is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetQueryParam() {
			return this.queryParam != null;
		}

		public void setQueryParamIsSet(boolean value) {
			if (!value) {
				this.queryParam = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case QUERY_PARAM:
				if (value == null) {
					unsetQueryParam();
				} else {
					setQueryParam((QueryParam) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY_PARAM:
				return getQueryParam();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case QUERY_PARAM:
				return isSetQueryParam();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getItemPromotionInfo_args)
				return this.equals((getItemPromotionInfo_args) that);
			return false;
		}

		public boolean equals(getItemPromotionInfo_args that) {
			if (that == null)
				return false;

			boolean this_present_queryParam = true && this.isSetQueryParam();
			boolean that_present_queryParam = true && that.isSetQueryParam();
			if (this_present_queryParam || that_present_queryParam) {
				if (!(this_present_queryParam && that_present_queryParam))
					return false;
				if (!this.queryParam.equals(that.queryParam))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_queryParam = true && (isSetQueryParam());
			list.add(present_queryParam);
			if (present_queryParam)
				list.add(queryParam);

			return list.hashCode();
		}

		@Override
		public int compareTo(getItemPromotionInfo_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetQueryParam()).compareTo(other.isSetQueryParam());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQueryParam()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryParam, other.queryParam);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getItemPromotionInfo_args(");
			boolean first = true;

			sb.append("queryParam:");
			if (this.queryParam == null) {
				sb.append("null");
			} else {
				sb.append(this.queryParam);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (queryParam != null) {
				queryParam.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getItemPromotionInfo_argsStandardSchemeFactory implements SchemeFactory {
			public getItemPromotionInfo_argsStandardScheme getScheme() {
				return new getItemPromotionInfo_argsStandardScheme();
			}
		}

		private static class getItemPromotionInfo_argsStandardScheme extends StandardScheme<getItemPromotionInfo_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getItemPromotionInfo_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY_PARAM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.queryParam = new QueryParam();
							struct.queryParam.read(iprot);
							struct.setQueryParamIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getItemPromotionInfo_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.queryParam != null) {
					oprot.writeFieldBegin(QUERY_PARAM_FIELD_DESC);
					struct.queryParam.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getItemPromotionInfo_argsTupleSchemeFactory implements SchemeFactory {
			public getItemPromotionInfo_argsTupleScheme getScheme() {
				return new getItemPromotionInfo_argsTupleScheme();
			}
		}

		private static class getItemPromotionInfo_argsTupleScheme extends TupleScheme<getItemPromotionInfo_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getItemPromotionInfo_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetQueryParam()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQueryParam()) {
					struct.queryParam.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getItemPromotionInfo_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.queryParam = new QueryParam();
					struct.queryParam.read(iprot);
					struct.setQueryParamIsSet(true);
				}
			}
		}

	}

	public static class getItemPromotionInfo_result
			implements org.apache.thrift.TBase<getItemPromotionInfo_result, getItemPromotionInfo_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getItemPromotionInfo_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getItemPromotionInfo_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getItemPromotionInfo_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getItemPromotionInfo_resultTupleSchemeFactory());
		}

		public RItemPromotionLadder success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									RItemPromotionLadder.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getItemPromotionInfo_result.class,
					metaDataMap);
		}

		public getItemPromotionInfo_result() {
		}

		public getItemPromotionInfo_result(RItemPromotionLadder success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getItemPromotionInfo_result(getItemPromotionInfo_result other) {
			if (other.isSetSuccess()) {
				this.success = new RItemPromotionLadder(other.success);
			}
		}

		public getItemPromotionInfo_result deepCopy() {
			return new getItemPromotionInfo_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public RItemPromotionLadder getSuccess() {
			return this.success;
		}

		public getItemPromotionInfo_result setSuccess(RItemPromotionLadder success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((RItemPromotionLadder) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getItemPromotionInfo_result)
				return this.equals((getItemPromotionInfo_result) that);
			return false;
		}

		public boolean equals(getItemPromotionInfo_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getItemPromotionInfo_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getItemPromotionInfo_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getItemPromotionInfo_resultStandardSchemeFactory implements SchemeFactory {
			public getItemPromotionInfo_resultStandardScheme getScheme() {
				return new getItemPromotionInfo_resultStandardScheme();
			}
		}

		private static class getItemPromotionInfo_resultStandardScheme
				extends StandardScheme<getItemPromotionInfo_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getItemPromotionInfo_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new RItemPromotionLadder();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getItemPromotionInfo_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getItemPromotionInfo_resultTupleSchemeFactory implements SchemeFactory {
			public getItemPromotionInfo_resultTupleScheme getScheme() {
				return new getItemPromotionInfo_resultTupleScheme();
			}
		}

		private static class getItemPromotionInfo_resultTupleScheme extends TupleScheme<getItemPromotionInfo_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getItemPromotionInfo_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getItemPromotionInfo_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new RItemPromotionLadder();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
