/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TResultOrderListOfOrderInfo
		implements org.apache.thrift.TBase<TResultOrderListOfOrderInfo, TResultOrderListOfOrderInfo._Fields>,
		java.io.Serializable, Cloneable, Comparable<TResultOrderListOfOrderInfo> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TResultOrderListOfOrderInfo");

	private static final org.apache.thrift.protocol.TField SUPERIOR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"superiorCode", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField IS_GROUPON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isGroupon", org.apache.thrift.protocol.TType.I32, (short) 2);
	private static final org.apache.thrift.protocol.TField ORDER_ITEM_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderItemCount", org.apache.thrift.protocol.TType.I32, (short) 3);
	private static final org.apache.thrift.protocol.TField IS_SPLIT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isSplit", org.apache.thrift.protocol.TType.I32, (short) 4);
	private static final org.apache.thrift.protocol.TField IS_PAID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isPaid", org.apache.thrift.protocol.TType.I32, (short) 5);
	private static final org.apache.thrift.protocol.TField PAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payTime", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField ORDER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderTime", org.apache.thrift.protocol.TType.STRING, (short) 7);
	private static final org.apache.thrift.protocol.TField SHOW_CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"showCancel", org.apache.thrift.protocol.TType.I32, (short) 8);
	private static final org.apache.thrift.protocol.TField SHOW_MODIFY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"showModify", org.apache.thrift.protocol.TType.I32, (short) 9);
	private static final org.apache.thrift.protocol.TField SHOW_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"showLevel", org.apache.thrift.protocol.TType.I32, (short) 10);
	private static final org.apache.thrift.protocol.TField PAY_ALL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payAllPrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 11);
	private static final org.apache.thrift.protocol.TField SHUT_DOWN_PAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"shutDownPayTime", org.apache.thrift.protocol.TType.I64, (short) 12);
	private static final org.apache.thrift.protocol.TField ORDER_LISTS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"orderLists", org.apache.thrift.protocol.TType.LIST, (short) 13);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TResultOrderListOfOrderInfoStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TResultOrderListOfOrderInfoTupleSchemeFactory());
	}

	public String superiorCode; // required
	public int isGroupon; // required
	public int orderItemCount; // required
	public int isSplit; // required
	public int isPaid; // required
	public String payTime; // required
	public String orderTime; // required
	public int showCancel; // required
	public int showModify; // required
	public int showLevel; // required
	public double payAllPrice; // required
	public long shutDownPayTime; // required
	public List<TResultOrderListOfSubOrder> orderLists; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		SUPERIOR_CODE((short) 1, "superiorCode"), IS_GROUPON((short) 2, "isGroupon"), ORDER_ITEM_COUNT((short) 3,
				"orderItemCount"), IS_SPLIT((short) 4, "isSplit"), IS_PAID((short) 5, "isPaid"), PAY_TIME((short) 6,
						"payTime"), ORDER_TIME((short) 7, "orderTime"), SHOW_CANCEL((short) 8,
								"showCancel"), SHOW_MODIFY((short) 9, "showModify"), SHOW_LEVEL((short) 10,
										"showLevel"), PAY_ALL_PRICE((short) 11, "payAllPrice"), SHUT_DOWN_PAY_TIME(
												(short) 12, "shutDownPayTime"), ORDER_LISTS((short) 13, "orderLists");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // SUPERIOR_CODE
				return SUPERIOR_CODE;
			case 2: // IS_GROUPON
				return IS_GROUPON;
			case 3: // ORDER_ITEM_COUNT
				return ORDER_ITEM_COUNT;
			case 4: // IS_SPLIT
				return IS_SPLIT;
			case 5: // IS_PAID
				return IS_PAID;
			case 6: // PAY_TIME
				return PAY_TIME;
			case 7: // ORDER_TIME
				return ORDER_TIME;
			case 8: // SHOW_CANCEL
				return SHOW_CANCEL;
			case 9: // SHOW_MODIFY
				return SHOW_MODIFY;
			case 10: // SHOW_LEVEL
				return SHOW_LEVEL;
			case 11: // PAY_ALL_PRICE
				return PAY_ALL_PRICE;
			case 12: // SHUT_DOWN_PAY_TIME
				return SHUT_DOWN_PAY_TIME;
			case 13: // ORDER_LISTS
				return ORDER_LISTS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ISGROUPON_ISSET_ID = 0;
	private static final int __ORDERITEMCOUNT_ISSET_ID = 1;
	private static final int __ISSPLIT_ISSET_ID = 2;
	private static final int __ISPAID_ISSET_ID = 3;
	private static final int __SHOWCANCEL_ISSET_ID = 4;
	private static final int __SHOWMODIFY_ISSET_ID = 5;
	private static final int __SHOWLEVEL_ISSET_ID = 6;
	private static final int __PAYALLPRICE_ISSET_ID = 7;
	private static final int __SHUTDOWNPAYTIME_ISSET_ID = 8;
	private short __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.SUPERIOR_CODE,
				new org.apache.thrift.meta_data.FieldMetaData("superiorCode",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_GROUPON,
				new org.apache.thrift.meta_data.FieldMetaData("isGroupon",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ORDER_ITEM_COUNT,
				new org.apache.thrift.meta_data.FieldMetaData("orderItemCount",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_SPLIT,
				new org.apache.thrift.meta_data.FieldMetaData("isSplit",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_PAID,
				new org.apache.thrift.meta_data.FieldMetaData("isPaid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PAY_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("payTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ORDER_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("orderTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SHOW_CANCEL,
				new org.apache.thrift.meta_data.FieldMetaData("showCancel",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SHOW_MODIFY,
				new org.apache.thrift.meta_data.FieldMetaData("showModify",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SHOW_LEVEL,
				new org.apache.thrift.meta_data.FieldMetaData("showLevel",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PAY_ALL_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("payAllPrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.SHUT_DOWN_PAY_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("shutDownPayTime",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.ORDER_LISTS,
				new org.apache.thrift.meta_data.FieldMetaData("orderLists",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
										TResultOrderListOfSubOrder.class))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultOrderListOfOrderInfo.class, metaDataMap);
	}

	public TResultOrderListOfOrderInfo() {
	}

	public TResultOrderListOfOrderInfo(String superiorCode, int isGroupon, int orderItemCount, int isSplit, int isPaid,
			String payTime, String orderTime, int showCancel, int showModify, int showLevel, double payAllPrice,
			long shutDownPayTime, List<TResultOrderListOfSubOrder> orderLists) {
		this();
		this.superiorCode = superiorCode;
		this.isGroupon = isGroupon;
		setIsGrouponIsSet(true);
		this.orderItemCount = orderItemCount;
		setOrderItemCountIsSet(true);
		this.isSplit = isSplit;
		setIsSplitIsSet(true);
		this.isPaid = isPaid;
		setIsPaidIsSet(true);
		this.payTime = payTime;
		this.orderTime = orderTime;
		this.showCancel = showCancel;
		setShowCancelIsSet(true);
		this.showModify = showModify;
		setShowModifyIsSet(true);
		this.showLevel = showLevel;
		setShowLevelIsSet(true);
		this.payAllPrice = payAllPrice;
		setPayAllPriceIsSet(true);
		this.shutDownPayTime = shutDownPayTime;
		setShutDownPayTimeIsSet(true);
		this.orderLists = orderLists;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TResultOrderListOfOrderInfo(TResultOrderListOfOrderInfo other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetSuperiorCode()) {
			this.superiorCode = other.superiorCode;
		}
		this.isGroupon = other.isGroupon;
		this.orderItemCount = other.orderItemCount;
		this.isSplit = other.isSplit;
		this.isPaid = other.isPaid;
		if (other.isSetPayTime()) {
			this.payTime = other.payTime;
		}
		if (other.isSetOrderTime()) {
			this.orderTime = other.orderTime;
		}
		this.showCancel = other.showCancel;
		this.showModify = other.showModify;
		this.showLevel = other.showLevel;
		this.payAllPrice = other.payAllPrice;
		this.shutDownPayTime = other.shutDownPayTime;
		if (other.isSetOrderLists()) {
			List<TResultOrderListOfSubOrder> __this__orderLists = new ArrayList<TResultOrderListOfSubOrder>(
					other.orderLists.size());
			for (TResultOrderListOfSubOrder other_element : other.orderLists) {
				__this__orderLists.add(new TResultOrderListOfSubOrder(other_element));
			}
			this.orderLists = __this__orderLists;
		}
	}

	public TResultOrderListOfOrderInfo deepCopy() {
		return new TResultOrderListOfOrderInfo(this);
	}

	@Override
	public void clear() {
		this.superiorCode = null;
		setIsGrouponIsSet(false);
		this.isGroupon = 0;
		setOrderItemCountIsSet(false);
		this.orderItemCount = 0;
		setIsSplitIsSet(false);
		this.isSplit = 0;
		setIsPaidIsSet(false);
		this.isPaid = 0;
		this.payTime = null;
		this.orderTime = null;
		setShowCancelIsSet(false);
		this.showCancel = 0;
		setShowModifyIsSet(false);
		this.showModify = 0;
		setShowLevelIsSet(false);
		this.showLevel = 0;
		setPayAllPriceIsSet(false);
		this.payAllPrice = 0.0;
		setShutDownPayTimeIsSet(false);
		this.shutDownPayTime = 0;
		this.orderLists = null;
	}

	public String getSuperiorCode() {
		return this.superiorCode;
	}

	public TResultOrderListOfOrderInfo setSuperiorCode(String superiorCode) {
		this.superiorCode = superiorCode;
		return this;
	}

	public void unsetSuperiorCode() {
		this.superiorCode = null;
	}

	/**
	 * Returns true if field superiorCode is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSuperiorCode() {
		return this.superiorCode != null;
	}

	public void setSuperiorCodeIsSet(boolean value) {
		if (!value) {
			this.superiorCode = null;
		}
	}

	public int getIsGroupon() {
		return this.isGroupon;
	}

	public TResultOrderListOfOrderInfo setIsGroupon(int isGroupon) {
		this.isGroupon = isGroupon;
		setIsGrouponIsSet(true);
		return this;
	}

	public void unsetIsGroupon() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGROUPON_ISSET_ID);
	}

	/**
	 * Returns true if field isGroupon is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetIsGroupon() {
		return EncodingUtils.testBit(__isset_bitfield, __ISGROUPON_ISSET_ID);
	}

	public void setIsGrouponIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGROUPON_ISSET_ID, value);
	}

	public int getOrderItemCount() {
		return this.orderItemCount;
	}

	public TResultOrderListOfOrderInfo setOrderItemCount(int orderItemCount) {
		this.orderItemCount = orderItemCount;
		setOrderItemCountIsSet(true);
		return this;
	}

	public void unsetOrderItemCount() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERITEMCOUNT_ISSET_ID);
	}

	/**
	 * Returns true if field orderItemCount is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetOrderItemCount() {
		return EncodingUtils.testBit(__isset_bitfield, __ORDERITEMCOUNT_ISSET_ID);
	}

	public void setOrderItemCountIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERITEMCOUNT_ISSET_ID, value);
	}

	public int getIsSplit() {
		return this.isSplit;
	}

	public TResultOrderListOfOrderInfo setIsSplit(int isSplit) {
		this.isSplit = isSplit;
		setIsSplitIsSet(true);
		return this;
	}

	public void unsetIsSplit() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSPLIT_ISSET_ID);
	}

	/**
	 * Returns true if field isSplit is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetIsSplit() {
		return EncodingUtils.testBit(__isset_bitfield, __ISSPLIT_ISSET_ID);
	}

	public void setIsSplitIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSPLIT_ISSET_ID, value);
	}

	public int getIsPaid() {
		return this.isPaid;
	}

	public TResultOrderListOfOrderInfo setIsPaid(int isPaid) {
		this.isPaid = isPaid;
		setIsPaidIsSet(true);
		return this;
	}

	public void unsetIsPaid() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPAID_ISSET_ID);
	}

	/**
	 * Returns true if field isPaid is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsPaid() {
		return EncodingUtils.testBit(__isset_bitfield, __ISPAID_ISSET_ID);
	}

	public void setIsPaidIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPAID_ISSET_ID, value);
	}

	public String getPayTime() {
		return this.payTime;
	}

	public TResultOrderListOfOrderInfo setPayTime(String payTime) {
		this.payTime = payTime;
		return this;
	}

	public void unsetPayTime() {
		this.payTime = null;
	}

	/**
	 * Returns true if field payTime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPayTime() {
		return this.payTime != null;
	}

	public void setPayTimeIsSet(boolean value) {
		if (!value) {
			this.payTime = null;
		}
	}

	public String getOrderTime() {
		return this.orderTime;
	}

	public TResultOrderListOfOrderInfo setOrderTime(String orderTime) {
		this.orderTime = orderTime;
		return this;
	}

	public void unsetOrderTime() {
		this.orderTime = null;
	}

	/**
	 * Returns true if field orderTime is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderTime() {
		return this.orderTime != null;
	}

	public void setOrderTimeIsSet(boolean value) {
		if (!value) {
			this.orderTime = null;
		}
	}

	public int getShowCancel() {
		return this.showCancel;
	}

	public TResultOrderListOfOrderInfo setShowCancel(int showCancel) {
		this.showCancel = showCancel;
		setShowCancelIsSet(true);
		return this;
	}

	public void unsetShowCancel() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWCANCEL_ISSET_ID);
	}

	/**
	 * Returns true if field showCancel is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetShowCancel() {
		return EncodingUtils.testBit(__isset_bitfield, __SHOWCANCEL_ISSET_ID);
	}

	public void setShowCancelIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWCANCEL_ISSET_ID, value);
	}

	public int getShowModify() {
		return this.showModify;
	}

	public TResultOrderListOfOrderInfo setShowModify(int showModify) {
		this.showModify = showModify;
		setShowModifyIsSet(true);
		return this;
	}

	public void unsetShowModify() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWMODIFY_ISSET_ID);
	}

	/**
	 * Returns true if field showModify is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetShowModify() {
		return EncodingUtils.testBit(__isset_bitfield, __SHOWMODIFY_ISSET_ID);
	}

	public void setShowModifyIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWMODIFY_ISSET_ID, value);
	}

	public int getShowLevel() {
		return this.showLevel;
	}

	public TResultOrderListOfOrderInfo setShowLevel(int showLevel) {
		this.showLevel = showLevel;
		setShowLevelIsSet(true);
		return this;
	}

	public void unsetShowLevel() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWLEVEL_ISSET_ID);
	}

	/**
	 * Returns true if field showLevel is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetShowLevel() {
		return EncodingUtils.testBit(__isset_bitfield, __SHOWLEVEL_ISSET_ID);
	}

	public void setShowLevelIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWLEVEL_ISSET_ID, value);
	}

	public double getPayAllPrice() {
		return this.payAllPrice;
	}

	public TResultOrderListOfOrderInfo setPayAllPrice(double payAllPrice) {
		this.payAllPrice = payAllPrice;
		setPayAllPriceIsSet(true);
		return this;
	}

	public void unsetPayAllPrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYALLPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field payAllPrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPayAllPrice() {
		return EncodingUtils.testBit(__isset_bitfield, __PAYALLPRICE_ISSET_ID);
	}

	public void setPayAllPriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYALLPRICE_ISSET_ID, value);
	}

	public long getShutDownPayTime() {
		return this.shutDownPayTime;
	}

	public TResultOrderListOfOrderInfo setShutDownPayTime(long shutDownPayTime) {
		this.shutDownPayTime = shutDownPayTime;
		setShutDownPayTimeIsSet(true);
		return this;
	}

	public void unsetShutDownPayTime() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHUTDOWNPAYTIME_ISSET_ID);
	}

	/**
	 * Returns true if field shutDownPayTime is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetShutDownPayTime() {
		return EncodingUtils.testBit(__isset_bitfield, __SHUTDOWNPAYTIME_ISSET_ID);
	}

	public void setShutDownPayTimeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHUTDOWNPAYTIME_ISSET_ID, value);
	}

	public int getOrderListsSize() {
		return (this.orderLists == null) ? 0 : this.orderLists.size();
	}

	public java.util.Iterator<TResultOrderListOfSubOrder> getOrderListsIterator() {
		return (this.orderLists == null) ? null : this.orderLists.iterator();
	}

	public void addToOrderLists(TResultOrderListOfSubOrder elem) {
		if (this.orderLists == null) {
			this.orderLists = new ArrayList<TResultOrderListOfSubOrder>();
		}
		this.orderLists.add(elem);
	}

	public List<TResultOrderListOfSubOrder> getOrderLists() {
		return this.orderLists;
	}

	public TResultOrderListOfOrderInfo setOrderLists(List<TResultOrderListOfSubOrder> orderLists) {
		this.orderLists = orderLists;
		return this;
	}

	public void unsetOrderLists() {
		this.orderLists = null;
	}

	/**
	 * Returns true if field orderLists is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetOrderLists() {
		return this.orderLists != null;
	}

	public void setOrderListsIsSet(boolean value) {
		if (!value) {
			this.orderLists = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case SUPERIOR_CODE:
			if (value == null) {
				unsetSuperiorCode();
			} else {
				setSuperiorCode((String) value);
			}
			break;

		case IS_GROUPON:
			if (value == null) {
				unsetIsGroupon();
			} else {
				setIsGroupon((Integer) value);
			}
			break;

		case ORDER_ITEM_COUNT:
			if (value == null) {
				unsetOrderItemCount();
			} else {
				setOrderItemCount((Integer) value);
			}
			break;

		case IS_SPLIT:
			if (value == null) {
				unsetIsSplit();
			} else {
				setIsSplit((Integer) value);
			}
			break;

		case IS_PAID:
			if (value == null) {
				unsetIsPaid();
			} else {
				setIsPaid((Integer) value);
			}
			break;

		case PAY_TIME:
			if (value == null) {
				unsetPayTime();
			} else {
				setPayTime((String) value);
			}
			break;

		case ORDER_TIME:
			if (value == null) {
				unsetOrderTime();
			} else {
				setOrderTime((String) value);
			}
			break;

		case SHOW_CANCEL:
			if (value == null) {
				unsetShowCancel();
			} else {
				setShowCancel((Integer) value);
			}
			break;

		case SHOW_MODIFY:
			if (value == null) {
				unsetShowModify();
			} else {
				setShowModify((Integer) value);
			}
			break;

		case SHOW_LEVEL:
			if (value == null) {
				unsetShowLevel();
			} else {
				setShowLevel((Integer) value);
			}
			break;

		case PAY_ALL_PRICE:
			if (value == null) {
				unsetPayAllPrice();
			} else {
				setPayAllPrice((Double) value);
			}
			break;

		case SHUT_DOWN_PAY_TIME:
			if (value == null) {
				unsetShutDownPayTime();
			} else {
				setShutDownPayTime((Long) value);
			}
			break;

		case ORDER_LISTS:
			if (value == null) {
				unsetOrderLists();
			} else {
				setOrderLists((List<TResultOrderListOfSubOrder>) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case SUPERIOR_CODE:
			return getSuperiorCode();

		case IS_GROUPON:
			return getIsGroupon();

		case ORDER_ITEM_COUNT:
			return getOrderItemCount();

		case IS_SPLIT:
			return getIsSplit();

		case IS_PAID:
			return getIsPaid();

		case PAY_TIME:
			return getPayTime();

		case ORDER_TIME:
			return getOrderTime();

		case SHOW_CANCEL:
			return getShowCancel();

		case SHOW_MODIFY:
			return getShowModify();

		case SHOW_LEVEL:
			return getShowLevel();

		case PAY_ALL_PRICE:
			return getPayAllPrice();

		case SHUT_DOWN_PAY_TIME:
			return getShutDownPayTime();

		case ORDER_LISTS:
			return getOrderLists();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case SUPERIOR_CODE:
			return isSetSuperiorCode();
		case IS_GROUPON:
			return isSetIsGroupon();
		case ORDER_ITEM_COUNT:
			return isSetOrderItemCount();
		case IS_SPLIT:
			return isSetIsSplit();
		case IS_PAID:
			return isSetIsPaid();
		case PAY_TIME:
			return isSetPayTime();
		case ORDER_TIME:
			return isSetOrderTime();
		case SHOW_CANCEL:
			return isSetShowCancel();
		case SHOW_MODIFY:
			return isSetShowModify();
		case SHOW_LEVEL:
			return isSetShowLevel();
		case PAY_ALL_PRICE:
			return isSetPayAllPrice();
		case SHUT_DOWN_PAY_TIME:
			return isSetShutDownPayTime();
		case ORDER_LISTS:
			return isSetOrderLists();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TResultOrderListOfOrderInfo)
			return this.equals((TResultOrderListOfOrderInfo) that);
		return false;
	}

	public boolean equals(TResultOrderListOfOrderInfo that) {
		if (that == null)
			return false;

		boolean this_present_superiorCode = true && this.isSetSuperiorCode();
		boolean that_present_superiorCode = true && that.isSetSuperiorCode();
		if (this_present_superiorCode || that_present_superiorCode) {
			if (!(this_present_superiorCode && that_present_superiorCode))
				return false;
			if (!this.superiorCode.equals(that.superiorCode))
				return false;
		}

		boolean this_present_isGroupon = true;
		boolean that_present_isGroupon = true;
		if (this_present_isGroupon || that_present_isGroupon) {
			if (!(this_present_isGroupon && that_present_isGroupon))
				return false;
			if (this.isGroupon != that.isGroupon)
				return false;
		}

		boolean this_present_orderItemCount = true;
		boolean that_present_orderItemCount = true;
		if (this_present_orderItemCount || that_present_orderItemCount) {
			if (!(this_present_orderItemCount && that_present_orderItemCount))
				return false;
			if (this.orderItemCount != that.orderItemCount)
				return false;
		}

		boolean this_present_isSplit = true;
		boolean that_present_isSplit = true;
		if (this_present_isSplit || that_present_isSplit) {
			if (!(this_present_isSplit && that_present_isSplit))
				return false;
			if (this.isSplit != that.isSplit)
				return false;
		}

		boolean this_present_isPaid = true;
		boolean that_present_isPaid = true;
		if (this_present_isPaid || that_present_isPaid) {
			if (!(this_present_isPaid && that_present_isPaid))
				return false;
			if (this.isPaid != that.isPaid)
				return false;
		}

		boolean this_present_payTime = true && this.isSetPayTime();
		boolean that_present_payTime = true && that.isSetPayTime();
		if (this_present_payTime || that_present_payTime) {
			if (!(this_present_payTime && that_present_payTime))
				return false;
			if (!this.payTime.equals(that.payTime))
				return false;
		}

		boolean this_present_orderTime = true && this.isSetOrderTime();
		boolean that_present_orderTime = true && that.isSetOrderTime();
		if (this_present_orderTime || that_present_orderTime) {
			if (!(this_present_orderTime && that_present_orderTime))
				return false;
			if (!this.orderTime.equals(that.orderTime))
				return false;
		}

		boolean this_present_showCancel = true;
		boolean that_present_showCancel = true;
		if (this_present_showCancel || that_present_showCancel) {
			if (!(this_present_showCancel && that_present_showCancel))
				return false;
			if (this.showCancel != that.showCancel)
				return false;
		}

		boolean this_present_showModify = true;
		boolean that_present_showModify = true;
		if (this_present_showModify || that_present_showModify) {
			if (!(this_present_showModify && that_present_showModify))
				return false;
			if (this.showModify != that.showModify)
				return false;
		}

		boolean this_present_showLevel = true;
		boolean that_present_showLevel = true;
		if (this_present_showLevel || that_present_showLevel) {
			if (!(this_present_showLevel && that_present_showLevel))
				return false;
			if (this.showLevel != that.showLevel)
				return false;
		}

		boolean this_present_payAllPrice = true;
		boolean that_present_payAllPrice = true;
		if (this_present_payAllPrice || that_present_payAllPrice) {
			if (!(this_present_payAllPrice && that_present_payAllPrice))
				return false;
			if (this.payAllPrice != that.payAllPrice)
				return false;
		}

		boolean this_present_shutDownPayTime = true;
		boolean that_present_shutDownPayTime = true;
		if (this_present_shutDownPayTime || that_present_shutDownPayTime) {
			if (!(this_present_shutDownPayTime && that_present_shutDownPayTime))
				return false;
			if (this.shutDownPayTime != that.shutDownPayTime)
				return false;
		}

		boolean this_present_orderLists = true && this.isSetOrderLists();
		boolean that_present_orderLists = true && that.isSetOrderLists();
		if (this_present_orderLists || that_present_orderLists) {
			if (!(this_present_orderLists && that_present_orderLists))
				return false;
			if (!this.orderLists.equals(that.orderLists))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_superiorCode = true && (isSetSuperiorCode());
		list.add(present_superiorCode);
		if (present_superiorCode)
			list.add(superiorCode);

		boolean present_isGroupon = true;
		list.add(present_isGroupon);
		if (present_isGroupon)
			list.add(isGroupon);

		boolean present_orderItemCount = true;
		list.add(present_orderItemCount);
		if (present_orderItemCount)
			list.add(orderItemCount);

		boolean present_isSplit = true;
		list.add(present_isSplit);
		if (present_isSplit)
			list.add(isSplit);

		boolean present_isPaid = true;
		list.add(present_isPaid);
		if (present_isPaid)
			list.add(isPaid);

		boolean present_payTime = true && (isSetPayTime());
		list.add(present_payTime);
		if (present_payTime)
			list.add(payTime);

		boolean present_orderTime = true && (isSetOrderTime());
		list.add(present_orderTime);
		if (present_orderTime)
			list.add(orderTime);

		boolean present_showCancel = true;
		list.add(present_showCancel);
		if (present_showCancel)
			list.add(showCancel);

		boolean present_showModify = true;
		list.add(present_showModify);
		if (present_showModify)
			list.add(showModify);

		boolean present_showLevel = true;
		list.add(present_showLevel);
		if (present_showLevel)
			list.add(showLevel);

		boolean present_payAllPrice = true;
		list.add(present_payAllPrice);
		if (present_payAllPrice)
			list.add(payAllPrice);

		boolean present_shutDownPayTime = true;
		list.add(present_shutDownPayTime);
		if (present_shutDownPayTime)
			list.add(shutDownPayTime);

		boolean present_orderLists = true && (isSetOrderLists());
		list.add(present_orderLists);
		if (present_orderLists)
			list.add(orderLists);

		return list.hashCode();
	}

	@Override
	public int compareTo(TResultOrderListOfOrderInfo other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetSuperiorCode()).compareTo(other.isSetSuperiorCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSuperiorCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superiorCode, other.superiorCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsGroupon()).compareTo(other.isSetIsGroupon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsGroupon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGroupon, other.isGroupon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderItemCount()).compareTo(other.isSetOrderItemCount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderItemCount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderItemCount, other.orderItemCount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsSplit()).compareTo(other.isSetIsSplit());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsSplit()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSplit, other.isSplit);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsPaid()).compareTo(other.isSetIsPaid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsPaid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPaid, other.isPaid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPayTime()).compareTo(other.isSetPayTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payTime, other.payTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderTime()).compareTo(other.isSetOrderTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTime, other.orderTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetShowCancel()).compareTo(other.isSetShowCancel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetShowCancel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showCancel, other.showCancel);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetShowModify()).compareTo(other.isSetShowModify());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetShowModify()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showModify, other.showModify);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetShowLevel()).compareTo(other.isSetShowLevel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetShowLevel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showLevel, other.showLevel);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPayAllPrice()).compareTo(other.isSetPayAllPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayAllPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payAllPrice, other.payAllPrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetShutDownPayTime()).compareTo(other.isSetShutDownPayTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetShutDownPayTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shutDownPayTime, other.shutDownPayTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOrderLists()).compareTo(other.isSetOrderLists());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOrderLists()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderLists, other.orderLists);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TResultOrderListOfOrderInfo(");
		boolean first = true;

		sb.append("superiorCode:");
		if (this.superiorCode == null) {
			sb.append("null");
		} else {
			sb.append(this.superiorCode);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isGroupon:");
		sb.append(this.isGroupon);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderItemCount:");
		sb.append(this.orderItemCount);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isSplit:");
		sb.append(this.isSplit);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isPaid:");
		sb.append(this.isPaid);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payTime:");
		if (this.payTime == null) {
			sb.append("null");
		} else {
			sb.append(this.payTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderTime:");
		if (this.orderTime == null) {
			sb.append("null");
		} else {
			sb.append(this.orderTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("showCancel:");
		sb.append(this.showCancel);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("showModify:");
		sb.append(this.showModify);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("showLevel:");
		sb.append(this.showLevel);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payAllPrice:");
		sb.append(this.payAllPrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("shutDownPayTime:");
		sb.append(this.shutDownPayTime);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("orderLists:");
		if (this.orderLists == null) {
			sb.append("null");
		} else {
			sb.append(this.orderLists);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TResultOrderListOfOrderInfoStandardSchemeFactory implements SchemeFactory {
		public TResultOrderListOfOrderInfoStandardScheme getScheme() {
			return new TResultOrderListOfOrderInfoStandardScheme();
		}
	}

	private static class TResultOrderListOfOrderInfoStandardScheme extends StandardScheme<TResultOrderListOfOrderInfo> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TResultOrderListOfOrderInfo struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // SUPERIOR_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.superiorCode = iprot.readString();
						struct.setSuperiorCodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // IS_GROUPON
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.isGroupon = iprot.readI32();
						struct.setIsGrouponIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // ORDER_ITEM_COUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.orderItemCount = iprot.readI32();
						struct.setOrderItemCountIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // IS_SPLIT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.isSplit = iprot.readI32();
						struct.setIsSplitIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // IS_PAID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.isPaid = iprot.readI32();
						struct.setIsPaidIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // PAY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.payTime = iprot.readString();
						struct.setPayTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // ORDER_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.orderTime = iprot.readString();
						struct.setOrderTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // SHOW_CANCEL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.showCancel = iprot.readI32();
						struct.setShowCancelIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // SHOW_MODIFY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.showModify = iprot.readI32();
						struct.setShowModifyIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // SHOW_LEVEL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.showLevel = iprot.readI32();
						struct.setShowLevelIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // PAY_ALL_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.payAllPrice = iprot.readDouble();
						struct.setPayAllPriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // SHUT_DOWN_PAY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.shutDownPayTime = iprot.readI64();
						struct.setShutDownPayTimeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // ORDER_LISTS
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
							struct.orderLists = new ArrayList<TResultOrderListOfSubOrder>(_list16.size);
							TResultOrderListOfSubOrder _elem17;
							for (int _i18 = 0; _i18 < _list16.size; ++_i18) {
								_elem17 = new TResultOrderListOfSubOrder();
								_elem17.read(iprot);
								struct.orderLists.add(_elem17);
							}
							iprot.readListEnd();
						}
						struct.setOrderListsIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TResultOrderListOfOrderInfo struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.superiorCode != null) {
				oprot.writeFieldBegin(SUPERIOR_CODE_FIELD_DESC);
				oprot.writeString(struct.superiorCode);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_GROUPON_FIELD_DESC);
			oprot.writeI32(struct.isGroupon);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(ORDER_ITEM_COUNT_FIELD_DESC);
			oprot.writeI32(struct.orderItemCount);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_SPLIT_FIELD_DESC);
			oprot.writeI32(struct.isSplit);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_PAID_FIELD_DESC);
			oprot.writeI32(struct.isPaid);
			oprot.writeFieldEnd();
			if (struct.payTime != null) {
				oprot.writeFieldBegin(PAY_TIME_FIELD_DESC);
				oprot.writeString(struct.payTime);
				oprot.writeFieldEnd();
			}
			if (struct.orderTime != null) {
				oprot.writeFieldBegin(ORDER_TIME_FIELD_DESC);
				oprot.writeString(struct.orderTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(SHOW_CANCEL_FIELD_DESC);
			oprot.writeI32(struct.showCancel);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SHOW_MODIFY_FIELD_DESC);
			oprot.writeI32(struct.showModify);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SHOW_LEVEL_FIELD_DESC);
			oprot.writeI32(struct.showLevel);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PAY_ALL_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.payAllPrice);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SHUT_DOWN_PAY_TIME_FIELD_DESC);
			oprot.writeI64(struct.shutDownPayTime);
			oprot.writeFieldEnd();
			if (struct.orderLists != null) {
				oprot.writeFieldBegin(ORDER_LISTS_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
							struct.orderLists.size()));
					for (TResultOrderListOfSubOrder _iter19 : struct.orderLists) {
						_iter19.write(oprot);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TResultOrderListOfOrderInfoTupleSchemeFactory implements SchemeFactory {
		public TResultOrderListOfOrderInfoTupleScheme getScheme() {
			return new TResultOrderListOfOrderInfoTupleScheme();
		}
	}

	private static class TResultOrderListOfOrderInfoTupleScheme extends TupleScheme<TResultOrderListOfOrderInfo> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TResultOrderListOfOrderInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetSuperiorCode()) {
				optionals.set(0);
			}
			if (struct.isSetIsGroupon()) {
				optionals.set(1);
			}
			if (struct.isSetOrderItemCount()) {
				optionals.set(2);
			}
			if (struct.isSetIsSplit()) {
				optionals.set(3);
			}
			if (struct.isSetIsPaid()) {
				optionals.set(4);
			}
			if (struct.isSetPayTime()) {
				optionals.set(5);
			}
			if (struct.isSetOrderTime()) {
				optionals.set(6);
			}
			if (struct.isSetShowCancel()) {
				optionals.set(7);
			}
			if (struct.isSetShowModify()) {
				optionals.set(8);
			}
			if (struct.isSetShowLevel()) {
				optionals.set(9);
			}
			if (struct.isSetPayAllPrice()) {
				optionals.set(10);
			}
			if (struct.isSetShutDownPayTime()) {
				optionals.set(11);
			}
			if (struct.isSetOrderLists()) {
				optionals.set(12);
			}
			oprot.writeBitSet(optionals, 13);
			if (struct.isSetSuperiorCode()) {
				oprot.writeString(struct.superiorCode);
			}
			if (struct.isSetIsGroupon()) {
				oprot.writeI32(struct.isGroupon);
			}
			if (struct.isSetOrderItemCount()) {
				oprot.writeI32(struct.orderItemCount);
			}
			if (struct.isSetIsSplit()) {
				oprot.writeI32(struct.isSplit);
			}
			if (struct.isSetIsPaid()) {
				oprot.writeI32(struct.isPaid);
			}
			if (struct.isSetPayTime()) {
				oprot.writeString(struct.payTime);
			}
			if (struct.isSetOrderTime()) {
				oprot.writeString(struct.orderTime);
			}
			if (struct.isSetShowCancel()) {
				oprot.writeI32(struct.showCancel);
			}
			if (struct.isSetShowModify()) {
				oprot.writeI32(struct.showModify);
			}
			if (struct.isSetShowLevel()) {
				oprot.writeI32(struct.showLevel);
			}
			if (struct.isSetPayAllPrice()) {
				oprot.writeDouble(struct.payAllPrice);
			}
			if (struct.isSetShutDownPayTime()) {
				oprot.writeI64(struct.shutDownPayTime);
			}
			if (struct.isSetOrderLists()) {
				{
					oprot.writeI32(struct.orderLists.size());
					for (TResultOrderListOfSubOrder _iter20 : struct.orderLists) {
						_iter20.write(oprot);
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TResultOrderListOfOrderInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(13);
			if (incoming.get(0)) {
				struct.superiorCode = iprot.readString();
				struct.setSuperiorCodeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.isGroupon = iprot.readI32();
				struct.setIsGrouponIsSet(true);
			}
			if (incoming.get(2)) {
				struct.orderItemCount = iprot.readI32();
				struct.setOrderItemCountIsSet(true);
			}
			if (incoming.get(3)) {
				struct.isSplit = iprot.readI32();
				struct.setIsSplitIsSet(true);
			}
			if (incoming.get(4)) {
				struct.isPaid = iprot.readI32();
				struct.setIsPaidIsSet(true);
			}
			if (incoming.get(5)) {
				struct.payTime = iprot.readString();
				struct.setPayTimeIsSet(true);
			}
			if (incoming.get(6)) {
				struct.orderTime = iprot.readString();
				struct.setOrderTimeIsSet(true);
			}
			if (incoming.get(7)) {
				struct.showCancel = iprot.readI32();
				struct.setShowCancelIsSet(true);
			}
			if (incoming.get(8)) {
				struct.showModify = iprot.readI32();
				struct.setShowModifyIsSet(true);
			}
			if (incoming.get(9)) {
				struct.showLevel = iprot.readI32();
				struct.setShowLevelIsSet(true);
			}
			if (incoming.get(10)) {
				struct.payAllPrice = iprot.readDouble();
				struct.setPayAllPriceIsSet(true);
			}
			if (incoming.get(11)) {
				struct.shutDownPayTime = iprot.readI64();
				struct.setShutDownPayTimeIsSet(true);
			}
			if (incoming.get(12)) {
				{
					org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
					struct.orderLists = new ArrayList<TResultOrderListOfSubOrder>(_list21.size);
					TResultOrderListOfSubOrder _elem22;
					for (int _i23 = 0; _i23 < _list21.size; ++_i23) {
						_elem22 = new TResultOrderListOfSubOrder();
						_elem22.read(iprot);
						struct.orderLists.add(_elem22);
					}
				}
				struct.setOrderListsIsSet(true);
			}
		}
	}

}
