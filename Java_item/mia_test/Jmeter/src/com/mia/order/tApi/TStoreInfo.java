/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TStoreInfo implements org.apache.thrift.TBase<TStoreInfo, TStoreInfo._Fields>, java.io.Serializable,
		Cloneable, Comparable<TStoreInfo> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TStoreInfo");

	private static final org.apache.thrift.protocol.TField STORE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"storeId", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField STORE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"storeName", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField IS_VALID_STORE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isValidStore", org.apache.thrift.protocol.TType.I16, (short) 3);
	private static final org.apache.thrift.protocol.TField STORE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"storeUrl", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TStoreInfoStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TStoreInfoTupleSchemeFactory());
	}

	public int storeId; // required
	public String storeName; // required
	public short isValidStore; // required
	public String storeUrl; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		STORE_ID((short) 1, "storeId"), STORE_NAME((short) 2, "storeName"), IS_VALID_STORE((short) 3,
				"isValidStore"), STORE_URL((short) 4, "storeUrl");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // STORE_ID
				return STORE_ID;
			case 2: // STORE_NAME
				return STORE_NAME;
			case 3: // IS_VALID_STORE
				return IS_VALID_STORE;
			case 4: // STORE_URL
				return STORE_URL;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __STOREID_ISSET_ID = 0;
	private static final int __ISVALIDSTORE_ISSET_ID = 1;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.STORE_ID,
				new org.apache.thrift.meta_data.FieldMetaData("storeId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STORE_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("storeName",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_VALID_STORE,
				new org.apache.thrift.meta_data.FieldMetaData("isValidStore",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.STORE_URL,
				new org.apache.thrift.meta_data.FieldMetaData("storeUrl",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStoreInfo.class, metaDataMap);
	}

	public TStoreInfo() {
	}

	public TStoreInfo(int storeId, String storeName, short isValidStore, String storeUrl) {
		this();
		this.storeId = storeId;
		setStoreIdIsSet(true);
		this.storeName = storeName;
		this.isValidStore = isValidStore;
		setIsValidStoreIsSet(true);
		this.storeUrl = storeUrl;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TStoreInfo(TStoreInfo other) {
		__isset_bitfield = other.__isset_bitfield;
		this.storeId = other.storeId;
		if (other.isSetStoreName()) {
			this.storeName = other.storeName;
		}
		this.isValidStore = other.isValidStore;
		if (other.isSetStoreUrl()) {
			this.storeUrl = other.storeUrl;
		}
	}

	public TStoreInfo deepCopy() {
		return new TStoreInfo(this);
	}

	@Override
	public void clear() {
		setStoreIdIsSet(false);
		this.storeId = 0;
		this.storeName = null;
		setIsValidStoreIsSet(false);
		this.isValidStore = 0;
		this.storeUrl = null;
	}

	public int getStoreId() {
		return this.storeId;
	}

	public TStoreInfo setStoreId(int storeId) {
		this.storeId = storeId;
		setStoreIdIsSet(true);
		return this;
	}

	public void unsetStoreId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOREID_ISSET_ID);
	}

	/**
	 * Returns true if field storeId is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetStoreId() {
		return EncodingUtils.testBit(__isset_bitfield, __STOREID_ISSET_ID);
	}

	public void setStoreIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOREID_ISSET_ID, value);
	}

	public String getStoreName() {
		return this.storeName;
	}

	public TStoreInfo setStoreName(String storeName) {
		this.storeName = storeName;
		return this;
	}

	public void unsetStoreName() {
		this.storeName = null;
	}

	/**
	 * Returns true if field storeName is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetStoreName() {
		return this.storeName != null;
	}

	public void setStoreNameIsSet(boolean value) {
		if (!value) {
			this.storeName = null;
		}
	}

	public short getIsValidStore() {
		return this.isValidStore;
	}

	public TStoreInfo setIsValidStore(short isValidStore) {
		this.isValidStore = isValidStore;
		setIsValidStoreIsSet(true);
		return this;
	}

	public void unsetIsValidStore() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISVALIDSTORE_ISSET_ID);
	}

	/**
	 * Returns true if field isValidStore is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetIsValidStore() {
		return EncodingUtils.testBit(__isset_bitfield, __ISVALIDSTORE_ISSET_ID);
	}

	public void setIsValidStoreIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISVALIDSTORE_ISSET_ID, value);
	}

	public String getStoreUrl() {
		return this.storeUrl;
	}

	public TStoreInfo setStoreUrl(String storeUrl) {
		this.storeUrl = storeUrl;
		return this;
	}

	public void unsetStoreUrl() {
		this.storeUrl = null;
	}

	/**
	 * Returns true if field storeUrl is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetStoreUrl() {
		return this.storeUrl != null;
	}

	public void setStoreUrlIsSet(boolean value) {
		if (!value) {
			this.storeUrl = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case STORE_ID:
			if (value == null) {
				unsetStoreId();
			} else {
				setStoreId((Integer) value);
			}
			break;

		case STORE_NAME:
			if (value == null) {
				unsetStoreName();
			} else {
				setStoreName((String) value);
			}
			break;

		case IS_VALID_STORE:
			if (value == null) {
				unsetIsValidStore();
			} else {
				setIsValidStore((Short) value);
			}
			break;

		case STORE_URL:
			if (value == null) {
				unsetStoreUrl();
			} else {
				setStoreUrl((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case STORE_ID:
			return getStoreId();

		case STORE_NAME:
			return getStoreName();

		case IS_VALID_STORE:
			return getIsValidStore();

		case STORE_URL:
			return getStoreUrl();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case STORE_ID:
			return isSetStoreId();
		case STORE_NAME:
			return isSetStoreName();
		case IS_VALID_STORE:
			return isSetIsValidStore();
		case STORE_URL:
			return isSetStoreUrl();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TStoreInfo)
			return this.equals((TStoreInfo) that);
		return false;
	}

	public boolean equals(TStoreInfo that) {
		if (that == null)
			return false;

		boolean this_present_storeId = true;
		boolean that_present_storeId = true;
		if (this_present_storeId || that_present_storeId) {
			if (!(this_present_storeId && that_present_storeId))
				return false;
			if (this.storeId != that.storeId)
				return false;
		}

		boolean this_present_storeName = true && this.isSetStoreName();
		boolean that_present_storeName = true && that.isSetStoreName();
		if (this_present_storeName || that_present_storeName) {
			if (!(this_present_storeName && that_present_storeName))
				return false;
			if (!this.storeName.equals(that.storeName))
				return false;
		}

		boolean this_present_isValidStore = true;
		boolean that_present_isValidStore = true;
		if (this_present_isValidStore || that_present_isValidStore) {
			if (!(this_present_isValidStore && that_present_isValidStore))
				return false;
			if (this.isValidStore != that.isValidStore)
				return false;
		}

		boolean this_present_storeUrl = true && this.isSetStoreUrl();
		boolean that_present_storeUrl = true && that.isSetStoreUrl();
		if (this_present_storeUrl || that_present_storeUrl) {
			if (!(this_present_storeUrl && that_present_storeUrl))
				return false;
			if (!this.storeUrl.equals(that.storeUrl))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_storeId = true;
		list.add(present_storeId);
		if (present_storeId)
			list.add(storeId);

		boolean present_storeName = true && (isSetStoreName());
		list.add(present_storeName);
		if (present_storeName)
			list.add(storeName);

		boolean present_isValidStore = true;
		list.add(present_isValidStore);
		if (present_isValidStore)
			list.add(isValidStore);

		boolean present_storeUrl = true && (isSetStoreUrl());
		list.add(present_storeUrl);
		if (present_storeUrl)
			list.add(storeUrl);

		return list.hashCode();
	}

	@Override
	public int compareTo(TStoreInfo other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetStoreId()).compareTo(other.isSetStoreId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStoreId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeId, other.storeId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStoreName()).compareTo(other.isSetStoreName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStoreName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeName, other.storeName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsValidStore()).compareTo(other.isSetIsValidStore());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsValidStore()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isValidStore, other.isValidStore);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStoreUrl()).compareTo(other.isSetStoreUrl());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStoreUrl()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeUrl, other.storeUrl);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TStoreInfo(");
		boolean first = true;

		sb.append("storeId:");
		sb.append(this.storeId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("storeName:");
		if (this.storeName == null) {
			sb.append("null");
		} else {
			sb.append(this.storeName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isValidStore:");
		sb.append(this.isValidStore);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("storeUrl:");
		if (this.storeUrl == null) {
			sb.append("null");
		} else {
			sb.append(this.storeUrl);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TStoreInfoStandardSchemeFactory implements SchemeFactory {
		public TStoreInfoStandardScheme getScheme() {
			return new TStoreInfoStandardScheme();
		}
	}

	private static class TStoreInfoStandardScheme extends StandardScheme<TStoreInfo> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TStoreInfo struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // STORE_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.storeId = iprot.readI32();
						struct.setStoreIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // STORE_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.storeName = iprot.readString();
						struct.setStoreNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // IS_VALID_STORE
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.isValidStore = iprot.readI16();
						struct.setIsValidStoreIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // STORE_URL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.storeUrl = iprot.readString();
						struct.setStoreUrlIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TStoreInfo struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(STORE_ID_FIELD_DESC);
			oprot.writeI32(struct.storeId);
			oprot.writeFieldEnd();
			if (struct.storeName != null) {
				oprot.writeFieldBegin(STORE_NAME_FIELD_DESC);
				oprot.writeString(struct.storeName);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_VALID_STORE_FIELD_DESC);
			oprot.writeI16(struct.isValidStore);
			oprot.writeFieldEnd();
			if (struct.storeUrl != null) {
				oprot.writeFieldBegin(STORE_URL_FIELD_DESC);
				oprot.writeString(struct.storeUrl);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TStoreInfoTupleSchemeFactory implements SchemeFactory {
		public TStoreInfoTupleScheme getScheme() {
			return new TStoreInfoTupleScheme();
		}
	}

	private static class TStoreInfoTupleScheme extends TupleScheme<TStoreInfo> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TStoreInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetStoreId()) {
				optionals.set(0);
			}
			if (struct.isSetStoreName()) {
				optionals.set(1);
			}
			if (struct.isSetIsValidStore()) {
				optionals.set(2);
			}
			if (struct.isSetStoreUrl()) {
				optionals.set(3);
			}
			oprot.writeBitSet(optionals, 4);
			if (struct.isSetStoreId()) {
				oprot.writeI32(struct.storeId);
			}
			if (struct.isSetStoreName()) {
				oprot.writeString(struct.storeName);
			}
			if (struct.isSetIsValidStore()) {
				oprot.writeI16(struct.isValidStore);
			}
			if (struct.isSetStoreUrl()) {
				oprot.writeString(struct.storeUrl);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TStoreInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(4);
			if (incoming.get(0)) {
				struct.storeId = iprot.readI32();
				struct.setStoreIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.storeName = iprot.readString();
				struct.setStoreNameIsSet(true);
			}
			if (incoming.get(2)) {
				struct.isValidStore = iprot.readI16();
				struct.setIsValidStoreIsSet(true);
			}
			if (incoming.get(3)) {
				struct.storeUrl = iprot.readString();
				struct.setStoreUrlIsSet(true);
			}
		}
	}

}
