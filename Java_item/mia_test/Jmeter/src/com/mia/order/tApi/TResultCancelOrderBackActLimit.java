/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TResultCancelOrderBackActLimit
		implements org.apache.thrift.TBase<TResultCancelOrderBackActLimit, TResultCancelOrderBackActLimit._Fields>,
		java.io.Serializable, Cloneable, Comparable<TResultCancelOrderBackActLimit> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TResultCancelOrderBackActLimit");

	private static final org.apache.thrift.protocol.TField ERROR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"errorInfo", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TResultCancelOrderBackActLimitStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TResultCancelOrderBackActLimitTupleSchemeFactory());
	}

	public TErrorInfo errorInfo; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ERROR_INFO((short) 1, "errorInfo");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ERROR_INFO
				return ERROR_INFO;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ERROR_INFO,
				new org.apache.thrift.meta_data.FieldMetaData("errorInfo",
						org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
								org.apache.thrift.protocol.TType.STRUCT, TErrorInfo.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultCancelOrderBackActLimit.class,
				metaDataMap);
	}

	public TResultCancelOrderBackActLimit() {
	}

	public TResultCancelOrderBackActLimit(TErrorInfo errorInfo) {
		this();
		this.errorInfo = errorInfo;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TResultCancelOrderBackActLimit(TResultCancelOrderBackActLimit other) {
		if (other.isSetErrorInfo()) {
			this.errorInfo = new TErrorInfo(other.errorInfo);
		}
	}

	public TResultCancelOrderBackActLimit deepCopy() {
		return new TResultCancelOrderBackActLimit(this);
	}

	@Override
	public void clear() {
		this.errorInfo = null;
	}

	public TErrorInfo getErrorInfo() {
		return this.errorInfo;
	}

	public TResultCancelOrderBackActLimit setErrorInfo(TErrorInfo errorInfo) {
		this.errorInfo = errorInfo;
		return this;
	}

	public void unsetErrorInfo() {
		this.errorInfo = null;
	}

	/**
	 * Returns true if field errorInfo is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetErrorInfo() {
		return this.errorInfo != null;
	}

	public void setErrorInfoIsSet(boolean value) {
		if (!value) {
			this.errorInfo = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ERROR_INFO:
			if (value == null) {
				unsetErrorInfo();
			} else {
				setErrorInfo((TErrorInfo) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ERROR_INFO:
			return getErrorInfo();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ERROR_INFO:
			return isSetErrorInfo();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TResultCancelOrderBackActLimit)
			return this.equals((TResultCancelOrderBackActLimit) that);
		return false;
	}

	public boolean equals(TResultCancelOrderBackActLimit that) {
		if (that == null)
			return false;

		boolean this_present_errorInfo = true && this.isSetErrorInfo();
		boolean that_present_errorInfo = true && that.isSetErrorInfo();
		if (this_present_errorInfo || that_present_errorInfo) {
			if (!(this_present_errorInfo && that_present_errorInfo))
				return false;
			if (!this.errorInfo.equals(that.errorInfo))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_errorInfo = true && (isSetErrorInfo());
		list.add(present_errorInfo);
		if (present_errorInfo)
			list.add(errorInfo);

		return list.hashCode();
	}

	@Override
	public int compareTo(TResultCancelOrderBackActLimit other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetErrorInfo()).compareTo(other.isSetErrorInfo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetErrorInfo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorInfo, other.errorInfo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TResultCancelOrderBackActLimit(");
		boolean first = true;

		sb.append("errorInfo:");
		if (this.errorInfo == null) {
			sb.append("null");
		} else {
			sb.append(this.errorInfo);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (errorInfo != null) {
			errorInfo.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TResultCancelOrderBackActLimitStandardSchemeFactory implements SchemeFactory {
		public TResultCancelOrderBackActLimitStandardScheme getScheme() {
			return new TResultCancelOrderBackActLimitStandardScheme();
		}
	}

	private static class TResultCancelOrderBackActLimitStandardScheme
			extends StandardScheme<TResultCancelOrderBackActLimit> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TResultCancelOrderBackActLimit struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ERROR_INFO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.errorInfo = new TErrorInfo();
						struct.errorInfo.read(iprot);
						struct.setErrorInfoIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TResultCancelOrderBackActLimit struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.errorInfo != null) {
				oprot.writeFieldBegin(ERROR_INFO_FIELD_DESC);
				struct.errorInfo.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TResultCancelOrderBackActLimitTupleSchemeFactory implements SchemeFactory {
		public TResultCancelOrderBackActLimitTupleScheme getScheme() {
			return new TResultCancelOrderBackActLimitTupleScheme();
		}
	}

	private static class TResultCancelOrderBackActLimitTupleScheme extends TupleScheme<TResultCancelOrderBackActLimit> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TResultCancelOrderBackActLimit struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetErrorInfo()) {
				optionals.set(0);
			}
			oprot.writeBitSet(optionals, 1);
			if (struct.isSetErrorInfo()) {
				struct.errorInfo.write(oprot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TResultCancelOrderBackActLimit struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(1);
			if (incoming.get(0)) {
				struct.errorInfo = new TErrorInfo();
				struct.errorInfo.read(iprot);
				struct.setErrorInfoIsSet(true);
			}
		}
	}

}
