/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TOrderApiService {

	public interface Iface {

		public com.mia.order.tApi.TResultCancelOrderBackActLimit cancelOrderBackActLimit(
				com.mia.order.tApi.TParamsCancelOrderBackActLimit params, com.mia.order.tApi.CommonParams cParams)
				throws org.apache.thrift.TException;

		public com.mia.order.tApi.TResultCancelOrder cancelOrder(com.mia.order.tApi.TParamsCancelOrder params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException;

		public com.mia.order.tApi.TResultCancelOrder cancelVirtualOrder(com.mia.order.tApi.TParamsCancelOrder params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException;

		public com.mia.order.tApi.TResultPing ping(com.mia.order.tApi.TParamsPing params)
				throws org.apache.thrift.TException;

		public com.mia.order.tApi.TResultSetRedisCom setRedisValue(com.mia.order.tApi.TParamsSetRedisValue params)
				throws org.apache.thrift.TException;

		public com.mia.order.tApi.TResultGetRedisCom getRedisValue(com.mia.order.tApi.TParamsGetRedisValue params)
				throws org.apache.thrift.TException;

		public com.mia.order.tApi.TResultOrderDetail orderDetail(com.mia.order.tApi.TParamsOrderDetail params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException;

		public com.mia.order.tApi.TResultOrderList orderList(com.mia.order.tApi.TParamsOrderList params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException;

		public com.mia.order.tApi.TCommonResultInfo modifyOrderAddress(
				com.mia.order.tApi.TParamsModifyOrderAddress params, com.mia.order.tApi.CommonParams cParams)
				throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void cancelOrderBackActLimit(com.mia.order.tApi.TParamsCancelOrderBackActLimit params,
				com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void cancelOrder(com.mia.order.tApi.TParamsCancelOrder params, com.mia.order.tApi.CommonParams cParams,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void cancelVirtualOrder(com.mia.order.tApi.TParamsCancelOrder params,
				com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void ping(com.mia.order.tApi.TParamsPing params,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void setRedisValue(com.mia.order.tApi.TParamsSetRedisValue params,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void getRedisValue(com.mia.order.tApi.TParamsGetRedisValue params,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void orderDetail(com.mia.order.tApi.TParamsOrderDetail params, com.mia.order.tApi.CommonParams cParams,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void orderList(com.mia.order.tApi.TParamsOrderList params, com.mia.order.tApi.CommonParams cParams,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

		public void modifyOrderAddress(com.mia.order.tApi.TParamsModifyOrderAddress params,
				com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public com.mia.order.tApi.TResultCancelOrderBackActLimit cancelOrderBackActLimit(
				com.mia.order.tApi.TParamsCancelOrderBackActLimit params, com.mia.order.tApi.CommonParams cParams)
				throws org.apache.thrift.TException {
			send_cancelOrderBackActLimit(params, cParams);
			return recv_cancelOrderBackActLimit();
		}

		public void send_cancelOrderBackActLimit(com.mia.order.tApi.TParamsCancelOrderBackActLimit params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException {
			cancelOrderBackActLimit_args args = new cancelOrderBackActLimit_args();
			args.setParams(params);
			args.setCParams(cParams);
			sendBase("cancelOrderBackActLimit", args);
		}

		public com.mia.order.tApi.TResultCancelOrderBackActLimit recv_cancelOrderBackActLimit()
				throws org.apache.thrift.TException {
			cancelOrderBackActLimit_result result = new cancelOrderBackActLimit_result();
			receiveBase(result, "cancelOrderBackActLimit");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"cancelOrderBackActLimit failed: unknown result");
		}

		public com.mia.order.tApi.TResultCancelOrder cancelOrder(com.mia.order.tApi.TParamsCancelOrder params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException {
			send_cancelOrder(params, cParams);
			return recv_cancelOrder();
		}

		public void send_cancelOrder(com.mia.order.tApi.TParamsCancelOrder params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException {
			cancelOrder_args args = new cancelOrder_args();
			args.setParams(params);
			args.setCParams(cParams);
			sendBase("cancelOrder", args);
		}

		public com.mia.order.tApi.TResultCancelOrder recv_cancelOrder() throws org.apache.thrift.TException {
			cancelOrder_result result = new cancelOrder_result();
			receiveBase(result, "cancelOrder");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"cancelOrder failed: unknown result");
		}

		public com.mia.order.tApi.TResultCancelOrder cancelVirtualOrder(com.mia.order.tApi.TParamsCancelOrder params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException {
			send_cancelVirtualOrder(params, cParams);
			return recv_cancelVirtualOrder();
		}

		public void send_cancelVirtualOrder(com.mia.order.tApi.TParamsCancelOrder params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException {
			cancelVirtualOrder_args args = new cancelVirtualOrder_args();
			args.setParams(params);
			args.setCParams(cParams);
			sendBase("cancelVirtualOrder", args);
		}

		public com.mia.order.tApi.TResultCancelOrder recv_cancelVirtualOrder() throws org.apache.thrift.TException {
			cancelVirtualOrder_result result = new cancelVirtualOrder_result();
			receiveBase(result, "cancelVirtualOrder");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"cancelVirtualOrder failed: unknown result");
		}

		public com.mia.order.tApi.TResultPing ping(com.mia.order.tApi.TParamsPing params)
				throws org.apache.thrift.TException {
			send_ping(params);
			return recv_ping();
		}

		public void send_ping(com.mia.order.tApi.TParamsPing params) throws org.apache.thrift.TException {
			ping_args args = new ping_args();
			args.setParams(params);
			sendBase("ping", args);
		}

		public com.mia.order.tApi.TResultPing recv_ping() throws org.apache.thrift.TException {
			ping_result result = new ping_result();
			receiveBase(result, "ping");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"ping failed: unknown result");
		}

		public com.mia.order.tApi.TResultSetRedisCom setRedisValue(com.mia.order.tApi.TParamsSetRedisValue params)
				throws org.apache.thrift.TException {
			send_setRedisValue(params);
			return recv_setRedisValue();
		}

		public void send_setRedisValue(com.mia.order.tApi.TParamsSetRedisValue params)
				throws org.apache.thrift.TException {
			setRedisValue_args args = new setRedisValue_args();
			args.setParams(params);
			sendBase("setRedisValue", args);
		}

		public com.mia.order.tApi.TResultSetRedisCom recv_setRedisValue() throws org.apache.thrift.TException {
			setRedisValue_result result = new setRedisValue_result();
			receiveBase(result, "setRedisValue");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setRedisValue failed: unknown result");
		}

		public com.mia.order.tApi.TResultGetRedisCom getRedisValue(com.mia.order.tApi.TParamsGetRedisValue params)
				throws org.apache.thrift.TException {
			send_getRedisValue(params);
			return recv_getRedisValue();
		}

		public void send_getRedisValue(com.mia.order.tApi.TParamsGetRedisValue params)
				throws org.apache.thrift.TException {
			getRedisValue_args args = new getRedisValue_args();
			args.setParams(params);
			sendBase("getRedisValue", args);
		}

		public com.mia.order.tApi.TResultGetRedisCom recv_getRedisValue() throws org.apache.thrift.TException {
			getRedisValue_result result = new getRedisValue_result();
			receiveBase(result, "getRedisValue");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getRedisValue failed: unknown result");
		}

		public com.mia.order.tApi.TResultOrderDetail orderDetail(com.mia.order.tApi.TParamsOrderDetail params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException {
			send_orderDetail(params, cParams);
			return recv_orderDetail();
		}

		public void send_orderDetail(com.mia.order.tApi.TParamsOrderDetail params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException {
			orderDetail_args args = new orderDetail_args();
			args.setParams(params);
			args.setCParams(cParams);
			sendBase("orderDetail", args);
		}

		public com.mia.order.tApi.TResultOrderDetail recv_orderDetail() throws org.apache.thrift.TException {
			orderDetail_result result = new orderDetail_result();
			receiveBase(result, "orderDetail");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"orderDetail failed: unknown result");
		}

		public com.mia.order.tApi.TResultOrderList orderList(com.mia.order.tApi.TParamsOrderList params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException {
			send_orderList(params, cParams);
			return recv_orderList();
		}

		public void send_orderList(com.mia.order.tApi.TParamsOrderList params, com.mia.order.tApi.CommonParams cParams)
				throws org.apache.thrift.TException {
			orderList_args args = new orderList_args();
			args.setParams(params);
			args.setCParams(cParams);
			sendBase("orderList", args);
		}

		public com.mia.order.tApi.TResultOrderList recv_orderList() throws org.apache.thrift.TException {
			orderList_result result = new orderList_result();
			receiveBase(result, "orderList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"orderList failed: unknown result");
		}

		public com.mia.order.tApi.TCommonResultInfo modifyOrderAddress(
				com.mia.order.tApi.TParamsModifyOrderAddress params, com.mia.order.tApi.CommonParams cParams)
				throws org.apache.thrift.TException {
			send_modifyOrderAddress(params, cParams);
			return recv_modifyOrderAddress();
		}

		public void send_modifyOrderAddress(com.mia.order.tApi.TParamsModifyOrderAddress params,
				com.mia.order.tApi.CommonParams cParams) throws org.apache.thrift.TException {
			modifyOrderAddress_args args = new modifyOrderAddress_args();
			args.setParams(params);
			args.setCParams(cParams);
			sendBase("modifyOrderAddress", args);
		}

		public com.mia.order.tApi.TCommonResultInfo recv_modifyOrderAddress() throws org.apache.thrift.TException {
			modifyOrderAddress_result result = new modifyOrderAddress_result();
			receiveBase(result, "modifyOrderAddress");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"modifyOrderAddress failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void cancelOrderBackActLimit(com.mia.order.tApi.TParamsCancelOrderBackActLimit params,
				com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			cancelOrderBackActLimit_call method_call = new cancelOrderBackActLimit_call(params, cParams, resultHandler,
					this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class cancelOrderBackActLimit_call extends org.apache.thrift.async.TAsyncMethodCall {
			private com.mia.order.tApi.TParamsCancelOrderBackActLimit params;
			private com.mia.order.tApi.CommonParams cParams;

			public cancelOrderBackActLimit_call(com.mia.order.tApi.TParamsCancelOrderBackActLimit params,
					com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.params = params;
				this.cParams = cParams;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelOrderBackActLimit",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				cancelOrderBackActLimit_args args = new cancelOrderBackActLimit_args();
				args.setParams(params);
				args.setCParams(cParams);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public com.mia.order.tApi.TResultCancelOrderBackActLimit getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_cancelOrderBackActLimit();
			}
		}

		public void cancelOrder(com.mia.order.tApi.TParamsCancelOrder params, com.mia.order.tApi.CommonParams cParams,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			cancelOrder_call method_call = new cancelOrder_call(params, cParams, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class cancelOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
			private com.mia.order.tApi.TParamsCancelOrder params;
			private com.mia.order.tApi.CommonParams cParams;

			public cancelOrder_call(com.mia.order.tApi.TParamsCancelOrder params,
					com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.params = params;
				this.cParams = cParams;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelOrder",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				cancelOrder_args args = new cancelOrder_args();
				args.setParams(params);
				args.setCParams(cParams);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public com.mia.order.tApi.TResultCancelOrder getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_cancelOrder();
			}
		}

		public void cancelVirtualOrder(com.mia.order.tApi.TParamsCancelOrder params,
				com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			cancelVirtualOrder_call method_call = new cancelVirtualOrder_call(params, cParams, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class cancelVirtualOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
			private com.mia.order.tApi.TParamsCancelOrder params;
			private com.mia.order.tApi.CommonParams cParams;

			public cancelVirtualOrder_call(com.mia.order.tApi.TParamsCancelOrder params,
					com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.params = params;
				this.cParams = cParams;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelVirtualOrder",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				cancelVirtualOrder_args args = new cancelVirtualOrder_args();
				args.setParams(params);
				args.setCParams(cParams);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public com.mia.order.tApi.TResultCancelOrder getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_cancelVirtualOrder();
			}
		}

		public void ping(com.mia.order.tApi.TParamsPing params,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			ping_call method_call = new ping_call(params, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
			private com.mia.order.tApi.TParamsPing params;

			public ping_call(com.mia.order.tApi.TParamsPing params,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.params = params;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				ping_args args = new ping_args();
				args.setParams(params);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public com.mia.order.tApi.TResultPing getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_ping();
			}
		}

		public void setRedisValue(com.mia.order.tApi.TParamsSetRedisValue params,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setRedisValue_call method_call = new setRedisValue_call(params, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setRedisValue_call extends org.apache.thrift.async.TAsyncMethodCall {
			private com.mia.order.tApi.TParamsSetRedisValue params;

			public setRedisValue_call(com.mia.order.tApi.TParamsSetRedisValue params,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.params = params;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRedisValue",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setRedisValue_args args = new setRedisValue_args();
				args.setParams(params);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public com.mia.order.tApi.TResultSetRedisCom getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setRedisValue();
			}
		}

		public void getRedisValue(com.mia.order.tApi.TParamsGetRedisValue params,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			getRedisValue_call method_call = new getRedisValue_call(params, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getRedisValue_call extends org.apache.thrift.async.TAsyncMethodCall {
			private com.mia.order.tApi.TParamsGetRedisValue params;

			public getRedisValue_call(com.mia.order.tApi.TParamsGetRedisValue params,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.params = params;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRedisValue",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getRedisValue_args args = new getRedisValue_args();
				args.setParams(params);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public com.mia.order.tApi.TResultGetRedisCom getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getRedisValue();
			}
		}

		public void orderDetail(com.mia.order.tApi.TParamsOrderDetail params, com.mia.order.tApi.CommonParams cParams,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			orderDetail_call method_call = new orderDetail_call(params, cParams, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class orderDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
			private com.mia.order.tApi.TParamsOrderDetail params;
			private com.mia.order.tApi.CommonParams cParams;

			public orderDetail_call(com.mia.order.tApi.TParamsOrderDetail params,
					com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.params = params;
				this.cParams = cParams;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("orderDetail",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				orderDetail_args args = new orderDetail_args();
				args.setParams(params);
				args.setCParams(cParams);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public com.mia.order.tApi.TResultOrderDetail getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_orderDetail();
			}
		}

		public void orderList(com.mia.order.tApi.TParamsOrderList params, com.mia.order.tApi.CommonParams cParams,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			orderList_call method_call = new orderList_call(params, cParams, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class orderList_call extends org.apache.thrift.async.TAsyncMethodCall {
			private com.mia.order.tApi.TParamsOrderList params;
			private com.mia.order.tApi.CommonParams cParams;

			public orderList_call(com.mia.order.tApi.TParamsOrderList params, com.mia.order.tApi.CommonParams cParams,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.params = params;
				this.cParams = cParams;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("orderList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				orderList_args args = new orderList_args();
				args.setParams(params);
				args.setCParams(cParams);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public com.mia.order.tApi.TResultOrderList getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_orderList();
			}
		}

		public void modifyOrderAddress(com.mia.order.tApi.TParamsModifyOrderAddress params,
				com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			modifyOrderAddress_call method_call = new modifyOrderAddress_call(params, cParams, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class modifyOrderAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
			private com.mia.order.tApi.TParamsModifyOrderAddress params;
			private com.mia.order.tApi.CommonParams cParams;

			public modifyOrderAddress_call(com.mia.order.tApi.TParamsModifyOrderAddress params,
					com.mia.order.tApi.CommonParams cParams, org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.params = params;
				this.cParams = cParams;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyOrderAddress",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				modifyOrderAddress_args args = new modifyOrderAddress_args();
				args.setParams(params);
				args.setCParams(cParams);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public com.mia.order.tApi.TCommonResultInfo getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_modifyOrderAddress();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("cancelOrderBackActLimit", new cancelOrderBackActLimit());
			processMap.put("cancelOrder", new cancelOrder());
			processMap.put("cancelVirtualOrder", new cancelVirtualOrder());
			processMap.put("ping", new ping());
			processMap.put("setRedisValue", new setRedisValue());
			processMap.put("getRedisValue", new getRedisValue());
			processMap.put("orderDetail", new orderDetail());
			processMap.put("orderList", new orderList());
			processMap.put("modifyOrderAddress", new modifyOrderAddress());
			return processMap;
		}

		public static class cancelOrderBackActLimit<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, cancelOrderBackActLimit_args> {
			public cancelOrderBackActLimit() {
				super("cancelOrderBackActLimit");
			}

			public cancelOrderBackActLimit_args getEmptyArgsInstance() {
				return new cancelOrderBackActLimit_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public cancelOrderBackActLimit_result getResult(I iface, cancelOrderBackActLimit_args args)
					throws org.apache.thrift.TException {
				cancelOrderBackActLimit_result result = new cancelOrderBackActLimit_result();
				result.success = iface.cancelOrderBackActLimit(args.params, args.cParams);
				return result;
			}
		}

		public static class cancelOrder<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, cancelOrder_args> {
			public cancelOrder() {
				super("cancelOrder");
			}

			public cancelOrder_args getEmptyArgsInstance() {
				return new cancelOrder_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public cancelOrder_result getResult(I iface, cancelOrder_args args) throws org.apache.thrift.TException {
				cancelOrder_result result = new cancelOrder_result();
				result.success = iface.cancelOrder(args.params, args.cParams);
				return result;
			}
		}

		public static class cancelVirtualOrder<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, cancelVirtualOrder_args> {
			public cancelVirtualOrder() {
				super("cancelVirtualOrder");
			}

			public cancelVirtualOrder_args getEmptyArgsInstance() {
				return new cancelVirtualOrder_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public cancelVirtualOrder_result getResult(I iface, cancelVirtualOrder_args args)
					throws org.apache.thrift.TException {
				cancelVirtualOrder_result result = new cancelVirtualOrder_result();
				result.success = iface.cancelVirtualOrder(args.params, args.cParams);
				return result;
			}
		}

		public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
			public ping() {
				super("ping");
			}

			public ping_args getEmptyArgsInstance() {
				return new ping_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
				ping_result result = new ping_result();
				result.success = iface.ping(args.params);
				return result;
			}
		}

		public static class setRedisValue<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setRedisValue_args> {
			public setRedisValue() {
				super("setRedisValue");
			}

			public setRedisValue_args getEmptyArgsInstance() {
				return new setRedisValue_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setRedisValue_result getResult(I iface, setRedisValue_args args)
					throws org.apache.thrift.TException {
				setRedisValue_result result = new setRedisValue_result();
				result.success = iface.setRedisValue(args.params);
				return result;
			}
		}

		public static class getRedisValue<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getRedisValue_args> {
			public getRedisValue() {
				super("getRedisValue");
			}

			public getRedisValue_args getEmptyArgsInstance() {
				return new getRedisValue_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public getRedisValue_result getResult(I iface, getRedisValue_args args)
					throws org.apache.thrift.TException {
				getRedisValue_result result = new getRedisValue_result();
				result.success = iface.getRedisValue(args.params);
				return result;
			}
		}

		public static class orderDetail<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, orderDetail_args> {
			public orderDetail() {
				super("orderDetail");
			}

			public orderDetail_args getEmptyArgsInstance() {
				return new orderDetail_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public orderDetail_result getResult(I iface, orderDetail_args args) throws org.apache.thrift.TException {
				orderDetail_result result = new orderDetail_result();
				result.success = iface.orderDetail(args.params, args.cParams);
				return result;
			}
		}

		public static class orderList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, orderList_args> {
			public orderList() {
				super("orderList");
			}

			public orderList_args getEmptyArgsInstance() {
				return new orderList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public orderList_result getResult(I iface, orderList_args args) throws org.apache.thrift.TException {
				orderList_result result = new orderList_result();
				result.success = iface.orderList(args.params, args.cParams);
				return result;
			}
		}

		public static class modifyOrderAddress<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, modifyOrderAddress_args> {
			public modifyOrderAddress() {
				super("modifyOrderAddress");
			}

			public modifyOrderAddress_args getEmptyArgsInstance() {
				return new modifyOrderAddress_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public modifyOrderAddress_result getResult(I iface, modifyOrderAddress_args args)
					throws org.apache.thrift.TException {
				modifyOrderAddress_result result = new modifyOrderAddress_result();
				result.success = iface.modifyOrderAddress(args.params, args.cParams);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("cancelOrderBackActLimit", new cancelOrderBackActLimit());
			processMap.put("cancelOrder", new cancelOrder());
			processMap.put("cancelVirtualOrder", new cancelVirtualOrder());
			processMap.put("ping", new ping());
			processMap.put("setRedisValue", new setRedisValue());
			processMap.put("getRedisValue", new getRedisValue());
			processMap.put("orderDetail", new orderDetail());
			processMap.put("orderList", new orderList());
			processMap.put("modifyOrderAddress", new modifyOrderAddress());
			return processMap;
		}

		public static class cancelOrderBackActLimit<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, cancelOrderBackActLimit_args, com.mia.order.tApi.TResultCancelOrderBackActLimit> {
			public cancelOrderBackActLimit() {
				super("cancelOrderBackActLimit");
			}

			public cancelOrderBackActLimit_args getEmptyArgsInstance() {
				return new cancelOrderBackActLimit_args();
			}

			public AsyncMethodCallback<com.mia.order.tApi.TResultCancelOrderBackActLimit> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<com.mia.order.tApi.TResultCancelOrderBackActLimit>() {
					public void onComplete(com.mia.order.tApi.TResultCancelOrderBackActLimit o) {
						cancelOrderBackActLimit_result result = new cancelOrderBackActLimit_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						cancelOrderBackActLimit_result result = new cancelOrderBackActLimit_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, cancelOrderBackActLimit_args args,
					org.apache.thrift.async.AsyncMethodCallback<com.mia.order.tApi.TResultCancelOrderBackActLimit> resultHandler)
					throws TException {
				iface.cancelOrderBackActLimit(args.params, args.cParams, resultHandler);
			}
		}

		public static class cancelOrder<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, cancelOrder_args, com.mia.order.tApi.TResultCancelOrder> {
			public cancelOrder() {
				super("cancelOrder");
			}

			public cancelOrder_args getEmptyArgsInstance() {
				return new cancelOrder_args();
			}

			public AsyncMethodCallback<com.mia.order.tApi.TResultCancelOrder> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<com.mia.order.tApi.TResultCancelOrder>() {
					public void onComplete(com.mia.order.tApi.TResultCancelOrder o) {
						cancelOrder_result result = new cancelOrder_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						cancelOrder_result result = new cancelOrder_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, cancelOrder_args args,
					org.apache.thrift.async.AsyncMethodCallback<com.mia.order.tApi.TResultCancelOrder> resultHandler)
					throws TException {
				iface.cancelOrder(args.params, args.cParams, resultHandler);
			}
		}

		public static class cancelVirtualOrder<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, cancelVirtualOrder_args, com.mia.order.tApi.TResultCancelOrder> {
			public cancelVirtualOrder() {
				super("cancelVirtualOrder");
			}

			public cancelVirtualOrder_args getEmptyArgsInstance() {
				return new cancelVirtualOrder_args();
			}

			public AsyncMethodCallback<com.mia.order.tApi.TResultCancelOrder> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<com.mia.order.tApi.TResultCancelOrder>() {
					public void onComplete(com.mia.order.tApi.TResultCancelOrder o) {
						cancelVirtualOrder_result result = new cancelVirtualOrder_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						cancelVirtualOrder_result result = new cancelVirtualOrder_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, cancelVirtualOrder_args args,
					org.apache.thrift.async.AsyncMethodCallback<com.mia.order.tApi.TResultCancelOrder> resultHandler)
					throws TException {
				iface.cancelVirtualOrder(args.params, args.cParams, resultHandler);
			}
		}

		public static class ping<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, ping_args, com.mia.order.tApi.TResultPing> {
			public ping() {
				super("ping");
			}

			public ping_args getEmptyArgsInstance() {
				return new ping_args();
			}

			public AsyncMethodCallback<com.mia.order.tApi.TResultPing> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<com.mia.order.tApi.TResultPing>() {
					public void onComplete(com.mia.order.tApi.TResultPing o) {
						ping_result result = new ping_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						ping_result result = new ping_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, ping_args args,
					org.apache.thrift.async.AsyncMethodCallback<com.mia.order.tApi.TResultPing> resultHandler)
					throws TException {
				iface.ping(args.params, resultHandler);
			}
		}

		public static class setRedisValue<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, setRedisValue_args, com.mia.order.tApi.TResultSetRedisCom> {
			public setRedisValue() {
				super("setRedisValue");
			}

			public setRedisValue_args getEmptyArgsInstance() {
				return new setRedisValue_args();
			}

			public AsyncMethodCallback<com.mia.order.tApi.TResultSetRedisCom> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<com.mia.order.tApi.TResultSetRedisCom>() {
					public void onComplete(com.mia.order.tApi.TResultSetRedisCom o) {
						setRedisValue_result result = new setRedisValue_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						setRedisValue_result result = new setRedisValue_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setRedisValue_args args,
					org.apache.thrift.async.AsyncMethodCallback<com.mia.order.tApi.TResultSetRedisCom> resultHandler)
					throws TException {
				iface.setRedisValue(args.params, resultHandler);
			}
		}

		public static class getRedisValue<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, getRedisValue_args, com.mia.order.tApi.TResultGetRedisCom> {
			public getRedisValue() {
				super("getRedisValue");
			}

			public getRedisValue_args getEmptyArgsInstance() {
				return new getRedisValue_args();
			}

			public AsyncMethodCallback<com.mia.order.tApi.TResultGetRedisCom> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<com.mia.order.tApi.TResultGetRedisCom>() {
					public void onComplete(com.mia.order.tApi.TResultGetRedisCom o) {
						getRedisValue_result result = new getRedisValue_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						getRedisValue_result result = new getRedisValue_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getRedisValue_args args,
					org.apache.thrift.async.AsyncMethodCallback<com.mia.order.tApi.TResultGetRedisCom> resultHandler)
					throws TException {
				iface.getRedisValue(args.params, resultHandler);
			}
		}

		public static class orderDetail<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, orderDetail_args, com.mia.order.tApi.TResultOrderDetail> {
			public orderDetail() {
				super("orderDetail");
			}

			public orderDetail_args getEmptyArgsInstance() {
				return new orderDetail_args();
			}

			public AsyncMethodCallback<com.mia.order.tApi.TResultOrderDetail> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<com.mia.order.tApi.TResultOrderDetail>() {
					public void onComplete(com.mia.order.tApi.TResultOrderDetail o) {
						orderDetail_result result = new orderDetail_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						orderDetail_result result = new orderDetail_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, orderDetail_args args,
					org.apache.thrift.async.AsyncMethodCallback<com.mia.order.tApi.TResultOrderDetail> resultHandler)
					throws TException {
				iface.orderDetail(args.params, args.cParams, resultHandler);
			}
		}

		public static class orderList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, orderList_args, com.mia.order.tApi.TResultOrderList> {
			public orderList() {
				super("orderList");
			}

			public orderList_args getEmptyArgsInstance() {
				return new orderList_args();
			}

			public AsyncMethodCallback<com.mia.order.tApi.TResultOrderList> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<com.mia.order.tApi.TResultOrderList>() {
					public void onComplete(com.mia.order.tApi.TResultOrderList o) {
						orderList_result result = new orderList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						orderList_result result = new orderList_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, orderList_args args,
					org.apache.thrift.async.AsyncMethodCallback<com.mia.order.tApi.TResultOrderList> resultHandler)
					throws TException {
				iface.orderList(args.params, args.cParams, resultHandler);
			}
		}

		public static class modifyOrderAddress<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, modifyOrderAddress_args, com.mia.order.tApi.TCommonResultInfo> {
			public modifyOrderAddress() {
				super("modifyOrderAddress");
			}

			public modifyOrderAddress_args getEmptyArgsInstance() {
				return new modifyOrderAddress_args();
			}

			public AsyncMethodCallback<com.mia.order.tApi.TCommonResultInfo> getResultHandler(final AsyncFrameBuffer fb,
					final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<com.mia.order.tApi.TCommonResultInfo>() {
					public void onComplete(com.mia.order.tApi.TCommonResultInfo o) {
						modifyOrderAddress_result result = new modifyOrderAddress_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						modifyOrderAddress_result result = new modifyOrderAddress_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, modifyOrderAddress_args args,
					org.apache.thrift.async.AsyncMethodCallback<com.mia.order.tApi.TCommonResultInfo> resultHandler)
					throws TException {
				iface.modifyOrderAddress(args.params, args.cParams, resultHandler);
			}
		}

	}

	public static class cancelOrderBackActLimit_args
			implements org.apache.thrift.TBase<cancelOrderBackActLimit_args, cancelOrderBackActLimit_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<cancelOrderBackActLimit_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"cancelOrderBackActLimit_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"params", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField C_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"cParams", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new cancelOrderBackActLimit_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new cancelOrderBackActLimit_argsTupleSchemeFactory());
		}

		public com.mia.order.tApi.TParamsCancelOrderBackActLimit params; // required
		public com.mia.order.tApi.CommonParams cParams; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short) 1, "params"), C_PARAMS((short) 2, "cParams");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAMS
					return PARAMS;
				case 2: // C_PARAMS
					return C_PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("params",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TParamsCancelOrderBackActLimit.class)));
			tmpMap.put(_Fields.C_PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("cParams",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.CommonParams.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrderBackActLimit_args.class,
					metaDataMap);
		}

		public cancelOrderBackActLimit_args() {
		}

		public cancelOrderBackActLimit_args(com.mia.order.tApi.TParamsCancelOrderBackActLimit params,
				com.mia.order.tApi.CommonParams cParams) {
			this();
			this.params = params;
			this.cParams = cParams;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public cancelOrderBackActLimit_args(cancelOrderBackActLimit_args other) {
			if (other.isSetParams()) {
				this.params = new com.mia.order.tApi.TParamsCancelOrderBackActLimit(other.params);
			}
			if (other.isSetCParams()) {
				this.cParams = new com.mia.order.tApi.CommonParams(other.cParams);
			}
		}

		public cancelOrderBackActLimit_args deepCopy() {
			return new cancelOrderBackActLimit_args(this);
		}

		@Override
		public void clear() {
			this.params = null;
			this.cParams = null;
		}

		public com.mia.order.tApi.TParamsCancelOrderBackActLimit getParams() {
			return this.params;
		}

		public cancelOrderBackActLimit_args setParams(com.mia.order.tApi.TParamsCancelOrderBackActLimit params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/**
		 * Returns true if field params is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public com.mia.order.tApi.CommonParams getCParams() {
			return this.cParams;
		}

		public cancelOrderBackActLimit_args setCParams(com.mia.order.tApi.CommonParams cParams) {
			this.cParams = cParams;
			return this;
		}

		public void unsetCParams() {
			this.cParams = null;
		}

		/**
		 * Returns true if field cParams is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCParams() {
			return this.cParams != null;
		}

		public void setCParamsIsSet(boolean value) {
			if (!value) {
				this.cParams = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((com.mia.order.tApi.TParamsCancelOrderBackActLimit) value);
				}
				break;

			case C_PARAMS:
				if (value == null) {
					unsetCParams();
				} else {
					setCParams((com.mia.order.tApi.CommonParams) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			case C_PARAMS:
				return getCParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			case C_PARAMS:
				return isSetCParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof cancelOrderBackActLimit_args)
				return this.equals((cancelOrderBackActLimit_args) that);
			return false;
		}

		public boolean equals(cancelOrderBackActLimit_args that) {
			if (that == null)
				return false;

			boolean this_present_params = true && this.isSetParams();
			boolean that_present_params = true && that.isSetParams();
			if (this_present_params || that_present_params) {
				if (!(this_present_params && that_present_params))
					return false;
				if (!this.params.equals(that.params))
					return false;
			}

			boolean this_present_cParams = true && this.isSetCParams();
			boolean that_present_cParams = true && that.isSetCParams();
			if (this_present_cParams || that_present_cParams) {
				if (!(this_present_cParams && that_present_cParams))
					return false;
				if (!this.cParams.equals(that.cParams))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_params = true && (isSetParams());
			list.add(present_params);
			if (present_params)
				list.add(params);

			boolean present_cParams = true && (isSetCParams());
			list.add(present_cParams);
			if (present_cParams)
				list.add(cParams);

			return list.hashCode();
		}

		@Override
		public int compareTo(cancelOrderBackActLimit_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCParams()).compareTo(other.isSetCParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cParams, other.cParams);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("cancelOrderBackActLimit_args(");
			boolean first = true;

			sb.append("params:");
			if (this.params == null) {
				sb.append("null");
			} else {
				sb.append(this.params);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("cParams:");
			if (this.cParams == null) {
				sb.append("null");
			} else {
				sb.append(this.cParams);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (params != null) {
				params.validate();
			}
			if (cParams != null) {
				cParams.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class cancelOrderBackActLimit_argsStandardSchemeFactory implements SchemeFactory {
			public cancelOrderBackActLimit_argsStandardScheme getScheme() {
				return new cancelOrderBackActLimit_argsStandardScheme();
			}
		}

		private static class cancelOrderBackActLimit_argsStandardScheme
				extends StandardScheme<cancelOrderBackActLimit_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrderBackActLimit_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.params = new com.mia.order.tApi.TParamsCancelOrderBackActLimit();
							struct.params.read(iprot);
							struct.setParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // C_PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.cParams = new com.mia.order.tApi.CommonParams();
							struct.cParams.read(iprot);
							struct.setCParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrderBackActLimit_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.params != null) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					struct.params.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.cParams != null) {
					oprot.writeFieldBegin(C_PARAMS_FIELD_DESC);
					struct.cParams.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class cancelOrderBackActLimit_argsTupleSchemeFactory implements SchemeFactory {
			public cancelOrderBackActLimit_argsTupleScheme getScheme() {
				return new cancelOrderBackActLimit_argsTupleScheme();
			}
		}

		private static class cancelOrderBackActLimit_argsTupleScheme extends TupleScheme<cancelOrderBackActLimit_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrderBackActLimit_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParams()) {
					optionals.set(0);
				}
				if (struct.isSetCParams()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetParams()) {
					struct.params.write(oprot);
				}
				if (struct.isSetCParams()) {
					struct.cParams.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrderBackActLimit_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.params = new com.mia.order.tApi.TParamsCancelOrderBackActLimit();
					struct.params.read(iprot);
					struct.setParamsIsSet(true);
				}
				if (incoming.get(1)) {
					struct.cParams = new com.mia.order.tApi.CommonParams();
					struct.cParams.read(iprot);
					struct.setCParamsIsSet(true);
				}
			}
		}

	}

	public static class cancelOrderBackActLimit_result
			implements org.apache.thrift.TBase<cancelOrderBackActLimit_result, cancelOrderBackActLimit_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<cancelOrderBackActLimit_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"cancelOrderBackActLimit_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new cancelOrderBackActLimit_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new cancelOrderBackActLimit_resultTupleSchemeFactory());
		}

		public com.mia.order.tApi.TResultCancelOrderBackActLimit success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TResultCancelOrderBackActLimit.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrderBackActLimit_result.class,
					metaDataMap);
		}

		public cancelOrderBackActLimit_result() {
		}

		public cancelOrderBackActLimit_result(com.mia.order.tApi.TResultCancelOrderBackActLimit success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public cancelOrderBackActLimit_result(cancelOrderBackActLimit_result other) {
			if (other.isSetSuccess()) {
				this.success = new com.mia.order.tApi.TResultCancelOrderBackActLimit(other.success);
			}
		}

		public cancelOrderBackActLimit_result deepCopy() {
			return new cancelOrderBackActLimit_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public com.mia.order.tApi.TResultCancelOrderBackActLimit getSuccess() {
			return this.success;
		}

		public cancelOrderBackActLimit_result setSuccess(com.mia.order.tApi.TResultCancelOrderBackActLimit success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((com.mia.order.tApi.TResultCancelOrderBackActLimit) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof cancelOrderBackActLimit_result)
				return this.equals((cancelOrderBackActLimit_result) that);
			return false;
		}

		public boolean equals(cancelOrderBackActLimit_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(cancelOrderBackActLimit_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("cancelOrderBackActLimit_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class cancelOrderBackActLimit_resultStandardSchemeFactory implements SchemeFactory {
			public cancelOrderBackActLimit_resultStandardScheme getScheme() {
				return new cancelOrderBackActLimit_resultStandardScheme();
			}
		}

		private static class cancelOrderBackActLimit_resultStandardScheme
				extends StandardScheme<cancelOrderBackActLimit_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrderBackActLimit_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new com.mia.order.tApi.TResultCancelOrderBackActLimit();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrderBackActLimit_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class cancelOrderBackActLimit_resultTupleSchemeFactory implements SchemeFactory {
			public cancelOrderBackActLimit_resultTupleScheme getScheme() {
				return new cancelOrderBackActLimit_resultTupleScheme();
			}
		}

		private static class cancelOrderBackActLimit_resultTupleScheme
				extends TupleScheme<cancelOrderBackActLimit_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrderBackActLimit_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrderBackActLimit_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new com.mia.order.tApi.TResultCancelOrderBackActLimit();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class cancelOrder_args implements org.apache.thrift.TBase<cancelOrder_args, cancelOrder_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<cancelOrder_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"cancelOrder_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"params", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField C_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"cParams", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new cancelOrder_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new cancelOrder_argsTupleSchemeFactory());
		}

		public com.mia.order.tApi.TParamsCancelOrder params; // required
		public com.mia.order.tApi.CommonParams cParams; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short) 1, "params"), C_PARAMS((short) 2, "cParams");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAMS
					return PARAMS;
				case 2: // C_PARAMS
					return C_PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("params",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TParamsCancelOrder.class)));
			tmpMap.put(_Fields.C_PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("cParams",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.CommonParams.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrder_args.class, metaDataMap);
		}

		public cancelOrder_args() {
		}

		public cancelOrder_args(com.mia.order.tApi.TParamsCancelOrder params, com.mia.order.tApi.CommonParams cParams) {
			this();
			this.params = params;
			this.cParams = cParams;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public cancelOrder_args(cancelOrder_args other) {
			if (other.isSetParams()) {
				this.params = new com.mia.order.tApi.TParamsCancelOrder(other.params);
			}
			if (other.isSetCParams()) {
				this.cParams = new com.mia.order.tApi.CommonParams(other.cParams);
			}
		}

		public cancelOrder_args deepCopy() {
			return new cancelOrder_args(this);
		}

		@Override
		public void clear() {
			this.params = null;
			this.cParams = null;
		}

		public com.mia.order.tApi.TParamsCancelOrder getParams() {
			return this.params;
		}

		public cancelOrder_args setParams(com.mia.order.tApi.TParamsCancelOrder params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/**
		 * Returns true if field params is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public com.mia.order.tApi.CommonParams getCParams() {
			return this.cParams;
		}

		public cancelOrder_args setCParams(com.mia.order.tApi.CommonParams cParams) {
			this.cParams = cParams;
			return this;
		}

		public void unsetCParams() {
			this.cParams = null;
		}

		/**
		 * Returns true if field cParams is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCParams() {
			return this.cParams != null;
		}

		public void setCParamsIsSet(boolean value) {
			if (!value) {
				this.cParams = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((com.mia.order.tApi.TParamsCancelOrder) value);
				}
				break;

			case C_PARAMS:
				if (value == null) {
					unsetCParams();
				} else {
					setCParams((com.mia.order.tApi.CommonParams) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			case C_PARAMS:
				return getCParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			case C_PARAMS:
				return isSetCParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof cancelOrder_args)
				return this.equals((cancelOrder_args) that);
			return false;
		}

		public boolean equals(cancelOrder_args that) {
			if (that == null)
				return false;

			boolean this_present_params = true && this.isSetParams();
			boolean that_present_params = true && that.isSetParams();
			if (this_present_params || that_present_params) {
				if (!(this_present_params && that_present_params))
					return false;
				if (!this.params.equals(that.params))
					return false;
			}

			boolean this_present_cParams = true && this.isSetCParams();
			boolean that_present_cParams = true && that.isSetCParams();
			if (this_present_cParams || that_present_cParams) {
				if (!(this_present_cParams && that_present_cParams))
					return false;
				if (!this.cParams.equals(that.cParams))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_params = true && (isSetParams());
			list.add(present_params);
			if (present_params)
				list.add(params);

			boolean present_cParams = true && (isSetCParams());
			list.add(present_cParams);
			if (present_cParams)
				list.add(cParams);

			return list.hashCode();
		}

		@Override
		public int compareTo(cancelOrder_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCParams()).compareTo(other.isSetCParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cParams, other.cParams);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("cancelOrder_args(");
			boolean first = true;

			sb.append("params:");
			if (this.params == null) {
				sb.append("null");
			} else {
				sb.append(this.params);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("cParams:");
			if (this.cParams == null) {
				sb.append("null");
			} else {
				sb.append(this.cParams);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (params != null) {
				params.validate();
			}
			if (cParams != null) {
				cParams.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class cancelOrder_argsStandardSchemeFactory implements SchemeFactory {
			public cancelOrder_argsStandardScheme getScheme() {
				return new cancelOrder_argsStandardScheme();
			}
		}

		private static class cancelOrder_argsStandardScheme extends StandardScheme<cancelOrder_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.params = new com.mia.order.tApi.TParamsCancelOrder();
							struct.params.read(iprot);
							struct.setParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // C_PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.cParams = new com.mia.order.tApi.CommonParams();
							struct.cParams.read(iprot);
							struct.setCParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrder_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.params != null) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					struct.params.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.cParams != null) {
					oprot.writeFieldBegin(C_PARAMS_FIELD_DESC);
					struct.cParams.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class cancelOrder_argsTupleSchemeFactory implements SchemeFactory {
			public cancelOrder_argsTupleScheme getScheme() {
				return new cancelOrder_argsTupleScheme();
			}
		}

		private static class cancelOrder_argsTupleScheme extends TupleScheme<cancelOrder_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrder_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParams()) {
					optionals.set(0);
				}
				if (struct.isSetCParams()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetParams()) {
					struct.params.write(oprot);
				}
				if (struct.isSetCParams()) {
					struct.cParams.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrder_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.params = new com.mia.order.tApi.TParamsCancelOrder();
					struct.params.read(iprot);
					struct.setParamsIsSet(true);
				}
				if (incoming.get(1)) {
					struct.cParams = new com.mia.order.tApi.CommonParams();
					struct.cParams.read(iprot);
					struct.setCParamsIsSet(true);
				}
			}
		}

	}

	public static class cancelOrder_result
			implements org.apache.thrift.TBase<cancelOrder_result, cancelOrder_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<cancelOrder_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"cancelOrder_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new cancelOrder_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new cancelOrder_resultTupleSchemeFactory());
		}

		public com.mia.order.tApi.TResultCancelOrder success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TResultCancelOrder.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrder_result.class, metaDataMap);
		}

		public cancelOrder_result() {
		}

		public cancelOrder_result(com.mia.order.tApi.TResultCancelOrder success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public cancelOrder_result(cancelOrder_result other) {
			if (other.isSetSuccess()) {
				this.success = new com.mia.order.tApi.TResultCancelOrder(other.success);
			}
		}

		public cancelOrder_result deepCopy() {
			return new cancelOrder_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public com.mia.order.tApi.TResultCancelOrder getSuccess() {
			return this.success;
		}

		public cancelOrder_result setSuccess(com.mia.order.tApi.TResultCancelOrder success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((com.mia.order.tApi.TResultCancelOrder) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof cancelOrder_result)
				return this.equals((cancelOrder_result) that);
			return false;
		}

		public boolean equals(cancelOrder_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(cancelOrder_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("cancelOrder_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class cancelOrder_resultStandardSchemeFactory implements SchemeFactory {
			public cancelOrder_resultStandardScheme getScheme() {
				return new cancelOrder_resultStandardScheme();
			}
		}

		private static class cancelOrder_resultStandardScheme extends StandardScheme<cancelOrder_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new com.mia.order.tApi.TResultCancelOrder();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrder_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class cancelOrder_resultTupleSchemeFactory implements SchemeFactory {
			public cancelOrder_resultTupleScheme getScheme() {
				return new cancelOrder_resultTupleScheme();
			}
		}

		private static class cancelOrder_resultTupleScheme extends TupleScheme<cancelOrder_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrder_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrder_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new com.mia.order.tApi.TResultCancelOrder();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class cancelVirtualOrder_args
			implements org.apache.thrift.TBase<cancelVirtualOrder_args, cancelVirtualOrder_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<cancelVirtualOrder_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"cancelVirtualOrder_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"params", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField C_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"cParams", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new cancelVirtualOrder_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new cancelVirtualOrder_argsTupleSchemeFactory());
		}

		public com.mia.order.tApi.TParamsCancelOrder params; // required
		public com.mia.order.tApi.CommonParams cParams; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short) 1, "params"), C_PARAMS((short) 2, "cParams");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAMS
					return PARAMS;
				case 2: // C_PARAMS
					return C_PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("params",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TParamsCancelOrder.class)));
			tmpMap.put(_Fields.C_PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("cParams",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.CommonParams.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelVirtualOrder_args.class, metaDataMap);
		}

		public cancelVirtualOrder_args() {
		}

		public cancelVirtualOrder_args(com.mia.order.tApi.TParamsCancelOrder params,
				com.mia.order.tApi.CommonParams cParams) {
			this();
			this.params = params;
			this.cParams = cParams;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public cancelVirtualOrder_args(cancelVirtualOrder_args other) {
			if (other.isSetParams()) {
				this.params = new com.mia.order.tApi.TParamsCancelOrder(other.params);
			}
			if (other.isSetCParams()) {
				this.cParams = new com.mia.order.tApi.CommonParams(other.cParams);
			}
		}

		public cancelVirtualOrder_args deepCopy() {
			return new cancelVirtualOrder_args(this);
		}

		@Override
		public void clear() {
			this.params = null;
			this.cParams = null;
		}

		public com.mia.order.tApi.TParamsCancelOrder getParams() {
			return this.params;
		}

		public cancelVirtualOrder_args setParams(com.mia.order.tApi.TParamsCancelOrder params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/**
		 * Returns true if field params is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public com.mia.order.tApi.CommonParams getCParams() {
			return this.cParams;
		}

		public cancelVirtualOrder_args setCParams(com.mia.order.tApi.CommonParams cParams) {
			this.cParams = cParams;
			return this;
		}

		public void unsetCParams() {
			this.cParams = null;
		}

		/**
		 * Returns true if field cParams is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCParams() {
			return this.cParams != null;
		}

		public void setCParamsIsSet(boolean value) {
			if (!value) {
				this.cParams = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((com.mia.order.tApi.TParamsCancelOrder) value);
				}
				break;

			case C_PARAMS:
				if (value == null) {
					unsetCParams();
				} else {
					setCParams((com.mia.order.tApi.CommonParams) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			case C_PARAMS:
				return getCParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			case C_PARAMS:
				return isSetCParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof cancelVirtualOrder_args)
				return this.equals((cancelVirtualOrder_args) that);
			return false;
		}

		public boolean equals(cancelVirtualOrder_args that) {
			if (that == null)
				return false;

			boolean this_present_params = true && this.isSetParams();
			boolean that_present_params = true && that.isSetParams();
			if (this_present_params || that_present_params) {
				if (!(this_present_params && that_present_params))
					return false;
				if (!this.params.equals(that.params))
					return false;
			}

			boolean this_present_cParams = true && this.isSetCParams();
			boolean that_present_cParams = true && that.isSetCParams();
			if (this_present_cParams || that_present_cParams) {
				if (!(this_present_cParams && that_present_cParams))
					return false;
				if (!this.cParams.equals(that.cParams))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_params = true && (isSetParams());
			list.add(present_params);
			if (present_params)
				list.add(params);

			boolean present_cParams = true && (isSetCParams());
			list.add(present_cParams);
			if (present_cParams)
				list.add(cParams);

			return list.hashCode();
		}

		@Override
		public int compareTo(cancelVirtualOrder_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCParams()).compareTo(other.isSetCParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cParams, other.cParams);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("cancelVirtualOrder_args(");
			boolean first = true;

			sb.append("params:");
			if (this.params == null) {
				sb.append("null");
			} else {
				sb.append(this.params);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("cParams:");
			if (this.cParams == null) {
				sb.append("null");
			} else {
				sb.append(this.cParams);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (params != null) {
				params.validate();
			}
			if (cParams != null) {
				cParams.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class cancelVirtualOrder_argsStandardSchemeFactory implements SchemeFactory {
			public cancelVirtualOrder_argsStandardScheme getScheme() {
				return new cancelVirtualOrder_argsStandardScheme();
			}
		}

		private static class cancelVirtualOrder_argsStandardScheme extends StandardScheme<cancelVirtualOrder_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, cancelVirtualOrder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.params = new com.mia.order.tApi.TParamsCancelOrder();
							struct.params.read(iprot);
							struct.setParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // C_PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.cParams = new com.mia.order.tApi.CommonParams();
							struct.cParams.read(iprot);
							struct.setCParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, cancelVirtualOrder_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.params != null) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					struct.params.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.cParams != null) {
					oprot.writeFieldBegin(C_PARAMS_FIELD_DESC);
					struct.cParams.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class cancelVirtualOrder_argsTupleSchemeFactory implements SchemeFactory {
			public cancelVirtualOrder_argsTupleScheme getScheme() {
				return new cancelVirtualOrder_argsTupleScheme();
			}
		}

		private static class cancelVirtualOrder_argsTupleScheme extends TupleScheme<cancelVirtualOrder_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, cancelVirtualOrder_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParams()) {
					optionals.set(0);
				}
				if (struct.isSetCParams()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetParams()) {
					struct.params.write(oprot);
				}
				if (struct.isSetCParams()) {
					struct.cParams.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, cancelVirtualOrder_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.params = new com.mia.order.tApi.TParamsCancelOrder();
					struct.params.read(iprot);
					struct.setParamsIsSet(true);
				}
				if (incoming.get(1)) {
					struct.cParams = new com.mia.order.tApi.CommonParams();
					struct.cParams.read(iprot);
					struct.setCParamsIsSet(true);
				}
			}
		}

	}

	public static class cancelVirtualOrder_result
			implements org.apache.thrift.TBase<cancelVirtualOrder_result, cancelVirtualOrder_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<cancelVirtualOrder_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"cancelVirtualOrder_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new cancelVirtualOrder_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new cancelVirtualOrder_resultTupleSchemeFactory());
		}

		public com.mia.order.tApi.TResultCancelOrder success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TResultCancelOrder.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelVirtualOrder_result.class,
					metaDataMap);
		}

		public cancelVirtualOrder_result() {
		}

		public cancelVirtualOrder_result(com.mia.order.tApi.TResultCancelOrder success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public cancelVirtualOrder_result(cancelVirtualOrder_result other) {
			if (other.isSetSuccess()) {
				this.success = new com.mia.order.tApi.TResultCancelOrder(other.success);
			}
		}

		public cancelVirtualOrder_result deepCopy() {
			return new cancelVirtualOrder_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public com.mia.order.tApi.TResultCancelOrder getSuccess() {
			return this.success;
		}

		public cancelVirtualOrder_result setSuccess(com.mia.order.tApi.TResultCancelOrder success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((com.mia.order.tApi.TResultCancelOrder) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof cancelVirtualOrder_result)
				return this.equals((cancelVirtualOrder_result) that);
			return false;
		}

		public boolean equals(cancelVirtualOrder_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(cancelVirtualOrder_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("cancelVirtualOrder_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class cancelVirtualOrder_resultStandardSchemeFactory implements SchemeFactory {
			public cancelVirtualOrder_resultStandardScheme getScheme() {
				return new cancelVirtualOrder_resultStandardScheme();
			}
		}

		private static class cancelVirtualOrder_resultStandardScheme extends StandardScheme<cancelVirtualOrder_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, cancelVirtualOrder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new com.mia.order.tApi.TResultCancelOrder();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, cancelVirtualOrder_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class cancelVirtualOrder_resultTupleSchemeFactory implements SchemeFactory {
			public cancelVirtualOrder_resultTupleScheme getScheme() {
				return new cancelVirtualOrder_resultTupleScheme();
			}
		}

		private static class cancelVirtualOrder_resultTupleScheme extends TupleScheme<cancelVirtualOrder_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, cancelVirtualOrder_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, cancelVirtualOrder_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new com.mia.order.tApi.TResultCancelOrder();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<ping_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ping_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"params", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
		}

		public com.mia.order.tApi.TParamsPing params; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short) 1, "params");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAMS
					return PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("params",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TParamsPing.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
		}

		public ping_args() {
		}

		public ping_args(com.mia.order.tApi.TParamsPing params) {
			this();
			this.params = params;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ping_args(ping_args other) {
			if (other.isSetParams()) {
				this.params = new com.mia.order.tApi.TParamsPing(other.params);
			}
		}

		public ping_args deepCopy() {
			return new ping_args(this);
		}

		@Override
		public void clear() {
			this.params = null;
		}

		public com.mia.order.tApi.TParamsPing getParams() {
			return this.params;
		}

		public ping_args setParams(com.mia.order.tApi.TParamsPing params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/**
		 * Returns true if field params is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((com.mia.order.tApi.TParamsPing) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof ping_args)
				return this.equals((ping_args) that);
			return false;
		}

		public boolean equals(ping_args that) {
			if (that == null)
				return false;

			boolean this_present_params = true && this.isSetParams();
			boolean that_present_params = true && that.isSetParams();
			if (this_present_params || that_present_params) {
				if (!(this_present_params && that_present_params))
					return false;
				if (!this.params.equals(that.params))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_params = true && (isSetParams());
			list.add(present_params);
			if (present_params)
				list.add(params);

			return list.hashCode();
		}

		@Override
		public int compareTo(ping_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("ping_args(");
			boolean first = true;

			sb.append("params:");
			if (this.params == null) {
				sb.append("null");
			} else {
				sb.append(this.params);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (params != null) {
				params.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ping_argsStandardSchemeFactory implements SchemeFactory {
			public ping_argsStandardScheme getScheme() {
				return new ping_argsStandardScheme();
			}
		}

		private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.params = new com.mia.order.tApi.TParamsPing();
							struct.params.read(iprot);
							struct.setParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.params != null) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					struct.params.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ping_argsTupleSchemeFactory implements SchemeFactory {
			public ping_argsTupleScheme getScheme() {
				return new ping_argsTupleScheme();
			}
		}

		private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParams()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetParams()) {
					struct.params.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.params = new com.mia.order.tApi.TParamsPing();
					struct.params.read(iprot);
					struct.setParamsIsSet(true);
				}
			}
		}

	}

	public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<ping_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ping_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
		}

		public com.mia.order.tApi.TResultPing success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TResultPing.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
		}

		public ping_result() {
		}

		public ping_result(com.mia.order.tApi.TResultPing success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ping_result(ping_result other) {
			if (other.isSetSuccess()) {
				this.success = new com.mia.order.tApi.TResultPing(other.success);
			}
		}

		public ping_result deepCopy() {
			return new ping_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public com.mia.order.tApi.TResultPing getSuccess() {
			return this.success;
		}

		public ping_result setSuccess(com.mia.order.tApi.TResultPing success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((com.mia.order.tApi.TResultPing) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof ping_result)
				return this.equals((ping_result) that);
			return false;
		}

		public boolean equals(ping_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(ping_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("ping_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ping_resultStandardSchemeFactory implements SchemeFactory {
			public ping_resultStandardScheme getScheme() {
				return new ping_resultStandardScheme();
			}
		}

		private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new com.mia.order.tApi.TResultPing();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ping_resultTupleSchemeFactory implements SchemeFactory {
			public ping_resultTupleScheme getScheme() {
				return new ping_resultTupleScheme();
			}
		}

		private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new com.mia.order.tApi.TResultPing();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class setRedisValue_args
			implements org.apache.thrift.TBase<setRedisValue_args, setRedisValue_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<setRedisValue_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setRedisValue_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"params", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new setRedisValue_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new setRedisValue_argsTupleSchemeFactory());
		}

		public com.mia.order.tApi.TParamsSetRedisValue params; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short) 1, "params");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAMS
					return PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("params",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TParamsSetRedisValue.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRedisValue_args.class, metaDataMap);
		}

		public setRedisValue_args() {
		}

		public setRedisValue_args(com.mia.order.tApi.TParamsSetRedisValue params) {
			this();
			this.params = params;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setRedisValue_args(setRedisValue_args other) {
			if (other.isSetParams()) {
				this.params = new com.mia.order.tApi.TParamsSetRedisValue(other.params);
			}
		}

		public setRedisValue_args deepCopy() {
			return new setRedisValue_args(this);
		}

		@Override
		public void clear() {
			this.params = null;
		}

		public com.mia.order.tApi.TParamsSetRedisValue getParams() {
			return this.params;
		}

		public setRedisValue_args setParams(com.mia.order.tApi.TParamsSetRedisValue params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/**
		 * Returns true if field params is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((com.mia.order.tApi.TParamsSetRedisValue) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof setRedisValue_args)
				return this.equals((setRedisValue_args) that);
			return false;
		}

		public boolean equals(setRedisValue_args that) {
			if (that == null)
				return false;

			boolean this_present_params = true && this.isSetParams();
			boolean that_present_params = true && that.isSetParams();
			if (this_present_params || that_present_params) {
				if (!(this_present_params && that_present_params))
					return false;
				if (!this.params.equals(that.params))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_params = true && (isSetParams());
			list.add(present_params);
			if (present_params)
				list.add(params);

			return list.hashCode();
		}

		@Override
		public int compareTo(setRedisValue_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("setRedisValue_args(");
			boolean first = true;

			sb.append("params:");
			if (this.params == null) {
				sb.append("null");
			} else {
				sb.append(this.params);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (params != null) {
				params.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setRedisValue_argsStandardSchemeFactory implements SchemeFactory {
			public setRedisValue_argsStandardScheme getScheme() {
				return new setRedisValue_argsStandardScheme();
			}
		}

		private static class setRedisValue_argsStandardScheme extends StandardScheme<setRedisValue_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setRedisValue_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.params = new com.mia.order.tApi.TParamsSetRedisValue();
							struct.params.read(iprot);
							struct.setParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setRedisValue_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.params != null) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					struct.params.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setRedisValue_argsTupleSchemeFactory implements SchemeFactory {
			public setRedisValue_argsTupleScheme getScheme() {
				return new setRedisValue_argsTupleScheme();
			}
		}

		private static class setRedisValue_argsTupleScheme extends TupleScheme<setRedisValue_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setRedisValue_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParams()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetParams()) {
					struct.params.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setRedisValue_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.params = new com.mia.order.tApi.TParamsSetRedisValue();
					struct.params.read(iprot);
					struct.setParamsIsSet(true);
				}
			}
		}

	}

	public static class setRedisValue_result
			implements org.apache.thrift.TBase<setRedisValue_result, setRedisValue_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setRedisValue_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setRedisValue_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new setRedisValue_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new setRedisValue_resultTupleSchemeFactory());
		}

		public com.mia.order.tApi.TResultSetRedisCom success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TResultSetRedisCom.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRedisValue_result.class, metaDataMap);
		}

		public setRedisValue_result() {
		}

		public setRedisValue_result(com.mia.order.tApi.TResultSetRedisCom success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setRedisValue_result(setRedisValue_result other) {
			if (other.isSetSuccess()) {
				this.success = new com.mia.order.tApi.TResultSetRedisCom(other.success);
			}
		}

		public setRedisValue_result deepCopy() {
			return new setRedisValue_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public com.mia.order.tApi.TResultSetRedisCom getSuccess() {
			return this.success;
		}

		public setRedisValue_result setSuccess(com.mia.order.tApi.TResultSetRedisCom success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((com.mia.order.tApi.TResultSetRedisCom) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof setRedisValue_result)
				return this.equals((setRedisValue_result) that);
			return false;
		}

		public boolean equals(setRedisValue_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(setRedisValue_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("setRedisValue_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setRedisValue_resultStandardSchemeFactory implements SchemeFactory {
			public setRedisValue_resultStandardScheme getScheme() {
				return new setRedisValue_resultStandardScheme();
			}
		}

		private static class setRedisValue_resultStandardScheme extends StandardScheme<setRedisValue_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setRedisValue_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new com.mia.order.tApi.TResultSetRedisCom();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setRedisValue_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setRedisValue_resultTupleSchemeFactory implements SchemeFactory {
			public setRedisValue_resultTupleScheme getScheme() {
				return new setRedisValue_resultTupleScheme();
			}
		}

		private static class setRedisValue_resultTupleScheme extends TupleScheme<setRedisValue_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setRedisValue_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setRedisValue_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new com.mia.order.tApi.TResultSetRedisCom();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getRedisValue_args
			implements org.apache.thrift.TBase<getRedisValue_args, getRedisValue_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getRedisValue_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRedisValue_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"params", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getRedisValue_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getRedisValue_argsTupleSchemeFactory());
		}

		public com.mia.order.tApi.TParamsGetRedisValue params; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short) 1, "params");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAMS
					return PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("params",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TParamsGetRedisValue.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRedisValue_args.class, metaDataMap);
		}

		public getRedisValue_args() {
		}

		public getRedisValue_args(com.mia.order.tApi.TParamsGetRedisValue params) {
			this();
			this.params = params;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRedisValue_args(getRedisValue_args other) {
			if (other.isSetParams()) {
				this.params = new com.mia.order.tApi.TParamsGetRedisValue(other.params);
			}
		}

		public getRedisValue_args deepCopy() {
			return new getRedisValue_args(this);
		}

		@Override
		public void clear() {
			this.params = null;
		}

		public com.mia.order.tApi.TParamsGetRedisValue getParams() {
			return this.params;
		}

		public getRedisValue_args setParams(com.mia.order.tApi.TParamsGetRedisValue params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/**
		 * Returns true if field params is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((com.mia.order.tApi.TParamsGetRedisValue) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getRedisValue_args)
				return this.equals((getRedisValue_args) that);
			return false;
		}

		public boolean equals(getRedisValue_args that) {
			if (that == null)
				return false;

			boolean this_present_params = true && this.isSetParams();
			boolean that_present_params = true && that.isSetParams();
			if (this_present_params || that_present_params) {
				if (!(this_present_params && that_present_params))
					return false;
				if (!this.params.equals(that.params))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_params = true && (isSetParams());
			list.add(present_params);
			if (present_params)
				list.add(params);

			return list.hashCode();
		}

		@Override
		public int compareTo(getRedisValue_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getRedisValue_args(");
			boolean first = true;

			sb.append("params:");
			if (this.params == null) {
				sb.append("null");
			} else {
				sb.append(this.params);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (params != null) {
				params.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRedisValue_argsStandardSchemeFactory implements SchemeFactory {
			public getRedisValue_argsStandardScheme getScheme() {
				return new getRedisValue_argsStandardScheme();
			}
		}

		private static class getRedisValue_argsStandardScheme extends StandardScheme<getRedisValue_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRedisValue_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.params = new com.mia.order.tApi.TParamsGetRedisValue();
							struct.params.read(iprot);
							struct.setParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRedisValue_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.params != null) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					struct.params.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRedisValue_argsTupleSchemeFactory implements SchemeFactory {
			public getRedisValue_argsTupleScheme getScheme() {
				return new getRedisValue_argsTupleScheme();
			}
		}

		private static class getRedisValue_argsTupleScheme extends TupleScheme<getRedisValue_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRedisValue_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParams()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetParams()) {
					struct.params.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRedisValue_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.params = new com.mia.order.tApi.TParamsGetRedisValue();
					struct.params.read(iprot);
					struct.setParamsIsSet(true);
				}
			}
		}

	}

	public static class getRedisValue_result
			implements org.apache.thrift.TBase<getRedisValue_result, getRedisValue_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getRedisValue_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRedisValue_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new getRedisValue_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getRedisValue_resultTupleSchemeFactory());
		}

		public com.mia.order.tApi.TResultGetRedisCom success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TResultGetRedisCom.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRedisValue_result.class, metaDataMap);
		}

		public getRedisValue_result() {
		}

		public getRedisValue_result(com.mia.order.tApi.TResultGetRedisCom success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRedisValue_result(getRedisValue_result other) {
			if (other.isSetSuccess()) {
				this.success = new com.mia.order.tApi.TResultGetRedisCom(other.success);
			}
		}

		public getRedisValue_result deepCopy() {
			return new getRedisValue_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public com.mia.order.tApi.TResultGetRedisCom getSuccess() {
			return this.success;
		}

		public getRedisValue_result setSuccess(com.mia.order.tApi.TResultGetRedisCom success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((com.mia.order.tApi.TResultGetRedisCom) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getRedisValue_result)
				return this.equals((getRedisValue_result) that);
			return false;
		}

		public boolean equals(getRedisValue_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(getRedisValue_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getRedisValue_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRedisValue_resultStandardSchemeFactory implements SchemeFactory {
			public getRedisValue_resultStandardScheme getScheme() {
				return new getRedisValue_resultStandardScheme();
			}
		}

		private static class getRedisValue_resultStandardScheme extends StandardScheme<getRedisValue_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRedisValue_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new com.mia.order.tApi.TResultGetRedisCom();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRedisValue_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRedisValue_resultTupleSchemeFactory implements SchemeFactory {
			public getRedisValue_resultTupleScheme getScheme() {
				return new getRedisValue_resultTupleScheme();
			}
		}

		private static class getRedisValue_resultTupleScheme extends TupleScheme<getRedisValue_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRedisValue_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRedisValue_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new com.mia.order.tApi.TResultGetRedisCom();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class orderDetail_args implements org.apache.thrift.TBase<orderDetail_args, orderDetail_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<orderDetail_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orderDetail_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"params", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField C_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"cParams", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new orderDetail_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new orderDetail_argsTupleSchemeFactory());
		}

		public com.mia.order.tApi.TParamsOrderDetail params; // required
		public com.mia.order.tApi.CommonParams cParams; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short) 1, "params"), C_PARAMS((short) 2, "cParams");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAMS
					return PARAMS;
				case 2: // C_PARAMS
					return C_PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("params",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TParamsOrderDetail.class)));
			tmpMap.put(_Fields.C_PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("cParams",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.CommonParams.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderDetail_args.class, metaDataMap);
		}

		public orderDetail_args() {
		}

		public orderDetail_args(com.mia.order.tApi.TParamsOrderDetail params, com.mia.order.tApi.CommonParams cParams) {
			this();
			this.params = params;
			this.cParams = cParams;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orderDetail_args(orderDetail_args other) {
			if (other.isSetParams()) {
				this.params = new com.mia.order.tApi.TParamsOrderDetail(other.params);
			}
			if (other.isSetCParams()) {
				this.cParams = new com.mia.order.tApi.CommonParams(other.cParams);
			}
		}

		public orderDetail_args deepCopy() {
			return new orderDetail_args(this);
		}

		@Override
		public void clear() {
			this.params = null;
			this.cParams = null;
		}

		public com.mia.order.tApi.TParamsOrderDetail getParams() {
			return this.params;
		}

		public orderDetail_args setParams(com.mia.order.tApi.TParamsOrderDetail params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/**
		 * Returns true if field params is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public com.mia.order.tApi.CommonParams getCParams() {
			return this.cParams;
		}

		public orderDetail_args setCParams(com.mia.order.tApi.CommonParams cParams) {
			this.cParams = cParams;
			return this;
		}

		public void unsetCParams() {
			this.cParams = null;
		}

		/**
		 * Returns true if field cParams is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCParams() {
			return this.cParams != null;
		}

		public void setCParamsIsSet(boolean value) {
			if (!value) {
				this.cParams = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((com.mia.order.tApi.TParamsOrderDetail) value);
				}
				break;

			case C_PARAMS:
				if (value == null) {
					unsetCParams();
				} else {
					setCParams((com.mia.order.tApi.CommonParams) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			case C_PARAMS:
				return getCParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			case C_PARAMS:
				return isSetCParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof orderDetail_args)
				return this.equals((orderDetail_args) that);
			return false;
		}

		public boolean equals(orderDetail_args that) {
			if (that == null)
				return false;

			boolean this_present_params = true && this.isSetParams();
			boolean that_present_params = true && that.isSetParams();
			if (this_present_params || that_present_params) {
				if (!(this_present_params && that_present_params))
					return false;
				if (!this.params.equals(that.params))
					return false;
			}

			boolean this_present_cParams = true && this.isSetCParams();
			boolean that_present_cParams = true && that.isSetCParams();
			if (this_present_cParams || that_present_cParams) {
				if (!(this_present_cParams && that_present_cParams))
					return false;
				if (!this.cParams.equals(that.cParams))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_params = true && (isSetParams());
			list.add(present_params);
			if (present_params)
				list.add(params);

			boolean present_cParams = true && (isSetCParams());
			list.add(present_cParams);
			if (present_cParams)
				list.add(cParams);

			return list.hashCode();
		}

		@Override
		public int compareTo(orderDetail_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCParams()).compareTo(other.isSetCParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cParams, other.cParams);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("orderDetail_args(");
			boolean first = true;

			sb.append("params:");
			if (this.params == null) {
				sb.append("null");
			} else {
				sb.append(this.params);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("cParams:");
			if (this.cParams == null) {
				sb.append("null");
			} else {
				sb.append(this.cParams);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (params != null) {
				params.validate();
			}
			if (cParams != null) {
				cParams.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orderDetail_argsStandardSchemeFactory implements SchemeFactory {
			public orderDetail_argsStandardScheme getScheme() {
				return new orderDetail_argsStandardScheme();
			}
		}

		private static class orderDetail_argsStandardScheme extends StandardScheme<orderDetail_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orderDetail_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.params = new com.mia.order.tApi.TParamsOrderDetail();
							struct.params.read(iprot);
							struct.setParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // C_PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.cParams = new com.mia.order.tApi.CommonParams();
							struct.cParams.read(iprot);
							struct.setCParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orderDetail_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.params != null) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					struct.params.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.cParams != null) {
					oprot.writeFieldBegin(C_PARAMS_FIELD_DESC);
					struct.cParams.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orderDetail_argsTupleSchemeFactory implements SchemeFactory {
			public orderDetail_argsTupleScheme getScheme() {
				return new orderDetail_argsTupleScheme();
			}
		}

		private static class orderDetail_argsTupleScheme extends TupleScheme<orderDetail_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orderDetail_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParams()) {
					optionals.set(0);
				}
				if (struct.isSetCParams()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetParams()) {
					struct.params.write(oprot);
				}
				if (struct.isSetCParams()) {
					struct.cParams.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orderDetail_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.params = new com.mia.order.tApi.TParamsOrderDetail();
					struct.params.read(iprot);
					struct.setParamsIsSet(true);
				}
				if (incoming.get(1)) {
					struct.cParams = new com.mia.order.tApi.CommonParams();
					struct.cParams.read(iprot);
					struct.setCParamsIsSet(true);
				}
			}
		}

	}

	public static class orderDetail_result
			implements org.apache.thrift.TBase<orderDetail_result, orderDetail_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<orderDetail_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orderDetail_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new orderDetail_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new orderDetail_resultTupleSchemeFactory());
		}

		public com.mia.order.tApi.TResultOrderDetail success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TResultOrderDetail.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderDetail_result.class, metaDataMap);
		}

		public orderDetail_result() {
		}

		public orderDetail_result(com.mia.order.tApi.TResultOrderDetail success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orderDetail_result(orderDetail_result other) {
			if (other.isSetSuccess()) {
				this.success = new com.mia.order.tApi.TResultOrderDetail(other.success);
			}
		}

		public orderDetail_result deepCopy() {
			return new orderDetail_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public com.mia.order.tApi.TResultOrderDetail getSuccess() {
			return this.success;
		}

		public orderDetail_result setSuccess(com.mia.order.tApi.TResultOrderDetail success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((com.mia.order.tApi.TResultOrderDetail) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof orderDetail_result)
				return this.equals((orderDetail_result) that);
			return false;
		}

		public boolean equals(orderDetail_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(orderDetail_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("orderDetail_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orderDetail_resultStandardSchemeFactory implements SchemeFactory {
			public orderDetail_resultStandardScheme getScheme() {
				return new orderDetail_resultStandardScheme();
			}
		}

		private static class orderDetail_resultStandardScheme extends StandardScheme<orderDetail_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orderDetail_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new com.mia.order.tApi.TResultOrderDetail();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orderDetail_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orderDetail_resultTupleSchemeFactory implements SchemeFactory {
			public orderDetail_resultTupleScheme getScheme() {
				return new orderDetail_resultTupleScheme();
			}
		}

		private static class orderDetail_resultTupleScheme extends TupleScheme<orderDetail_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orderDetail_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orderDetail_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new com.mia.order.tApi.TResultOrderDetail();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class orderList_args implements org.apache.thrift.TBase<orderList_args, orderList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<orderList_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orderList_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"params", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField C_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"cParams", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new orderList_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new orderList_argsTupleSchemeFactory());
		}

		public com.mia.order.tApi.TParamsOrderList params; // required
		public com.mia.order.tApi.CommonParams cParams; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short) 1, "params"), C_PARAMS((short) 2, "cParams");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAMS
					return PARAMS;
				case 2: // C_PARAMS
					return C_PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("params",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TParamsOrderList.class)));
			tmpMap.put(_Fields.C_PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("cParams",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.CommonParams.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderList_args.class, metaDataMap);
		}

		public orderList_args() {
		}

		public orderList_args(com.mia.order.tApi.TParamsOrderList params, com.mia.order.tApi.CommonParams cParams) {
			this();
			this.params = params;
			this.cParams = cParams;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orderList_args(orderList_args other) {
			if (other.isSetParams()) {
				this.params = new com.mia.order.tApi.TParamsOrderList(other.params);
			}
			if (other.isSetCParams()) {
				this.cParams = new com.mia.order.tApi.CommonParams(other.cParams);
			}
		}

		public orderList_args deepCopy() {
			return new orderList_args(this);
		}

		@Override
		public void clear() {
			this.params = null;
			this.cParams = null;
		}

		public com.mia.order.tApi.TParamsOrderList getParams() {
			return this.params;
		}

		public orderList_args setParams(com.mia.order.tApi.TParamsOrderList params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/**
		 * Returns true if field params is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public com.mia.order.tApi.CommonParams getCParams() {
			return this.cParams;
		}

		public orderList_args setCParams(com.mia.order.tApi.CommonParams cParams) {
			this.cParams = cParams;
			return this;
		}

		public void unsetCParams() {
			this.cParams = null;
		}

		/**
		 * Returns true if field cParams is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCParams() {
			return this.cParams != null;
		}

		public void setCParamsIsSet(boolean value) {
			if (!value) {
				this.cParams = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((com.mia.order.tApi.TParamsOrderList) value);
				}
				break;

			case C_PARAMS:
				if (value == null) {
					unsetCParams();
				} else {
					setCParams((com.mia.order.tApi.CommonParams) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			case C_PARAMS:
				return getCParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			case C_PARAMS:
				return isSetCParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof orderList_args)
				return this.equals((orderList_args) that);
			return false;
		}

		public boolean equals(orderList_args that) {
			if (that == null)
				return false;

			boolean this_present_params = true && this.isSetParams();
			boolean that_present_params = true && that.isSetParams();
			if (this_present_params || that_present_params) {
				if (!(this_present_params && that_present_params))
					return false;
				if (!this.params.equals(that.params))
					return false;
			}

			boolean this_present_cParams = true && this.isSetCParams();
			boolean that_present_cParams = true && that.isSetCParams();
			if (this_present_cParams || that_present_cParams) {
				if (!(this_present_cParams && that_present_cParams))
					return false;
				if (!this.cParams.equals(that.cParams))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_params = true && (isSetParams());
			list.add(present_params);
			if (present_params)
				list.add(params);

			boolean present_cParams = true && (isSetCParams());
			list.add(present_cParams);
			if (present_cParams)
				list.add(cParams);

			return list.hashCode();
		}

		@Override
		public int compareTo(orderList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCParams()).compareTo(other.isSetCParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cParams, other.cParams);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("orderList_args(");
			boolean first = true;

			sb.append("params:");
			if (this.params == null) {
				sb.append("null");
			} else {
				sb.append(this.params);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("cParams:");
			if (this.cParams == null) {
				sb.append("null");
			} else {
				sb.append(this.cParams);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (params != null) {
				params.validate();
			}
			if (cParams != null) {
				cParams.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orderList_argsStandardSchemeFactory implements SchemeFactory {
			public orderList_argsStandardScheme getScheme() {
				return new orderList_argsStandardScheme();
			}
		}

		private static class orderList_argsStandardScheme extends StandardScheme<orderList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orderList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.params = new com.mia.order.tApi.TParamsOrderList();
							struct.params.read(iprot);
							struct.setParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // C_PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.cParams = new com.mia.order.tApi.CommonParams();
							struct.cParams.read(iprot);
							struct.setCParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orderList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.params != null) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					struct.params.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.cParams != null) {
					oprot.writeFieldBegin(C_PARAMS_FIELD_DESC);
					struct.cParams.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orderList_argsTupleSchemeFactory implements SchemeFactory {
			public orderList_argsTupleScheme getScheme() {
				return new orderList_argsTupleScheme();
			}
		}

		private static class orderList_argsTupleScheme extends TupleScheme<orderList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orderList_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParams()) {
					optionals.set(0);
				}
				if (struct.isSetCParams()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetParams()) {
					struct.params.write(oprot);
				}
				if (struct.isSetCParams()) {
					struct.cParams.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orderList_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.params = new com.mia.order.tApi.TParamsOrderList();
					struct.params.read(iprot);
					struct.setParamsIsSet(true);
				}
				if (incoming.get(1)) {
					struct.cParams = new com.mia.order.tApi.CommonParams();
					struct.cParams.read(iprot);
					struct.setCParamsIsSet(true);
				}
			}
		}

	}

	public static class orderList_result implements org.apache.thrift.TBase<orderList_result, orderList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<orderList_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"orderList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new orderList_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new orderList_resultTupleSchemeFactory());
		}

		public com.mia.order.tApi.TResultOrderList success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TResultOrderList.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderList_result.class, metaDataMap);
		}

		public orderList_result() {
		}

		public orderList_result(com.mia.order.tApi.TResultOrderList success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public orderList_result(orderList_result other) {
			if (other.isSetSuccess()) {
				this.success = new com.mia.order.tApi.TResultOrderList(other.success);
			}
		}

		public orderList_result deepCopy() {
			return new orderList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public com.mia.order.tApi.TResultOrderList getSuccess() {
			return this.success;
		}

		public orderList_result setSuccess(com.mia.order.tApi.TResultOrderList success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((com.mia.order.tApi.TResultOrderList) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof orderList_result)
				return this.equals((orderList_result) that);
			return false;
		}

		public boolean equals(orderList_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(orderList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("orderList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class orderList_resultStandardSchemeFactory implements SchemeFactory {
			public orderList_resultStandardScheme getScheme() {
				return new orderList_resultStandardScheme();
			}
		}

		private static class orderList_resultStandardScheme extends StandardScheme<orderList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, orderList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new com.mia.order.tApi.TResultOrderList();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, orderList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class orderList_resultTupleSchemeFactory implements SchemeFactory {
			public orderList_resultTupleScheme getScheme() {
				return new orderList_resultTupleScheme();
			}
		}

		private static class orderList_resultTupleScheme extends TupleScheme<orderList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, orderList_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, orderList_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new com.mia.order.tApi.TResultOrderList();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class modifyOrderAddress_args
			implements org.apache.thrift.TBase<modifyOrderAddress_args, modifyOrderAddress_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<modifyOrderAddress_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"modifyOrderAddress_args");

		private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"params", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField C_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"cParams", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new modifyOrderAddress_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new modifyOrderAddress_argsTupleSchemeFactory());
		}

		public com.mia.order.tApi.TParamsModifyOrderAddress params; // required
		public com.mia.order.tApi.CommonParams cParams; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAMS((short) 1, "params"), C_PARAMS((short) 2, "cParams");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAMS
					return PARAMS;
				case 2: // C_PARAMS
					return C_PARAMS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("params",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TParamsModifyOrderAddress.class)));
			tmpMap.put(_Fields.C_PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData("cParams",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.CommonParams.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyOrderAddress_args.class, metaDataMap);
		}

		public modifyOrderAddress_args() {
		}

		public modifyOrderAddress_args(com.mia.order.tApi.TParamsModifyOrderAddress params,
				com.mia.order.tApi.CommonParams cParams) {
			this();
			this.params = params;
			this.cParams = cParams;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public modifyOrderAddress_args(modifyOrderAddress_args other) {
			if (other.isSetParams()) {
				this.params = new com.mia.order.tApi.TParamsModifyOrderAddress(other.params);
			}
			if (other.isSetCParams()) {
				this.cParams = new com.mia.order.tApi.CommonParams(other.cParams);
			}
		}

		public modifyOrderAddress_args deepCopy() {
			return new modifyOrderAddress_args(this);
		}

		@Override
		public void clear() {
			this.params = null;
			this.cParams = null;
		}

		public com.mia.order.tApi.TParamsModifyOrderAddress getParams() {
			return this.params;
		}

		public modifyOrderAddress_args setParams(com.mia.order.tApi.TParamsModifyOrderAddress params) {
			this.params = params;
			return this;
		}

		public void unsetParams() {
			this.params = null;
		}

		/**
		 * Returns true if field params is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParams() {
			return this.params != null;
		}

		public void setParamsIsSet(boolean value) {
			if (!value) {
				this.params = null;
			}
		}

		public com.mia.order.tApi.CommonParams getCParams() {
			return this.cParams;
		}

		public modifyOrderAddress_args setCParams(com.mia.order.tApi.CommonParams cParams) {
			this.cParams = cParams;
			return this;
		}

		public void unsetCParams() {
			this.cParams = null;
		}

		/**
		 * Returns true if field cParams is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetCParams() {
			return this.cParams != null;
		}

		public void setCParamsIsSet(boolean value) {
			if (!value) {
				this.cParams = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAMS:
				if (value == null) {
					unsetParams();
				} else {
					setParams((com.mia.order.tApi.TParamsModifyOrderAddress) value);
				}
				break;

			case C_PARAMS:
				if (value == null) {
					unsetCParams();
				} else {
					setCParams((com.mia.order.tApi.CommonParams) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAMS:
				return getParams();

			case C_PARAMS:
				return getCParams();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAMS:
				return isSetParams();
			case C_PARAMS:
				return isSetCParams();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof modifyOrderAddress_args)
				return this.equals((modifyOrderAddress_args) that);
			return false;
		}

		public boolean equals(modifyOrderAddress_args that) {
			if (that == null)
				return false;

			boolean this_present_params = true && this.isSetParams();
			boolean that_present_params = true && that.isSetParams();
			if (this_present_params || that_present_params) {
				if (!(this_present_params && that_present_params))
					return false;
				if (!this.params.equals(that.params))
					return false;
			}

			boolean this_present_cParams = true && this.isSetCParams();
			boolean that_present_cParams = true && that.isSetCParams();
			if (this_present_cParams || that_present_cParams) {
				if (!(this_present_cParams && that_present_cParams))
					return false;
				if (!this.cParams.equals(that.cParams))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_params = true && (isSetParams());
			list.add(present_params);
			if (present_params)
				list.add(params);

			boolean present_cParams = true && (isSetCParams());
			list.add(present_cParams);
			if (present_cParams)
				list.add(cParams);

			return list.hashCode();
		}

		@Override
		public int compareTo(modifyOrderAddress_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetCParams()).compareTo(other.isSetCParams());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCParams()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cParams, other.cParams);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("modifyOrderAddress_args(");
			boolean first = true;

			sb.append("params:");
			if (this.params == null) {
				sb.append("null");
			} else {
				sb.append(this.params);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("cParams:");
			if (this.cParams == null) {
				sb.append("null");
			} else {
				sb.append(this.cParams);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (params != null) {
				params.validate();
			}
			if (cParams != null) {
				cParams.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class modifyOrderAddress_argsStandardSchemeFactory implements SchemeFactory {
			public modifyOrderAddress_argsStandardScheme getScheme() {
				return new modifyOrderAddress_argsStandardScheme();
			}
		}

		private static class modifyOrderAddress_argsStandardScheme extends StandardScheme<modifyOrderAddress_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, modifyOrderAddress_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.params = new com.mia.order.tApi.TParamsModifyOrderAddress();
							struct.params.read(iprot);
							struct.setParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // C_PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.cParams = new com.mia.order.tApi.CommonParams();
							struct.cParams.read(iprot);
							struct.setCParamsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, modifyOrderAddress_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.params != null) {
					oprot.writeFieldBegin(PARAMS_FIELD_DESC);
					struct.params.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.cParams != null) {
					oprot.writeFieldBegin(C_PARAMS_FIELD_DESC);
					struct.cParams.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class modifyOrderAddress_argsTupleSchemeFactory implements SchemeFactory {
			public modifyOrderAddress_argsTupleScheme getScheme() {
				return new modifyOrderAddress_argsTupleScheme();
			}
		}

		private static class modifyOrderAddress_argsTupleScheme extends TupleScheme<modifyOrderAddress_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, modifyOrderAddress_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParams()) {
					optionals.set(0);
				}
				if (struct.isSetCParams()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetParams()) {
					struct.params.write(oprot);
				}
				if (struct.isSetCParams()) {
					struct.cParams.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, modifyOrderAddress_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.params = new com.mia.order.tApi.TParamsModifyOrderAddress();
					struct.params.read(iprot);
					struct.setParamsIsSet(true);
				}
				if (incoming.get(1)) {
					struct.cParams = new com.mia.order.tApi.CommonParams();
					struct.cParams.read(iprot);
					struct.setCParamsIsSet(true);
				}
			}
		}

	}

	public static class modifyOrderAddress_result
			implements org.apache.thrift.TBase<modifyOrderAddress_result, modifyOrderAddress_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<modifyOrderAddress_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"modifyOrderAddress_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new modifyOrderAddress_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new modifyOrderAddress_resultTupleSchemeFactory());
		}

		public com.mia.order.tApi.TCommonResultInfo success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.mia.order.tApi.TCommonResultInfo.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyOrderAddress_result.class,
					metaDataMap);
		}

		public modifyOrderAddress_result() {
		}

		public modifyOrderAddress_result(com.mia.order.tApi.TCommonResultInfo success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public modifyOrderAddress_result(modifyOrderAddress_result other) {
			if (other.isSetSuccess()) {
				this.success = new com.mia.order.tApi.TCommonResultInfo(other.success);
			}
		}

		public modifyOrderAddress_result deepCopy() {
			return new modifyOrderAddress_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public com.mia.order.tApi.TCommonResultInfo getSuccess() {
			return this.success;
		}

		public modifyOrderAddress_result setSuccess(com.mia.order.tApi.TCommonResultInfo success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((com.mia.order.tApi.TCommonResultInfo) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof modifyOrderAddress_result)
				return this.equals((modifyOrderAddress_result) that);
			return false;
		}

		public boolean equals(modifyOrderAddress_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		@Override
		public int compareTo(modifyOrderAddress_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("modifyOrderAddress_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class modifyOrderAddress_resultStandardSchemeFactory implements SchemeFactory {
			public modifyOrderAddress_resultStandardScheme getScheme() {
				return new modifyOrderAddress_resultStandardScheme();
			}
		}

		private static class modifyOrderAddress_resultStandardScheme extends StandardScheme<modifyOrderAddress_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, modifyOrderAddress_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new com.mia.order.tApi.TCommonResultInfo();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, modifyOrderAddress_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class modifyOrderAddress_resultTupleSchemeFactory implements SchemeFactory {
			public modifyOrderAddress_resultTupleScheme getScheme() {
				return new modifyOrderAddress_resultTupleScheme();
			}
		}

		private static class modifyOrderAddress_resultTupleScheme extends TupleScheme<modifyOrderAddress_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, modifyOrderAddress_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, modifyOrderAddress_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new com.mia.order.tApi.TCommonResultInfo();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
