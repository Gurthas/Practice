/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.OpenOrder;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-06")
public class TOpenOrders implements org.apache.thrift.TBase<TOpenOrders, TOpenOrders._Fields>, java.io.Serializable, Cloneable, Comparable<TOpenOrders> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOpenOrders");

  private static final org.apache.thrift.protocol.TField THIRD_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdOrderCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IS_USE_THIRD_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("isUseThirdOrderCode", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DST_PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("dstProvince", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DST_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("dstCity", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DST_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("dstArea", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DST_STREET_FIELD_DESC = new org.apache.thrift.protocol.TField("dstStreet", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DST_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("dstAddress", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField WAREHOUSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("warehouseId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField DST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DST_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("dstMobile", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField SUB_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("subChannel", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PAY_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("payMode", org.apache.thrift.protocol.TType.I16, (short)15);
  private static final org.apache.thrift.protocol.TField DST_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("dstMode", org.apache.thrift.protocol.TType.I16, (short)16);
  private static final org.apache.thrift.protocol.TField IS_MINUS_STOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("isMinusStock", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField TOTAL_TAX_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalTaxPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField TOTAL_PAY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPayPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField TOTAL_SHIP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalShipPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField REDUCE_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reducePriceType", org.apache.thrift.protocol.TType.I16, (short)21);
  private static final org.apache.thrift.protocol.TField TOTAL_REDUCE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalReducePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField IS_ZERO_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isZeroOrder", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionId", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField PAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("payTime", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField ORDER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTime", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField DST_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("dstCode", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField IS_LOCK_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isLockOrder", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField ORDER_ITEM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("orderItemList", org.apache.thrift.protocol.TType.LIST, (short)29);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TOpenOrdersStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TOpenOrdersTupleSchemeFactory());
  }

  public String thirdOrderCode; // required
  public boolean isUseThirdOrderCode; // required
  public int userId; // required
  public String dstProvince; // required
  public String dstCity; // required
  public String dstArea; // required
  public String dstStreet; // required
  public String dstAddress; // required
  public int warehouseId; // required
  public String dstName; // required
  public String dstMobile; // required
  public short channel; // required
  public String subChannel; // required
  public String ip; // required
  public short payMode; // required
  public short dstMode; // required
  public boolean isMinusStock; // required
  public double totalTaxPrice; // required
  public double totalPayPrice; // required
  public double totalShipPrice; // required
  public short reducePriceType; // required
  public double totalReducePrice; // required
  public boolean isZeroOrder; // required
  public String transactionId; // required
  public String payTime; // required
  public String orderTime; // required
  public String dstCode; // required
  public boolean isLockOrder; // required
  public List<TOpenOrderItem> orderItemList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    THIRD_ORDER_CODE((short)1, "thirdOrderCode"),
    IS_USE_THIRD_ORDER_CODE((short)2, "isUseThirdOrderCode"),
    USER_ID((short)3, "userId"),
    DST_PROVINCE((short)4, "dstProvince"),
    DST_CITY((short)5, "dstCity"),
    DST_AREA((short)6, "dstArea"),
    DST_STREET((short)7, "dstStreet"),
    DST_ADDRESS((short)8, "dstAddress"),
    WAREHOUSE_ID((short)9, "warehouseId"),
    DST_NAME((short)10, "dstName"),
    DST_MOBILE((short)11, "dstMobile"),
    CHANNEL((short)12, "channel"),
    SUB_CHANNEL((short)13, "subChannel"),
    IP((short)14, "ip"),
    PAY_MODE((short)15, "payMode"),
    DST_MODE((short)16, "dstMode"),
    IS_MINUS_STOCK((short)17, "isMinusStock"),
    TOTAL_TAX_PRICE((short)18, "totalTaxPrice"),
    TOTAL_PAY_PRICE((short)19, "totalPayPrice"),
    TOTAL_SHIP_PRICE((short)20, "totalShipPrice"),
    REDUCE_PRICE_TYPE((short)21, "reducePriceType"),
    TOTAL_REDUCE_PRICE((short)22, "totalReducePrice"),
    IS_ZERO_ORDER((short)23, "isZeroOrder"),
    TRANSACTION_ID((short)24, "transactionId"),
    PAY_TIME((short)25, "payTime"),
    ORDER_TIME((short)26, "orderTime"),
    DST_CODE((short)27, "dstCode"),
    IS_LOCK_ORDER((short)28, "isLockOrder"),
    ORDER_ITEM_LIST((short)29, "orderItemList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // THIRD_ORDER_CODE
          return THIRD_ORDER_CODE;
        case 2: // IS_USE_THIRD_ORDER_CODE
          return IS_USE_THIRD_ORDER_CODE;
        case 3: // USER_ID
          return USER_ID;
        case 4: // DST_PROVINCE
          return DST_PROVINCE;
        case 5: // DST_CITY
          return DST_CITY;
        case 6: // DST_AREA
          return DST_AREA;
        case 7: // DST_STREET
          return DST_STREET;
        case 8: // DST_ADDRESS
          return DST_ADDRESS;
        case 9: // WAREHOUSE_ID
          return WAREHOUSE_ID;
        case 10: // DST_NAME
          return DST_NAME;
        case 11: // DST_MOBILE
          return DST_MOBILE;
        case 12: // CHANNEL
          return CHANNEL;
        case 13: // SUB_CHANNEL
          return SUB_CHANNEL;
        case 14: // IP
          return IP;
        case 15: // PAY_MODE
          return PAY_MODE;
        case 16: // DST_MODE
          return DST_MODE;
        case 17: // IS_MINUS_STOCK
          return IS_MINUS_STOCK;
        case 18: // TOTAL_TAX_PRICE
          return TOTAL_TAX_PRICE;
        case 19: // TOTAL_PAY_PRICE
          return TOTAL_PAY_PRICE;
        case 20: // TOTAL_SHIP_PRICE
          return TOTAL_SHIP_PRICE;
        case 21: // REDUCE_PRICE_TYPE
          return REDUCE_PRICE_TYPE;
        case 22: // TOTAL_REDUCE_PRICE
          return TOTAL_REDUCE_PRICE;
        case 23: // IS_ZERO_ORDER
          return IS_ZERO_ORDER;
        case 24: // TRANSACTION_ID
          return TRANSACTION_ID;
        case 25: // PAY_TIME
          return PAY_TIME;
        case 26: // ORDER_TIME
          return ORDER_TIME;
        case 27: // DST_CODE
          return DST_CODE;
        case 28: // IS_LOCK_ORDER
          return IS_LOCK_ORDER;
        case 29: // ORDER_ITEM_LIST
          return ORDER_ITEM_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISUSETHIRDORDERCODE_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __WAREHOUSEID_ISSET_ID = 2;
  private static final int __CHANNEL_ISSET_ID = 3;
  private static final int __PAYMODE_ISSET_ID = 4;
  private static final int __DSTMODE_ISSET_ID = 5;
  private static final int __ISMINUSSTOCK_ISSET_ID = 6;
  private static final int __TOTALTAXPRICE_ISSET_ID = 7;
  private static final int __TOTALPAYPRICE_ISSET_ID = 8;
  private static final int __TOTALSHIPPRICE_ISSET_ID = 9;
  private static final int __REDUCEPRICETYPE_ISSET_ID = 10;
  private static final int __TOTALREDUCEPRICE_ISSET_ID = 11;
  private static final int __ISZEROORDER_ISSET_ID = 12;
  private static final int __ISLOCKORDER_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.THIRD_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("thirdOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_USE_THIRD_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("isUseThirdOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DST_PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("dstProvince", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DST_CITY, new org.apache.thrift.meta_data.FieldMetaData("dstCity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DST_AREA, new org.apache.thrift.meta_data.FieldMetaData("dstArea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DST_STREET, new org.apache.thrift.meta_data.FieldMetaData("dstStreet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DST_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("dstAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WAREHOUSE_ID, new org.apache.thrift.meta_data.FieldMetaData("warehouseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DST_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DST_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("dstMobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SUB_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("subChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_MODE, new org.apache.thrift.meta_data.FieldMetaData("payMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DST_MODE, new org.apache.thrift.meta_data.FieldMetaData("dstMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.IS_MINUS_STOCK, new org.apache.thrift.meta_data.FieldMetaData("isMinusStock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOTAL_TAX_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalTaxPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_PAY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPayPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_SHIP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalShipPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REDUCE_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reducePriceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TOTAL_REDUCE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalReducePrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_ZERO_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isZeroOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transactionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TIME, new org.apache.thrift.meta_data.FieldMetaData("payTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TIME, new org.apache.thrift.meta_data.FieldMetaData("orderTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DST_CODE, new org.apache.thrift.meta_data.FieldMetaData("dstCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_LOCK_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isLockOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORDER_ITEM_LIST, new org.apache.thrift.meta_data.FieldMetaData("orderItemList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOpenOrderItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOpenOrders.class, metaDataMap);
  }

  public TOpenOrders() {
  }

  public TOpenOrders(
    String thirdOrderCode,
    boolean isUseThirdOrderCode,
    int userId,
    String dstProvince,
    String dstCity,
    String dstArea,
    String dstStreet,
    String dstAddress,
    int warehouseId,
    String dstName,
    String dstMobile,
    short channel,
    String subChannel,
    String ip,
    short payMode,
    short dstMode,
    boolean isMinusStock,
    double totalTaxPrice,
    double totalPayPrice,
    double totalShipPrice,
    short reducePriceType,
    double totalReducePrice,
    boolean isZeroOrder,
    String transactionId,
    String payTime,
    String orderTime,
    String dstCode,
    boolean isLockOrder,
    List<TOpenOrderItem> orderItemList)
  {
    this();
    this.thirdOrderCode = thirdOrderCode;
    this.isUseThirdOrderCode = isUseThirdOrderCode;
    setIsUseThirdOrderCodeIsSet(true);
    this.userId = userId;
    setUserIdIsSet(true);
    this.dstProvince = dstProvince;
    this.dstCity = dstCity;
    this.dstArea = dstArea;
    this.dstStreet = dstStreet;
    this.dstAddress = dstAddress;
    this.warehouseId = warehouseId;
    setWarehouseIdIsSet(true);
    this.dstName = dstName;
    this.dstMobile = dstMobile;
    this.channel = channel;
    setChannelIsSet(true);
    this.subChannel = subChannel;
    this.ip = ip;
    this.payMode = payMode;
    setPayModeIsSet(true);
    this.dstMode = dstMode;
    setDstModeIsSet(true);
    this.isMinusStock = isMinusStock;
    setIsMinusStockIsSet(true);
    this.totalTaxPrice = totalTaxPrice;
    setTotalTaxPriceIsSet(true);
    this.totalPayPrice = totalPayPrice;
    setTotalPayPriceIsSet(true);
    this.totalShipPrice = totalShipPrice;
    setTotalShipPriceIsSet(true);
    this.reducePriceType = reducePriceType;
    setReducePriceTypeIsSet(true);
    this.totalReducePrice = totalReducePrice;
    setTotalReducePriceIsSet(true);
    this.isZeroOrder = isZeroOrder;
    setIsZeroOrderIsSet(true);
    this.transactionId = transactionId;
    this.payTime = payTime;
    this.orderTime = orderTime;
    this.dstCode = dstCode;
    this.isLockOrder = isLockOrder;
    setIsLockOrderIsSet(true);
    this.orderItemList = orderItemList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOpenOrders(TOpenOrders other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetThirdOrderCode()) {
      this.thirdOrderCode = other.thirdOrderCode;
    }
    this.isUseThirdOrderCode = other.isUseThirdOrderCode;
    this.userId = other.userId;
    if (other.isSetDstProvince()) {
      this.dstProvince = other.dstProvince;
    }
    if (other.isSetDstCity()) {
      this.dstCity = other.dstCity;
    }
    if (other.isSetDstArea()) {
      this.dstArea = other.dstArea;
    }
    if (other.isSetDstStreet()) {
      this.dstStreet = other.dstStreet;
    }
    if (other.isSetDstAddress()) {
      this.dstAddress = other.dstAddress;
    }
    this.warehouseId = other.warehouseId;
    if (other.isSetDstName()) {
      this.dstName = other.dstName;
    }
    if (other.isSetDstMobile()) {
      this.dstMobile = other.dstMobile;
    }
    this.channel = other.channel;
    if (other.isSetSubChannel()) {
      this.subChannel = other.subChannel;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.payMode = other.payMode;
    this.dstMode = other.dstMode;
    this.isMinusStock = other.isMinusStock;
    this.totalTaxPrice = other.totalTaxPrice;
    this.totalPayPrice = other.totalPayPrice;
    this.totalShipPrice = other.totalShipPrice;
    this.reducePriceType = other.reducePriceType;
    this.totalReducePrice = other.totalReducePrice;
    this.isZeroOrder = other.isZeroOrder;
    if (other.isSetTransactionId()) {
      this.transactionId = other.transactionId;
    }
    if (other.isSetPayTime()) {
      this.payTime = other.payTime;
    }
    if (other.isSetOrderTime()) {
      this.orderTime = other.orderTime;
    }
    if (other.isSetDstCode()) {
      this.dstCode = other.dstCode;
    }
    this.isLockOrder = other.isLockOrder;
    if (other.isSetOrderItemList()) {
      List<TOpenOrderItem> __this__orderItemList = new ArrayList<TOpenOrderItem>(other.orderItemList.size());
      for (TOpenOrderItem other_element : other.orderItemList) {
        __this__orderItemList.add(new TOpenOrderItem(other_element));
      }
      this.orderItemList = __this__orderItemList;
    }
  }

  public TOpenOrders deepCopy() {
    return new TOpenOrders(this);
  }

  @Override
  public void clear() {
    this.thirdOrderCode = null;
    setIsUseThirdOrderCodeIsSet(false);
    this.isUseThirdOrderCode = false;
    setUserIdIsSet(false);
    this.userId = 0;
    this.dstProvince = null;
    this.dstCity = null;
    this.dstArea = null;
    this.dstStreet = null;
    this.dstAddress = null;
    setWarehouseIdIsSet(false);
    this.warehouseId = 0;
    this.dstName = null;
    this.dstMobile = null;
    setChannelIsSet(false);
    this.channel = 0;
    this.subChannel = null;
    this.ip = null;
    setPayModeIsSet(false);
    this.payMode = 0;
    setDstModeIsSet(false);
    this.dstMode = 0;
    setIsMinusStockIsSet(false);
    this.isMinusStock = false;
    setTotalTaxPriceIsSet(false);
    this.totalTaxPrice = 0.0;
    setTotalPayPriceIsSet(false);
    this.totalPayPrice = 0.0;
    setTotalShipPriceIsSet(false);
    this.totalShipPrice = 0.0;
    setReducePriceTypeIsSet(false);
    this.reducePriceType = 0;
    setTotalReducePriceIsSet(false);
    this.totalReducePrice = 0.0;
    setIsZeroOrderIsSet(false);
    this.isZeroOrder = false;
    this.transactionId = null;
    this.payTime = null;
    this.orderTime = null;
    this.dstCode = null;
    setIsLockOrderIsSet(false);
    this.isLockOrder = false;
    this.orderItemList = null;
  }

  public String getThirdOrderCode() {
    return this.thirdOrderCode;
  }

  public TOpenOrders setThirdOrderCode(String thirdOrderCode) {
    this.thirdOrderCode = thirdOrderCode;
    return this;
  }

  public void unsetThirdOrderCode() {
    this.thirdOrderCode = null;
  }

  /** Returns true if field thirdOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdOrderCode() {
    return this.thirdOrderCode != null;
  }

  public void setThirdOrderCodeIsSet(boolean value) {
    if (!value) {
      this.thirdOrderCode = null;
    }
  }

  public boolean isIsUseThirdOrderCode() {
    return this.isUseThirdOrderCode;
  }

  public TOpenOrders setIsUseThirdOrderCode(boolean isUseThirdOrderCode) {
    this.isUseThirdOrderCode = isUseThirdOrderCode;
    setIsUseThirdOrderCodeIsSet(true);
    return this;
  }

  public void unsetIsUseThirdOrderCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISUSETHIRDORDERCODE_ISSET_ID);
  }

  /** Returns true if field isUseThirdOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetIsUseThirdOrderCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ISUSETHIRDORDERCODE_ISSET_ID);
  }

  public void setIsUseThirdOrderCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISUSETHIRDORDERCODE_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public TOpenOrders setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getDstProvince() {
    return this.dstProvince;
  }

  public TOpenOrders setDstProvince(String dstProvince) {
    this.dstProvince = dstProvince;
    return this;
  }

  public void unsetDstProvince() {
    this.dstProvince = null;
  }

  /** Returns true if field dstProvince is set (has been assigned a value) and false otherwise */
  public boolean isSetDstProvince() {
    return this.dstProvince != null;
  }

  public void setDstProvinceIsSet(boolean value) {
    if (!value) {
      this.dstProvince = null;
    }
  }

  public String getDstCity() {
    return this.dstCity;
  }

  public TOpenOrders setDstCity(String dstCity) {
    this.dstCity = dstCity;
    return this;
  }

  public void unsetDstCity() {
    this.dstCity = null;
  }

  /** Returns true if field dstCity is set (has been assigned a value) and false otherwise */
  public boolean isSetDstCity() {
    return this.dstCity != null;
  }

  public void setDstCityIsSet(boolean value) {
    if (!value) {
      this.dstCity = null;
    }
  }

  public String getDstArea() {
    return this.dstArea;
  }

  public TOpenOrders setDstArea(String dstArea) {
    this.dstArea = dstArea;
    return this;
  }

  public void unsetDstArea() {
    this.dstArea = null;
  }

  /** Returns true if field dstArea is set (has been assigned a value) and false otherwise */
  public boolean isSetDstArea() {
    return this.dstArea != null;
  }

  public void setDstAreaIsSet(boolean value) {
    if (!value) {
      this.dstArea = null;
    }
  }

  public String getDstStreet() {
    return this.dstStreet;
  }

  public TOpenOrders setDstStreet(String dstStreet) {
    this.dstStreet = dstStreet;
    return this;
  }

  public void unsetDstStreet() {
    this.dstStreet = null;
  }

  /** Returns true if field dstStreet is set (has been assigned a value) and false otherwise */
  public boolean isSetDstStreet() {
    return this.dstStreet != null;
  }

  public void setDstStreetIsSet(boolean value) {
    if (!value) {
      this.dstStreet = null;
    }
  }

  public String getDstAddress() {
    return this.dstAddress;
  }

  public TOpenOrders setDstAddress(String dstAddress) {
    this.dstAddress = dstAddress;
    return this;
  }

  public void unsetDstAddress() {
    this.dstAddress = null;
  }

  /** Returns true if field dstAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetDstAddress() {
    return this.dstAddress != null;
  }

  public void setDstAddressIsSet(boolean value) {
    if (!value) {
      this.dstAddress = null;
    }
  }

  public int getWarehouseId() {
    return this.warehouseId;
  }

  public TOpenOrders setWarehouseId(int warehouseId) {
    this.warehouseId = warehouseId;
    setWarehouseIdIsSet(true);
    return this;
  }

  public void unsetWarehouseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAREHOUSEID_ISSET_ID);
  }

  /** Returns true if field warehouseId is set (has been assigned a value) and false otherwise */
  public boolean isSetWarehouseId() {
    return EncodingUtils.testBit(__isset_bitfield, __WAREHOUSEID_ISSET_ID);
  }

  public void setWarehouseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAREHOUSEID_ISSET_ID, value);
  }

  public String getDstName() {
    return this.dstName;
  }

  public TOpenOrders setDstName(String dstName) {
    this.dstName = dstName;
    return this;
  }

  public void unsetDstName() {
    this.dstName = null;
  }

  /** Returns true if field dstName is set (has been assigned a value) and false otherwise */
  public boolean isSetDstName() {
    return this.dstName != null;
  }

  public void setDstNameIsSet(boolean value) {
    if (!value) {
      this.dstName = null;
    }
  }

  public String getDstMobile() {
    return this.dstMobile;
  }

  public TOpenOrders setDstMobile(String dstMobile) {
    this.dstMobile = dstMobile;
    return this;
  }

  public void unsetDstMobile() {
    this.dstMobile = null;
  }

  /** Returns true if field dstMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetDstMobile() {
    return this.dstMobile != null;
  }

  public void setDstMobileIsSet(boolean value) {
    if (!value) {
      this.dstMobile = null;
    }
  }

  public short getChannel() {
    return this.channel;
  }

  public TOpenOrders setChannel(short channel) {
    this.channel = channel;
    setChannelIsSet(true);
    return this;
  }

  public void unsetChannel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return EncodingUtils.testBit(__isset_bitfield, __CHANNEL_ISSET_ID);
  }

  public void setChannelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNEL_ISSET_ID, value);
  }

  public String getSubChannel() {
    return this.subChannel;
  }

  public TOpenOrders setSubChannel(String subChannel) {
    this.subChannel = subChannel;
    return this;
  }

  public void unsetSubChannel() {
    this.subChannel = null;
  }

  /** Returns true if field subChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetSubChannel() {
    return this.subChannel != null;
  }

  public void setSubChannelIsSet(boolean value) {
    if (!value) {
      this.subChannel = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public TOpenOrders setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public short getPayMode() {
    return this.payMode;
  }

  public TOpenOrders setPayMode(short payMode) {
    this.payMode = payMode;
    setPayModeIsSet(true);
    return this;
  }

  public void unsetPayMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMODE_ISSET_ID);
  }

  /** Returns true if field payMode is set (has been assigned a value) and false otherwise */
  public boolean isSetPayMode() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMODE_ISSET_ID);
  }

  public void setPayModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMODE_ISSET_ID, value);
  }

  public short getDstMode() {
    return this.dstMode;
  }

  public TOpenOrders setDstMode(short dstMode) {
    this.dstMode = dstMode;
    setDstModeIsSet(true);
    return this;
  }

  public void unsetDstMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSTMODE_ISSET_ID);
  }

  /** Returns true if field dstMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDstMode() {
    return EncodingUtils.testBit(__isset_bitfield, __DSTMODE_ISSET_ID);
  }

  public void setDstModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSTMODE_ISSET_ID, value);
  }

  public boolean isIsMinusStock() {
    return this.isMinusStock;
  }

  public TOpenOrders setIsMinusStock(boolean isMinusStock) {
    this.isMinusStock = isMinusStock;
    setIsMinusStockIsSet(true);
    return this;
  }

  public void unsetIsMinusStock() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMINUSSTOCK_ISSET_ID);
  }

  /** Returns true if field isMinusStock is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMinusStock() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMINUSSTOCK_ISSET_ID);
  }

  public void setIsMinusStockIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMINUSSTOCK_ISSET_ID, value);
  }

  public double getTotalTaxPrice() {
    return this.totalTaxPrice;
  }

  public TOpenOrders setTotalTaxPrice(double totalTaxPrice) {
    this.totalTaxPrice = totalTaxPrice;
    setTotalTaxPriceIsSet(true);
    return this;
  }

  public void unsetTotalTaxPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALTAXPRICE_ISSET_ID);
  }

  /** Returns true if field totalTaxPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalTaxPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALTAXPRICE_ISSET_ID);
  }

  public void setTotalTaxPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALTAXPRICE_ISSET_ID, value);
  }

  public double getTotalPayPrice() {
    return this.totalPayPrice;
  }

  public TOpenOrders setTotalPayPrice(double totalPayPrice) {
    this.totalPayPrice = totalPayPrice;
    setTotalPayPriceIsSet(true);
    return this;
  }

  public void unsetTotalPayPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPAYPRICE_ISSET_ID);
  }

  /** Returns true if field totalPayPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPayPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPAYPRICE_ISSET_ID);
  }

  public void setTotalPayPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPAYPRICE_ISSET_ID, value);
  }

  public double getTotalShipPrice() {
    return this.totalShipPrice;
  }

  public TOpenOrders setTotalShipPrice(double totalShipPrice) {
    this.totalShipPrice = totalShipPrice;
    setTotalShipPriceIsSet(true);
    return this;
  }

  public void unsetTotalShipPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSHIPPRICE_ISSET_ID);
  }

  /** Returns true if field totalShipPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalShipPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSHIPPRICE_ISSET_ID);
  }

  public void setTotalShipPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSHIPPRICE_ISSET_ID, value);
  }

  public short getReducePriceType() {
    return this.reducePriceType;
  }

  public TOpenOrders setReducePriceType(short reducePriceType) {
    this.reducePriceType = reducePriceType;
    setReducePriceTypeIsSet(true);
    return this;
  }

  public void unsetReducePriceType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDUCEPRICETYPE_ISSET_ID);
  }

  /** Returns true if field reducePriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetReducePriceType() {
    return EncodingUtils.testBit(__isset_bitfield, __REDUCEPRICETYPE_ISSET_ID);
  }

  public void setReducePriceTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDUCEPRICETYPE_ISSET_ID, value);
  }

  public double getTotalReducePrice() {
    return this.totalReducePrice;
  }

  public TOpenOrders setTotalReducePrice(double totalReducePrice) {
    this.totalReducePrice = totalReducePrice;
    setTotalReducePriceIsSet(true);
    return this;
  }

  public void unsetTotalReducePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALREDUCEPRICE_ISSET_ID);
  }

  /** Returns true if field totalReducePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalReducePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALREDUCEPRICE_ISSET_ID);
  }

  public void setTotalReducePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALREDUCEPRICE_ISSET_ID, value);
  }

  public boolean isIsZeroOrder() {
    return this.isZeroOrder;
  }

  public TOpenOrders setIsZeroOrder(boolean isZeroOrder) {
    this.isZeroOrder = isZeroOrder;
    setIsZeroOrderIsSet(true);
    return this;
  }

  public void unsetIsZeroOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISZEROORDER_ISSET_ID);
  }

  /** Returns true if field isZeroOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsZeroOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISZEROORDER_ISSET_ID);
  }

  public void setIsZeroOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISZEROORDER_ISSET_ID, value);
  }

  public String getTransactionId() {
    return this.transactionId;
  }

  public TOpenOrders setTransactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  public void unsetTransactionId() {
    this.transactionId = null;
  }

  /** Returns true if field transactionId is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionId() {
    return this.transactionId != null;
  }

  public void setTransactionIdIsSet(boolean value) {
    if (!value) {
      this.transactionId = null;
    }
  }

  public String getPayTime() {
    return this.payTime;
  }

  public TOpenOrders setPayTime(String payTime) {
    this.payTime = payTime;
    return this;
  }

  public void unsetPayTime() {
    this.payTime = null;
  }

  /** Returns true if field payTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPayTime() {
    return this.payTime != null;
  }

  public void setPayTimeIsSet(boolean value) {
    if (!value) {
      this.payTime = null;
    }
  }

  public String getOrderTime() {
    return this.orderTime;
  }

  public TOpenOrders setOrderTime(String orderTime) {
    this.orderTime = orderTime;
    return this;
  }

  public void unsetOrderTime() {
    this.orderTime = null;
  }

  /** Returns true if field orderTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTime() {
    return this.orderTime != null;
  }

  public void setOrderTimeIsSet(boolean value) {
    if (!value) {
      this.orderTime = null;
    }
  }

  public String getDstCode() {
    return this.dstCode;
  }

  public TOpenOrders setDstCode(String dstCode) {
    this.dstCode = dstCode;
    return this;
  }

  public void unsetDstCode() {
    this.dstCode = null;
  }

  /** Returns true if field dstCode is set (has been assigned a value) and false otherwise */
  public boolean isSetDstCode() {
    return this.dstCode != null;
  }

  public void setDstCodeIsSet(boolean value) {
    if (!value) {
      this.dstCode = null;
    }
  }

  public boolean isIsLockOrder() {
    return this.isLockOrder;
  }

  public TOpenOrders setIsLockOrder(boolean isLockOrder) {
    this.isLockOrder = isLockOrder;
    setIsLockOrderIsSet(true);
    return this;
  }

  public void unsetIsLockOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLOCKORDER_ISSET_ID);
  }

  /** Returns true if field isLockOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLockOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLOCKORDER_ISSET_ID);
  }

  public void setIsLockOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLOCKORDER_ISSET_ID, value);
  }

  public int getOrderItemListSize() {
    return (this.orderItemList == null) ? 0 : this.orderItemList.size();
  }

  public java.util.Iterator<TOpenOrderItem> getOrderItemListIterator() {
    return (this.orderItemList == null) ? null : this.orderItemList.iterator();
  }

  public void addToOrderItemList(TOpenOrderItem elem) {
    if (this.orderItemList == null) {
      this.orderItemList = new ArrayList<TOpenOrderItem>();
    }
    this.orderItemList.add(elem);
  }

  public List<TOpenOrderItem> getOrderItemList() {
    return this.orderItemList;
  }

  public TOpenOrders setOrderItemList(List<TOpenOrderItem> orderItemList) {
    this.orderItemList = orderItemList;
    return this;
  }

  public void unsetOrderItemList() {
    this.orderItemList = null;
  }

  /** Returns true if field orderItemList is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderItemList() {
    return this.orderItemList != null;
  }

  public void setOrderItemListIsSet(boolean value) {
    if (!value) {
      this.orderItemList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case THIRD_ORDER_CODE:
      if (value == null) {
        unsetThirdOrderCode();
      } else {
        setThirdOrderCode((String)value);
      }
      break;

    case IS_USE_THIRD_ORDER_CODE:
      if (value == null) {
        unsetIsUseThirdOrderCode();
      } else {
        setIsUseThirdOrderCode((Boolean)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case DST_PROVINCE:
      if (value == null) {
        unsetDstProvince();
      } else {
        setDstProvince((String)value);
      }
      break;

    case DST_CITY:
      if (value == null) {
        unsetDstCity();
      } else {
        setDstCity((String)value);
      }
      break;

    case DST_AREA:
      if (value == null) {
        unsetDstArea();
      } else {
        setDstArea((String)value);
      }
      break;

    case DST_STREET:
      if (value == null) {
        unsetDstStreet();
      } else {
        setDstStreet((String)value);
      }
      break;

    case DST_ADDRESS:
      if (value == null) {
        unsetDstAddress();
      } else {
        setDstAddress((String)value);
      }
      break;

    case WAREHOUSE_ID:
      if (value == null) {
        unsetWarehouseId();
      } else {
        setWarehouseId((Integer)value);
      }
      break;

    case DST_NAME:
      if (value == null) {
        unsetDstName();
      } else {
        setDstName((String)value);
      }
      break;

    case DST_MOBILE:
      if (value == null) {
        unsetDstMobile();
      } else {
        setDstMobile((String)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((Short)value);
      }
      break;

    case SUB_CHANNEL:
      if (value == null) {
        unsetSubChannel();
      } else {
        setSubChannel((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case PAY_MODE:
      if (value == null) {
        unsetPayMode();
      } else {
        setPayMode((Short)value);
      }
      break;

    case DST_MODE:
      if (value == null) {
        unsetDstMode();
      } else {
        setDstMode((Short)value);
      }
      break;

    case IS_MINUS_STOCK:
      if (value == null) {
        unsetIsMinusStock();
      } else {
        setIsMinusStock((Boolean)value);
      }
      break;

    case TOTAL_TAX_PRICE:
      if (value == null) {
        unsetTotalTaxPrice();
      } else {
        setTotalTaxPrice((Double)value);
      }
      break;

    case TOTAL_PAY_PRICE:
      if (value == null) {
        unsetTotalPayPrice();
      } else {
        setTotalPayPrice((Double)value);
      }
      break;

    case TOTAL_SHIP_PRICE:
      if (value == null) {
        unsetTotalShipPrice();
      } else {
        setTotalShipPrice((Double)value);
      }
      break;

    case REDUCE_PRICE_TYPE:
      if (value == null) {
        unsetReducePriceType();
      } else {
        setReducePriceType((Short)value);
      }
      break;

    case TOTAL_REDUCE_PRICE:
      if (value == null) {
        unsetTotalReducePrice();
      } else {
        setTotalReducePrice((Double)value);
      }
      break;

    case IS_ZERO_ORDER:
      if (value == null) {
        unsetIsZeroOrder();
      } else {
        setIsZeroOrder((Boolean)value);
      }
      break;

    case TRANSACTION_ID:
      if (value == null) {
        unsetTransactionId();
      } else {
        setTransactionId((String)value);
      }
      break;

    case PAY_TIME:
      if (value == null) {
        unsetPayTime();
      } else {
        setPayTime((String)value);
      }
      break;

    case ORDER_TIME:
      if (value == null) {
        unsetOrderTime();
      } else {
        setOrderTime((String)value);
      }
      break;

    case DST_CODE:
      if (value == null) {
        unsetDstCode();
      } else {
        setDstCode((String)value);
      }
      break;

    case IS_LOCK_ORDER:
      if (value == null) {
        unsetIsLockOrder();
      } else {
        setIsLockOrder((Boolean)value);
      }
      break;

    case ORDER_ITEM_LIST:
      if (value == null) {
        unsetOrderItemList();
      } else {
        setOrderItemList((List<TOpenOrderItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case THIRD_ORDER_CODE:
      return getThirdOrderCode();

    case IS_USE_THIRD_ORDER_CODE:
      return isIsUseThirdOrderCode();

    case USER_ID:
      return getUserId();

    case DST_PROVINCE:
      return getDstProvince();

    case DST_CITY:
      return getDstCity();

    case DST_AREA:
      return getDstArea();

    case DST_STREET:
      return getDstStreet();

    case DST_ADDRESS:
      return getDstAddress();

    case WAREHOUSE_ID:
      return getWarehouseId();

    case DST_NAME:
      return getDstName();

    case DST_MOBILE:
      return getDstMobile();

    case CHANNEL:
      return getChannel();

    case SUB_CHANNEL:
      return getSubChannel();

    case IP:
      return getIp();

    case PAY_MODE:
      return getPayMode();

    case DST_MODE:
      return getDstMode();

    case IS_MINUS_STOCK:
      return isIsMinusStock();

    case TOTAL_TAX_PRICE:
      return getTotalTaxPrice();

    case TOTAL_PAY_PRICE:
      return getTotalPayPrice();

    case TOTAL_SHIP_PRICE:
      return getTotalShipPrice();

    case REDUCE_PRICE_TYPE:
      return getReducePriceType();

    case TOTAL_REDUCE_PRICE:
      return getTotalReducePrice();

    case IS_ZERO_ORDER:
      return isIsZeroOrder();

    case TRANSACTION_ID:
      return getTransactionId();

    case PAY_TIME:
      return getPayTime();

    case ORDER_TIME:
      return getOrderTime();

    case DST_CODE:
      return getDstCode();

    case IS_LOCK_ORDER:
      return isIsLockOrder();

    case ORDER_ITEM_LIST:
      return getOrderItemList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case THIRD_ORDER_CODE:
      return isSetThirdOrderCode();
    case IS_USE_THIRD_ORDER_CODE:
      return isSetIsUseThirdOrderCode();
    case USER_ID:
      return isSetUserId();
    case DST_PROVINCE:
      return isSetDstProvince();
    case DST_CITY:
      return isSetDstCity();
    case DST_AREA:
      return isSetDstArea();
    case DST_STREET:
      return isSetDstStreet();
    case DST_ADDRESS:
      return isSetDstAddress();
    case WAREHOUSE_ID:
      return isSetWarehouseId();
    case DST_NAME:
      return isSetDstName();
    case DST_MOBILE:
      return isSetDstMobile();
    case CHANNEL:
      return isSetChannel();
    case SUB_CHANNEL:
      return isSetSubChannel();
    case IP:
      return isSetIp();
    case PAY_MODE:
      return isSetPayMode();
    case DST_MODE:
      return isSetDstMode();
    case IS_MINUS_STOCK:
      return isSetIsMinusStock();
    case TOTAL_TAX_PRICE:
      return isSetTotalTaxPrice();
    case TOTAL_PAY_PRICE:
      return isSetTotalPayPrice();
    case TOTAL_SHIP_PRICE:
      return isSetTotalShipPrice();
    case REDUCE_PRICE_TYPE:
      return isSetReducePriceType();
    case TOTAL_REDUCE_PRICE:
      return isSetTotalReducePrice();
    case IS_ZERO_ORDER:
      return isSetIsZeroOrder();
    case TRANSACTION_ID:
      return isSetTransactionId();
    case PAY_TIME:
      return isSetPayTime();
    case ORDER_TIME:
      return isSetOrderTime();
    case DST_CODE:
      return isSetDstCode();
    case IS_LOCK_ORDER:
      return isSetIsLockOrder();
    case ORDER_ITEM_LIST:
      return isSetOrderItemList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TOpenOrders)
      return this.equals((TOpenOrders)that);
    return false;
  }

  public boolean equals(TOpenOrders that) {
    if (that == null)
      return false;

    boolean this_present_thirdOrderCode = true && this.isSetThirdOrderCode();
    boolean that_present_thirdOrderCode = true && that.isSetThirdOrderCode();
    if (this_present_thirdOrderCode || that_present_thirdOrderCode) {
      if (!(this_present_thirdOrderCode && that_present_thirdOrderCode))
        return false;
      if (!this.thirdOrderCode.equals(that.thirdOrderCode))
        return false;
    }

    boolean this_present_isUseThirdOrderCode = true;
    boolean that_present_isUseThirdOrderCode = true;
    if (this_present_isUseThirdOrderCode || that_present_isUseThirdOrderCode) {
      if (!(this_present_isUseThirdOrderCode && that_present_isUseThirdOrderCode))
        return false;
      if (this.isUseThirdOrderCode != that.isUseThirdOrderCode)
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_dstProvince = true && this.isSetDstProvince();
    boolean that_present_dstProvince = true && that.isSetDstProvince();
    if (this_present_dstProvince || that_present_dstProvince) {
      if (!(this_present_dstProvince && that_present_dstProvince))
        return false;
      if (!this.dstProvince.equals(that.dstProvince))
        return false;
    }

    boolean this_present_dstCity = true && this.isSetDstCity();
    boolean that_present_dstCity = true && that.isSetDstCity();
    if (this_present_dstCity || that_present_dstCity) {
      if (!(this_present_dstCity && that_present_dstCity))
        return false;
      if (!this.dstCity.equals(that.dstCity))
        return false;
    }

    boolean this_present_dstArea = true && this.isSetDstArea();
    boolean that_present_dstArea = true && that.isSetDstArea();
    if (this_present_dstArea || that_present_dstArea) {
      if (!(this_present_dstArea && that_present_dstArea))
        return false;
      if (!this.dstArea.equals(that.dstArea))
        return false;
    }

    boolean this_present_dstStreet = true && this.isSetDstStreet();
    boolean that_present_dstStreet = true && that.isSetDstStreet();
    if (this_present_dstStreet || that_present_dstStreet) {
      if (!(this_present_dstStreet && that_present_dstStreet))
        return false;
      if (!this.dstStreet.equals(that.dstStreet))
        return false;
    }

    boolean this_present_dstAddress = true && this.isSetDstAddress();
    boolean that_present_dstAddress = true && that.isSetDstAddress();
    if (this_present_dstAddress || that_present_dstAddress) {
      if (!(this_present_dstAddress && that_present_dstAddress))
        return false;
      if (!this.dstAddress.equals(that.dstAddress))
        return false;
    }

    boolean this_present_warehouseId = true;
    boolean that_present_warehouseId = true;
    if (this_present_warehouseId || that_present_warehouseId) {
      if (!(this_present_warehouseId && that_present_warehouseId))
        return false;
      if (this.warehouseId != that.warehouseId)
        return false;
    }

    boolean this_present_dstName = true && this.isSetDstName();
    boolean that_present_dstName = true && that.isSetDstName();
    if (this_present_dstName || that_present_dstName) {
      if (!(this_present_dstName && that_present_dstName))
        return false;
      if (!this.dstName.equals(that.dstName))
        return false;
    }

    boolean this_present_dstMobile = true && this.isSetDstMobile();
    boolean that_present_dstMobile = true && that.isSetDstMobile();
    if (this_present_dstMobile || that_present_dstMobile) {
      if (!(this_present_dstMobile && that_present_dstMobile))
        return false;
      if (!this.dstMobile.equals(that.dstMobile))
        return false;
    }

    boolean this_present_channel = true;
    boolean that_present_channel = true;
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (this.channel != that.channel)
        return false;
    }

    boolean this_present_subChannel = true && this.isSetSubChannel();
    boolean that_present_subChannel = true && that.isSetSubChannel();
    if (this_present_subChannel || that_present_subChannel) {
      if (!(this_present_subChannel && that_present_subChannel))
        return false;
      if (!this.subChannel.equals(that.subChannel))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_payMode = true;
    boolean that_present_payMode = true;
    if (this_present_payMode || that_present_payMode) {
      if (!(this_present_payMode && that_present_payMode))
        return false;
      if (this.payMode != that.payMode)
        return false;
    }

    boolean this_present_dstMode = true;
    boolean that_present_dstMode = true;
    if (this_present_dstMode || that_present_dstMode) {
      if (!(this_present_dstMode && that_present_dstMode))
        return false;
      if (this.dstMode != that.dstMode)
        return false;
    }

    boolean this_present_isMinusStock = true;
    boolean that_present_isMinusStock = true;
    if (this_present_isMinusStock || that_present_isMinusStock) {
      if (!(this_present_isMinusStock && that_present_isMinusStock))
        return false;
      if (this.isMinusStock != that.isMinusStock)
        return false;
    }

    boolean this_present_totalTaxPrice = true;
    boolean that_present_totalTaxPrice = true;
    if (this_present_totalTaxPrice || that_present_totalTaxPrice) {
      if (!(this_present_totalTaxPrice && that_present_totalTaxPrice))
        return false;
      if (this.totalTaxPrice != that.totalTaxPrice)
        return false;
    }

    boolean this_present_totalPayPrice = true;
    boolean that_present_totalPayPrice = true;
    if (this_present_totalPayPrice || that_present_totalPayPrice) {
      if (!(this_present_totalPayPrice && that_present_totalPayPrice))
        return false;
      if (this.totalPayPrice != that.totalPayPrice)
        return false;
    }

    boolean this_present_totalShipPrice = true;
    boolean that_present_totalShipPrice = true;
    if (this_present_totalShipPrice || that_present_totalShipPrice) {
      if (!(this_present_totalShipPrice && that_present_totalShipPrice))
        return false;
      if (this.totalShipPrice != that.totalShipPrice)
        return false;
    }

    boolean this_present_reducePriceType = true;
    boolean that_present_reducePriceType = true;
    if (this_present_reducePriceType || that_present_reducePriceType) {
      if (!(this_present_reducePriceType && that_present_reducePriceType))
        return false;
      if (this.reducePriceType != that.reducePriceType)
        return false;
    }

    boolean this_present_totalReducePrice = true;
    boolean that_present_totalReducePrice = true;
    if (this_present_totalReducePrice || that_present_totalReducePrice) {
      if (!(this_present_totalReducePrice && that_present_totalReducePrice))
        return false;
      if (this.totalReducePrice != that.totalReducePrice)
        return false;
    }

    boolean this_present_isZeroOrder = true;
    boolean that_present_isZeroOrder = true;
    if (this_present_isZeroOrder || that_present_isZeroOrder) {
      if (!(this_present_isZeroOrder && that_present_isZeroOrder))
        return false;
      if (this.isZeroOrder != that.isZeroOrder)
        return false;
    }

    boolean this_present_transactionId = true && this.isSetTransactionId();
    boolean that_present_transactionId = true && that.isSetTransactionId();
    if (this_present_transactionId || that_present_transactionId) {
      if (!(this_present_transactionId && that_present_transactionId))
        return false;
      if (!this.transactionId.equals(that.transactionId))
        return false;
    }

    boolean this_present_payTime = true && this.isSetPayTime();
    boolean that_present_payTime = true && that.isSetPayTime();
    if (this_present_payTime || that_present_payTime) {
      if (!(this_present_payTime && that_present_payTime))
        return false;
      if (!this.payTime.equals(that.payTime))
        return false;
    }

    boolean this_present_orderTime = true && this.isSetOrderTime();
    boolean that_present_orderTime = true && that.isSetOrderTime();
    if (this_present_orderTime || that_present_orderTime) {
      if (!(this_present_orderTime && that_present_orderTime))
        return false;
      if (!this.orderTime.equals(that.orderTime))
        return false;
    }

    boolean this_present_dstCode = true && this.isSetDstCode();
    boolean that_present_dstCode = true && that.isSetDstCode();
    if (this_present_dstCode || that_present_dstCode) {
      if (!(this_present_dstCode && that_present_dstCode))
        return false;
      if (!this.dstCode.equals(that.dstCode))
        return false;
    }

    boolean this_present_isLockOrder = true;
    boolean that_present_isLockOrder = true;
    if (this_present_isLockOrder || that_present_isLockOrder) {
      if (!(this_present_isLockOrder && that_present_isLockOrder))
        return false;
      if (this.isLockOrder != that.isLockOrder)
        return false;
    }

    boolean this_present_orderItemList = true && this.isSetOrderItemList();
    boolean that_present_orderItemList = true && that.isSetOrderItemList();
    if (this_present_orderItemList || that_present_orderItemList) {
      if (!(this_present_orderItemList && that_present_orderItemList))
        return false;
      if (!this.orderItemList.equals(that.orderItemList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_thirdOrderCode = true && (isSetThirdOrderCode());
    list.add(present_thirdOrderCode);
    if (present_thirdOrderCode)
      list.add(thirdOrderCode);

    boolean present_isUseThirdOrderCode = true;
    list.add(present_isUseThirdOrderCode);
    if (present_isUseThirdOrderCode)
      list.add(isUseThirdOrderCode);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_dstProvince = true && (isSetDstProvince());
    list.add(present_dstProvince);
    if (present_dstProvince)
      list.add(dstProvince);

    boolean present_dstCity = true && (isSetDstCity());
    list.add(present_dstCity);
    if (present_dstCity)
      list.add(dstCity);

    boolean present_dstArea = true && (isSetDstArea());
    list.add(present_dstArea);
    if (present_dstArea)
      list.add(dstArea);

    boolean present_dstStreet = true && (isSetDstStreet());
    list.add(present_dstStreet);
    if (present_dstStreet)
      list.add(dstStreet);

    boolean present_dstAddress = true && (isSetDstAddress());
    list.add(present_dstAddress);
    if (present_dstAddress)
      list.add(dstAddress);

    boolean present_warehouseId = true;
    list.add(present_warehouseId);
    if (present_warehouseId)
      list.add(warehouseId);

    boolean present_dstName = true && (isSetDstName());
    list.add(present_dstName);
    if (present_dstName)
      list.add(dstName);

    boolean present_dstMobile = true && (isSetDstMobile());
    list.add(present_dstMobile);
    if (present_dstMobile)
      list.add(dstMobile);

    boolean present_channel = true;
    list.add(present_channel);
    if (present_channel)
      list.add(channel);

    boolean present_subChannel = true && (isSetSubChannel());
    list.add(present_subChannel);
    if (present_subChannel)
      list.add(subChannel);

    boolean present_ip = true && (isSetIp());
    list.add(present_ip);
    if (present_ip)
      list.add(ip);

    boolean present_payMode = true;
    list.add(present_payMode);
    if (present_payMode)
      list.add(payMode);

    boolean present_dstMode = true;
    list.add(present_dstMode);
    if (present_dstMode)
      list.add(dstMode);

    boolean present_isMinusStock = true;
    list.add(present_isMinusStock);
    if (present_isMinusStock)
      list.add(isMinusStock);

    boolean present_totalTaxPrice = true;
    list.add(present_totalTaxPrice);
    if (present_totalTaxPrice)
      list.add(totalTaxPrice);

    boolean present_totalPayPrice = true;
    list.add(present_totalPayPrice);
    if (present_totalPayPrice)
      list.add(totalPayPrice);

    boolean present_totalShipPrice = true;
    list.add(present_totalShipPrice);
    if (present_totalShipPrice)
      list.add(totalShipPrice);

    boolean present_reducePriceType = true;
    list.add(present_reducePriceType);
    if (present_reducePriceType)
      list.add(reducePriceType);

    boolean present_totalReducePrice = true;
    list.add(present_totalReducePrice);
    if (present_totalReducePrice)
      list.add(totalReducePrice);

    boolean present_isZeroOrder = true;
    list.add(present_isZeroOrder);
    if (present_isZeroOrder)
      list.add(isZeroOrder);

    boolean present_transactionId = true && (isSetTransactionId());
    list.add(present_transactionId);
    if (present_transactionId)
      list.add(transactionId);

    boolean present_payTime = true && (isSetPayTime());
    list.add(present_payTime);
    if (present_payTime)
      list.add(payTime);

    boolean present_orderTime = true && (isSetOrderTime());
    list.add(present_orderTime);
    if (present_orderTime)
      list.add(orderTime);

    boolean present_dstCode = true && (isSetDstCode());
    list.add(present_dstCode);
    if (present_dstCode)
      list.add(dstCode);

    boolean present_isLockOrder = true;
    list.add(present_isLockOrder);
    if (present_isLockOrder)
      list.add(isLockOrder);

    boolean present_orderItemList = true && (isSetOrderItemList());
    list.add(present_orderItemList);
    if (present_orderItemList)
      list.add(orderItemList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TOpenOrders other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetThirdOrderCode()).compareTo(other.isSetThirdOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdOrderCode, other.thirdOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsUseThirdOrderCode()).compareTo(other.isSetIsUseThirdOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsUseThirdOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isUseThirdOrderCode, other.isUseThirdOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstProvince()).compareTo(other.isSetDstProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstProvince, other.dstProvince);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstCity()).compareTo(other.isSetDstCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstCity, other.dstCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstArea()).compareTo(other.isSetDstArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstArea, other.dstArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstStreet()).compareTo(other.isSetDstStreet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstStreet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstStreet, other.dstStreet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstAddress()).compareTo(other.isSetDstAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstAddress, other.dstAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarehouseId()).compareTo(other.isSetWarehouseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarehouseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warehouseId, other.warehouseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstName()).compareTo(other.isSetDstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstName, other.dstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstMobile()).compareTo(other.isSetDstMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstMobile, other.dstMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubChannel()).compareTo(other.isSetSubChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subChannel, other.subChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayMode()).compareTo(other.isSetPayMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMode, other.payMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstMode()).compareTo(other.isSetDstMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstMode, other.dstMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMinusStock()).compareTo(other.isSetIsMinusStock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMinusStock()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMinusStock, other.isMinusStock);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTaxPrice()).compareTo(other.isSetTotalTaxPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTaxPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalTaxPrice, other.totalTaxPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPayPrice()).compareTo(other.isSetTotalPayPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPayPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPayPrice, other.totalPayPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalShipPrice()).compareTo(other.isSetTotalShipPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalShipPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalShipPrice, other.totalShipPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReducePriceType()).compareTo(other.isSetReducePriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReducePriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reducePriceType, other.reducePriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalReducePrice()).compareTo(other.isSetTotalReducePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalReducePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalReducePrice, other.totalReducePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsZeroOrder()).compareTo(other.isSetIsZeroOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsZeroOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isZeroOrder, other.isZeroOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionId()).compareTo(other.isSetTransactionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionId, other.transactionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayTime()).compareTo(other.isSetPayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payTime, other.payTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTime()).compareTo(other.isSetOrderTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTime, other.orderTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDstCode()).compareTo(other.isSetDstCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstCode, other.dstCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLockOrder()).compareTo(other.isSetIsLockOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLockOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLockOrder, other.isLockOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderItemList()).compareTo(other.isSetOrderItemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderItemList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderItemList, other.orderItemList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TOpenOrders(");
    boolean first = true;

    sb.append("thirdOrderCode:");
    if (this.thirdOrderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdOrderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isUseThirdOrderCode:");
    sb.append(this.isUseThirdOrderCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstProvince:");
    if (this.dstProvince == null) {
      sb.append("null");
    } else {
      sb.append(this.dstProvince);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstCity:");
    if (this.dstCity == null) {
      sb.append("null");
    } else {
      sb.append(this.dstCity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstArea:");
    if (this.dstArea == null) {
      sb.append("null");
    } else {
      sb.append(this.dstArea);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstStreet:");
    if (this.dstStreet == null) {
      sb.append("null");
    } else {
      sb.append(this.dstStreet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstAddress:");
    if (this.dstAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.dstAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("warehouseId:");
    sb.append(this.warehouseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstName:");
    if (this.dstName == null) {
      sb.append("null");
    } else {
      sb.append(this.dstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstMobile:");
    if (this.dstMobile == null) {
      sb.append("null");
    } else {
      sb.append(this.dstMobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel:");
    sb.append(this.channel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subChannel:");
    if (this.subChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.subChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payMode:");
    sb.append(this.payMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstMode:");
    sb.append(this.dstMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMinusStock:");
    sb.append(this.isMinusStock);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalTaxPrice:");
    sb.append(this.totalTaxPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPayPrice:");
    sb.append(this.totalPayPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalShipPrice:");
    sb.append(this.totalShipPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reducePriceType:");
    sb.append(this.reducePriceType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalReducePrice:");
    sb.append(this.totalReducePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isZeroOrder:");
    sb.append(this.isZeroOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactionId:");
    if (this.transactionId == null) {
      sb.append("null");
    } else {
      sb.append(this.transactionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payTime:");
    if (this.payTime == null) {
      sb.append("null");
    } else {
      sb.append(this.payTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderTime:");
    if (this.orderTime == null) {
      sb.append("null");
    } else {
      sb.append(this.orderTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dstCode:");
    if (this.dstCode == null) {
      sb.append("null");
    } else {
      sb.append(this.dstCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLockOrder:");
    sb.append(this.isLockOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderItemList:");
    if (this.orderItemList == null) {
      sb.append("null");
    } else {
      sb.append(this.orderItemList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOpenOrdersStandardSchemeFactory implements SchemeFactory {
    public TOpenOrdersStandardScheme getScheme() {
      return new TOpenOrdersStandardScheme();
    }
  }

  private static class TOpenOrdersStandardScheme extends StandardScheme<TOpenOrders> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TOpenOrders struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // THIRD_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdOrderCode = iprot.readString();
              struct.setThirdOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_USE_THIRD_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isUseThirdOrderCode = iprot.readBool();
              struct.setIsUseThirdOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DST_PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dstProvince = iprot.readString();
              struct.setDstProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DST_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dstCity = iprot.readString();
              struct.setDstCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DST_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dstArea = iprot.readString();
              struct.setDstAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DST_STREET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dstStreet = iprot.readString();
              struct.setDstStreetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DST_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dstAddress = iprot.readString();
              struct.setDstAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // WAREHOUSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.warehouseId = iprot.readI32();
              struct.setWarehouseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dstName = iprot.readString();
              struct.setDstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DST_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dstMobile = iprot.readString();
              struct.setDstMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.channel = iprot.readI16();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SUB_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subChannel = iprot.readString();
              struct.setSubChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAY_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.payMode = iprot.readI16();
              struct.setPayModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DST_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.dstMode = iprot.readI16();
              struct.setDstModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_MINUS_STOCK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMinusStock = iprot.readBool();
              struct.setIsMinusStockIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TOTAL_TAX_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalTaxPrice = iprot.readDouble();
              struct.setTotalTaxPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TOTAL_PAY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPayPrice = iprot.readDouble();
              struct.setTotalPayPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TOTAL_SHIP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalShipPrice = iprot.readDouble();
              struct.setTotalShipPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REDUCE_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.reducePriceType = iprot.readI16();
              struct.setReducePriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TOTAL_REDUCE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalReducePrice = iprot.readDouble();
              struct.setTotalReducePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_ZERO_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isZeroOrder = iprot.readBool();
              struct.setIsZeroOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transactionId = iprot.readString();
              struct.setTransactionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PAY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payTime = iprot.readString();
              struct.setPayTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ORDER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderTime = iprot.readString();
              struct.setOrderTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // DST_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dstCode = iprot.readString();
              struct.setDstCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // IS_LOCK_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLockOrder = iprot.readBool();
              struct.setIsLockOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // ORDER_ITEM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.orderItemList = new ArrayList<TOpenOrderItem>(_list0.size);
                TOpenOrderItem _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TOpenOrderItem();
                  _elem1.read(iprot);
                  struct.orderItemList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOrderItemListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TOpenOrders struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.thirdOrderCode != null) {
        oprot.writeFieldBegin(THIRD_ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.thirdOrderCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_USE_THIRD_ORDER_CODE_FIELD_DESC);
      oprot.writeBool(struct.isUseThirdOrderCode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.dstProvince != null) {
        oprot.writeFieldBegin(DST_PROVINCE_FIELD_DESC);
        oprot.writeString(struct.dstProvince);
        oprot.writeFieldEnd();
      }
      if (struct.dstCity != null) {
        oprot.writeFieldBegin(DST_CITY_FIELD_DESC);
        oprot.writeString(struct.dstCity);
        oprot.writeFieldEnd();
      }
      if (struct.dstArea != null) {
        oprot.writeFieldBegin(DST_AREA_FIELD_DESC);
        oprot.writeString(struct.dstArea);
        oprot.writeFieldEnd();
      }
      if (struct.dstStreet != null) {
        oprot.writeFieldBegin(DST_STREET_FIELD_DESC);
        oprot.writeString(struct.dstStreet);
        oprot.writeFieldEnd();
      }
      if (struct.dstAddress != null) {
        oprot.writeFieldBegin(DST_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.dstAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WAREHOUSE_ID_FIELD_DESC);
      oprot.writeI32(struct.warehouseId);
      oprot.writeFieldEnd();
      if (struct.dstName != null) {
        oprot.writeFieldBegin(DST_NAME_FIELD_DESC);
        oprot.writeString(struct.dstName);
        oprot.writeFieldEnd();
      }
      if (struct.dstMobile != null) {
        oprot.writeFieldBegin(DST_MOBILE_FIELD_DESC);
        oprot.writeString(struct.dstMobile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
      oprot.writeI16(struct.channel);
      oprot.writeFieldEnd();
      if (struct.subChannel != null) {
        oprot.writeFieldBegin(SUB_CHANNEL_FIELD_DESC);
        oprot.writeString(struct.subChannel);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAY_MODE_FIELD_DESC);
      oprot.writeI16(struct.payMode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DST_MODE_FIELD_DESC);
      oprot.writeI16(struct.dstMode);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MINUS_STOCK_FIELD_DESC);
      oprot.writeBool(struct.isMinusStock);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_TAX_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalTaxPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PAY_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPayPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_SHIP_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalShipPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REDUCE_PRICE_TYPE_FIELD_DESC);
      oprot.writeI16(struct.reducePriceType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_REDUCE_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalReducePrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ZERO_ORDER_FIELD_DESC);
      oprot.writeBool(struct.isZeroOrder);
      oprot.writeFieldEnd();
      if (struct.transactionId != null) {
        oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
        oprot.writeString(struct.transactionId);
        oprot.writeFieldEnd();
      }
      if (struct.payTime != null) {
        oprot.writeFieldBegin(PAY_TIME_FIELD_DESC);
        oprot.writeString(struct.payTime);
        oprot.writeFieldEnd();
      }
      if (struct.orderTime != null) {
        oprot.writeFieldBegin(ORDER_TIME_FIELD_DESC);
        oprot.writeString(struct.orderTime);
        oprot.writeFieldEnd();
      }
      if (struct.dstCode != null) {
        oprot.writeFieldBegin(DST_CODE_FIELD_DESC);
        oprot.writeString(struct.dstCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_LOCK_ORDER_FIELD_DESC);
      oprot.writeBool(struct.isLockOrder);
      oprot.writeFieldEnd();
      if (struct.orderItemList != null) {
        oprot.writeFieldBegin(ORDER_ITEM_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.orderItemList.size()));
          for (TOpenOrderItem _iter3 : struct.orderItemList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOpenOrdersTupleSchemeFactory implements SchemeFactory {
    public TOpenOrdersTupleScheme getScheme() {
      return new TOpenOrdersTupleScheme();
    }
  }

  private static class TOpenOrdersTupleScheme extends TupleScheme<TOpenOrders> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOpenOrders struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetThirdOrderCode()) {
        optionals.set(0);
      }
      if (struct.isSetIsUseThirdOrderCode()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetDstProvince()) {
        optionals.set(3);
      }
      if (struct.isSetDstCity()) {
        optionals.set(4);
      }
      if (struct.isSetDstArea()) {
        optionals.set(5);
      }
      if (struct.isSetDstStreet()) {
        optionals.set(6);
      }
      if (struct.isSetDstAddress()) {
        optionals.set(7);
      }
      if (struct.isSetWarehouseId()) {
        optionals.set(8);
      }
      if (struct.isSetDstName()) {
        optionals.set(9);
      }
      if (struct.isSetDstMobile()) {
        optionals.set(10);
      }
      if (struct.isSetChannel()) {
        optionals.set(11);
      }
      if (struct.isSetSubChannel()) {
        optionals.set(12);
      }
      if (struct.isSetIp()) {
        optionals.set(13);
      }
      if (struct.isSetPayMode()) {
        optionals.set(14);
      }
      if (struct.isSetDstMode()) {
        optionals.set(15);
      }
      if (struct.isSetIsMinusStock()) {
        optionals.set(16);
      }
      if (struct.isSetTotalTaxPrice()) {
        optionals.set(17);
      }
      if (struct.isSetTotalPayPrice()) {
        optionals.set(18);
      }
      if (struct.isSetTotalShipPrice()) {
        optionals.set(19);
      }
      if (struct.isSetReducePriceType()) {
        optionals.set(20);
      }
      if (struct.isSetTotalReducePrice()) {
        optionals.set(21);
      }
      if (struct.isSetIsZeroOrder()) {
        optionals.set(22);
      }
      if (struct.isSetTransactionId()) {
        optionals.set(23);
      }
      if (struct.isSetPayTime()) {
        optionals.set(24);
      }
      if (struct.isSetOrderTime()) {
        optionals.set(25);
      }
      if (struct.isSetDstCode()) {
        optionals.set(26);
      }
      if (struct.isSetIsLockOrder()) {
        optionals.set(27);
      }
      if (struct.isSetOrderItemList()) {
        optionals.set(28);
      }
      oprot.writeBitSet(optionals, 29);
      if (struct.isSetThirdOrderCode()) {
        oprot.writeString(struct.thirdOrderCode);
      }
      if (struct.isSetIsUseThirdOrderCode()) {
        oprot.writeBool(struct.isUseThirdOrderCode);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetDstProvince()) {
        oprot.writeString(struct.dstProvince);
      }
      if (struct.isSetDstCity()) {
        oprot.writeString(struct.dstCity);
      }
      if (struct.isSetDstArea()) {
        oprot.writeString(struct.dstArea);
      }
      if (struct.isSetDstStreet()) {
        oprot.writeString(struct.dstStreet);
      }
      if (struct.isSetDstAddress()) {
        oprot.writeString(struct.dstAddress);
      }
      if (struct.isSetWarehouseId()) {
        oprot.writeI32(struct.warehouseId);
      }
      if (struct.isSetDstName()) {
        oprot.writeString(struct.dstName);
      }
      if (struct.isSetDstMobile()) {
        oprot.writeString(struct.dstMobile);
      }
      if (struct.isSetChannel()) {
        oprot.writeI16(struct.channel);
      }
      if (struct.isSetSubChannel()) {
        oprot.writeString(struct.subChannel);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetPayMode()) {
        oprot.writeI16(struct.payMode);
      }
      if (struct.isSetDstMode()) {
        oprot.writeI16(struct.dstMode);
      }
      if (struct.isSetIsMinusStock()) {
        oprot.writeBool(struct.isMinusStock);
      }
      if (struct.isSetTotalTaxPrice()) {
        oprot.writeDouble(struct.totalTaxPrice);
      }
      if (struct.isSetTotalPayPrice()) {
        oprot.writeDouble(struct.totalPayPrice);
      }
      if (struct.isSetTotalShipPrice()) {
        oprot.writeDouble(struct.totalShipPrice);
      }
      if (struct.isSetReducePriceType()) {
        oprot.writeI16(struct.reducePriceType);
      }
      if (struct.isSetTotalReducePrice()) {
        oprot.writeDouble(struct.totalReducePrice);
      }
      if (struct.isSetIsZeroOrder()) {
        oprot.writeBool(struct.isZeroOrder);
      }
      if (struct.isSetTransactionId()) {
        oprot.writeString(struct.transactionId);
      }
      if (struct.isSetPayTime()) {
        oprot.writeString(struct.payTime);
      }
      if (struct.isSetOrderTime()) {
        oprot.writeString(struct.orderTime);
      }
      if (struct.isSetDstCode()) {
        oprot.writeString(struct.dstCode);
      }
      if (struct.isSetIsLockOrder()) {
        oprot.writeBool(struct.isLockOrder);
      }
      if (struct.isSetOrderItemList()) {
        {
          oprot.writeI32(struct.orderItemList.size());
          for (TOpenOrderItem _iter4 : struct.orderItemList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOpenOrders struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(29);
      if (incoming.get(0)) {
        struct.thirdOrderCode = iprot.readString();
        struct.setThirdOrderCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isUseThirdOrderCode = iprot.readBool();
        struct.setIsUseThirdOrderCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dstProvince = iprot.readString();
        struct.setDstProvinceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dstCity = iprot.readString();
        struct.setDstCityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dstArea = iprot.readString();
        struct.setDstAreaIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dstStreet = iprot.readString();
        struct.setDstStreetIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dstAddress = iprot.readString();
        struct.setDstAddressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.warehouseId = iprot.readI32();
        struct.setWarehouseIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dstName = iprot.readString();
        struct.setDstNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dstMobile = iprot.readString();
        struct.setDstMobileIsSet(true);
      }
      if (incoming.get(11)) {
        struct.channel = iprot.readI16();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(12)) {
        struct.subChannel = iprot.readString();
        struct.setSubChannelIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(14)) {
        struct.payMode = iprot.readI16();
        struct.setPayModeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.dstMode = iprot.readI16();
        struct.setDstModeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isMinusStock = iprot.readBool();
        struct.setIsMinusStockIsSet(true);
      }
      if (incoming.get(17)) {
        struct.totalTaxPrice = iprot.readDouble();
        struct.setTotalTaxPriceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.totalPayPrice = iprot.readDouble();
        struct.setTotalPayPriceIsSet(true);
      }
      if (incoming.get(19)) {
        struct.totalShipPrice = iprot.readDouble();
        struct.setTotalShipPriceIsSet(true);
      }
      if (incoming.get(20)) {
        struct.reducePriceType = iprot.readI16();
        struct.setReducePriceTypeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.totalReducePrice = iprot.readDouble();
        struct.setTotalReducePriceIsSet(true);
      }
      if (incoming.get(22)) {
        struct.isZeroOrder = iprot.readBool();
        struct.setIsZeroOrderIsSet(true);
      }
      if (incoming.get(23)) {
        struct.transactionId = iprot.readString();
        struct.setTransactionIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.payTime = iprot.readString();
        struct.setPayTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.orderTime = iprot.readString();
        struct.setOrderTimeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.dstCode = iprot.readString();
        struct.setDstCodeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.isLockOrder = iprot.readBool();
        struct.setIsLockOrderIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.orderItemList = new ArrayList<TOpenOrderItem>(_list5.size);
          TOpenOrderItem _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TOpenOrderItem();
            _elem6.read(iprot);
            struct.orderItemList.add(_elem6);
          }
        }
        struct.setOrderItemListIsSet(true);
      }
    }
  }

}

