/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.Coupon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-18")
public class TResultBindCouponByBatchCode implements org.apache.thrift.TBase<TResultBindCouponByBatchCode, TResultBindCouponByBatchCode._Fields>, java.io.Serializable, Cloneable, Comparable<TResultBindCouponByBatchCode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResultBindCouponByBatchCode");

  private static final org.apache.thrift.protocol.TField ERROR_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMap", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField SUCCESS_BATCH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("successBatchCode", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResultBindCouponByBatchCodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResultBindCouponByBatchCodeTupleSchemeFactory());
  }

  public Map<String,com.mia.Coupon.TErrorInfo> errorMap; // required
  public List<String> successBatchCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERROR_MAP((short)1, "errorMap"),
    SUCCESS_BATCH_CODE((short)2, "successBatchCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERROR_MAP
          return ERROR_MAP;
        case 2: // SUCCESS_BATCH_CODE
          return SUCCESS_BATCH_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERROR_MAP, new org.apache.thrift.meta_data.FieldMetaData("errorMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TErrorInfo.class))));
    tmpMap.put(_Fields.SUCCESS_BATCH_CODE, new org.apache.thrift.meta_data.FieldMetaData("successBatchCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultBindCouponByBatchCode.class, metaDataMap);
  }

  public TResultBindCouponByBatchCode() {
  }

  public TResultBindCouponByBatchCode(
    Map<String,com.mia.Coupon.TErrorInfo> errorMap,
    List<String> successBatchCode)
  {
    this();
    this.errorMap = errorMap;
    this.successBatchCode = successBatchCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResultBindCouponByBatchCode(TResultBindCouponByBatchCode other) {
    if (other.isSetErrorMap()) {
      Map<String,com.mia.Coupon.TErrorInfo> __this__errorMap = new HashMap<String,com.mia.Coupon.TErrorInfo>(other.errorMap.size());
      for (Map.Entry<String, com.mia.Coupon.TErrorInfo> other_element : other.errorMap.entrySet()) {

        String other_element_key = other_element.getKey();
        com.mia.Coupon.TErrorInfo other_element_value = other_element.getValue();

        String __this__errorMap_copy_key = other_element_key;

        com.mia.Coupon.TErrorInfo __this__errorMap_copy_value = new com.mia.Coupon.TErrorInfo(other_element_value);

        __this__errorMap.put(__this__errorMap_copy_key, __this__errorMap_copy_value);
      }
      this.errorMap = __this__errorMap;
    }
    if (other.isSetSuccessBatchCode()) {
      List<String> __this__successBatchCode = new ArrayList<String>(other.successBatchCode);
      this.successBatchCode = __this__successBatchCode;
    }
  }

  public TResultBindCouponByBatchCode deepCopy() {
    return new TResultBindCouponByBatchCode(this);
  }

  @Override
  public void clear() {
    this.errorMap = null;
    this.successBatchCode = null;
  }

  public int getErrorMapSize() {
    return (this.errorMap == null) ? 0 : this.errorMap.size();
  }

  public void putToErrorMap(String key, com.mia.Coupon.TErrorInfo val) {
    if (this.errorMap == null) {
      this.errorMap = new HashMap<String,com.mia.Coupon.TErrorInfo>();
    }
    this.errorMap.put(key, val);
  }

  public Map<String,com.mia.Coupon.TErrorInfo> getErrorMap() {
    return this.errorMap;
  }

  public TResultBindCouponByBatchCode setErrorMap(Map<String,com.mia.Coupon.TErrorInfo> errorMap) {
    this.errorMap = errorMap;
    return this;
  }

  public void unsetErrorMap() {
    this.errorMap = null;
  }

  /** Returns true if field errorMap is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMap() {
    return this.errorMap != null;
  }

  public void setErrorMapIsSet(boolean value) {
    if (!value) {
      this.errorMap = null;
    }
  }

  public int getSuccessBatchCodeSize() {
    return (this.successBatchCode == null) ? 0 : this.successBatchCode.size();
  }

  public java.util.Iterator<String> getSuccessBatchCodeIterator() {
    return (this.successBatchCode == null) ? null : this.successBatchCode.iterator();
  }

  public void addToSuccessBatchCode(String elem) {
    if (this.successBatchCode == null) {
      this.successBatchCode = new ArrayList<String>();
    }
    this.successBatchCode.add(elem);
  }

  public List<String> getSuccessBatchCode() {
    return this.successBatchCode;
  }

  public TResultBindCouponByBatchCode setSuccessBatchCode(List<String> successBatchCode) {
    this.successBatchCode = successBatchCode;
    return this;
  }

  public void unsetSuccessBatchCode() {
    this.successBatchCode = null;
  }

  /** Returns true if field successBatchCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessBatchCode() {
    return this.successBatchCode != null;
  }

  public void setSuccessBatchCodeIsSet(boolean value) {
    if (!value) {
      this.successBatchCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERROR_MAP:
      if (value == null) {
        unsetErrorMap();
      } else {
        setErrorMap((Map<String,com.mia.Coupon.TErrorInfo>)value);
      }
      break;

    case SUCCESS_BATCH_CODE:
      if (value == null) {
        unsetSuccessBatchCode();
      } else {
        setSuccessBatchCode((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERROR_MAP:
      return getErrorMap();

    case SUCCESS_BATCH_CODE:
      return getSuccessBatchCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERROR_MAP:
      return isSetErrorMap();
    case SUCCESS_BATCH_CODE:
      return isSetSuccessBatchCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResultBindCouponByBatchCode)
      return this.equals((TResultBindCouponByBatchCode)that);
    return false;
  }

  public boolean equals(TResultBindCouponByBatchCode that) {
    if (that == null)
      return false;

    boolean this_present_errorMap = true && this.isSetErrorMap();
    boolean that_present_errorMap = true && that.isSetErrorMap();
    if (this_present_errorMap || that_present_errorMap) {
      if (!(this_present_errorMap && that_present_errorMap))
        return false;
      if (!this.errorMap.equals(that.errorMap))
        return false;
    }

    boolean this_present_successBatchCode = true && this.isSetSuccessBatchCode();
    boolean that_present_successBatchCode = true && that.isSetSuccessBatchCode();
    if (this_present_successBatchCode || that_present_successBatchCode) {
      if (!(this_present_successBatchCode && that_present_successBatchCode))
        return false;
      if (!this.successBatchCode.equals(that.successBatchCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_errorMap = true && (isSetErrorMap());
    list.add(present_errorMap);
    if (present_errorMap)
      list.add(errorMap);

    boolean present_successBatchCode = true && (isSetSuccessBatchCode());
    list.add(present_successBatchCode);
    if (present_successBatchCode)
      list.add(successBatchCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(TResultBindCouponByBatchCode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetErrorMap()).compareTo(other.isSetErrorMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMap, other.errorMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessBatchCode()).compareTo(other.isSetSuccessBatchCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessBatchCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successBatchCode, other.successBatchCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResultBindCouponByBatchCode(");
    boolean first = true;

    sb.append("errorMap:");
    if (this.errorMap == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successBatchCode:");
    if (this.successBatchCode == null) {
      sb.append("null");
    } else {
      sb.append(this.successBatchCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResultBindCouponByBatchCodeStandardSchemeFactory implements SchemeFactory {
    public TResultBindCouponByBatchCodeStandardScheme getScheme() {
      return new TResultBindCouponByBatchCodeStandardScheme();
    }
  }

  private static class TResultBindCouponByBatchCodeStandardScheme extends StandardScheme<TResultBindCouponByBatchCode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResultBindCouponByBatchCode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERROR_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.errorMap = new HashMap<String,com.mia.Coupon.TErrorInfo>(2*_map16.size);
                String _key17;
                com.mia.Coupon.TErrorInfo _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readString();
                  _val18 = new com.mia.Coupon.TErrorInfo();
                  _val18.read(iprot);
                  struct.errorMap.put(_key17, _val18);
                }
                iprot.readMapEnd();
              }
              struct.setErrorMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUCCESS_BATCH_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.successBatchCode = new ArrayList<String>(_list20.size);
                String _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = iprot.readString();
                  struct.successBatchCode.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setSuccessBatchCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResultBindCouponByBatchCode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.errorMap != null) {
        oprot.writeFieldBegin(ERROR_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.errorMap.size()));
          for (Map.Entry<String, com.mia.Coupon.TErrorInfo> _iter23 : struct.errorMap.entrySet())
          {
            oprot.writeString(_iter23.getKey());
            _iter23.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.successBatchCode != null) {
        oprot.writeFieldBegin(SUCCESS_BATCH_CODE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.successBatchCode.size()));
          for (String _iter24 : struct.successBatchCode)
          {
            oprot.writeString(_iter24);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResultBindCouponByBatchCodeTupleSchemeFactory implements SchemeFactory {
    public TResultBindCouponByBatchCodeTupleScheme getScheme() {
      return new TResultBindCouponByBatchCodeTupleScheme();
    }
  }

  private static class TResultBindCouponByBatchCodeTupleScheme extends TupleScheme<TResultBindCouponByBatchCode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResultBindCouponByBatchCode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetErrorMap()) {
        optionals.set(0);
      }
      if (struct.isSetSuccessBatchCode()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetErrorMap()) {
        {
          oprot.writeI32(struct.errorMap.size());
          for (Map.Entry<String, com.mia.Coupon.TErrorInfo> _iter25 : struct.errorMap.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            _iter25.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetSuccessBatchCode()) {
        {
          oprot.writeI32(struct.successBatchCode.size());
          for (String _iter26 : struct.successBatchCode)
          {
            oprot.writeString(_iter26);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResultBindCouponByBatchCode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.errorMap = new HashMap<String,com.mia.Coupon.TErrorInfo>(2*_map27.size);
          String _key28;
          com.mia.Coupon.TErrorInfo _val29;
          for (int _i30 = 0; _i30 < _map27.size; ++_i30)
          {
            _key28 = iprot.readString();
            _val29 = new com.mia.Coupon.TErrorInfo();
            _val29.read(iprot);
            struct.errorMap.put(_key28, _val29);
          }
        }
        struct.setErrorMapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.successBatchCode = new ArrayList<String>(_list31.size);
          String _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readString();
            struct.successBatchCode.add(_elem32);
          }
        }
        struct.setSuccessBatchCodeIsSet(true);
      }
    }
  }

}

