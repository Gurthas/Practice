/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.Coupon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-18")
public class TOrders implements org.apache.thrift.TBase<TOrders, TOrders._Fields>, java.io.Serializable, Cloneable, Comparable<TOrders> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOrders");

  private static final org.apache.thrift.protocol.TField CK_SUPERIOR_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ckSuperiorOrderCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ckType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUB_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("subChannel", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SALE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("salePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField DEAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("dealPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField SHIP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("shipPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField COUPON_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("couponPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField CASH_COUPON_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("cashCouponPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_REDBAG_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalRedbagPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField USED_REDBAG_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("usedRedbagPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField BALANCE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("balancePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField PAY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("payPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField TAX_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("taxPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TOrdersStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TOrdersTupleSchemeFactory());
  }

  public String ckSuperiorOrderCode; // required
  public int ckType; // required
  public String channel; // required
  public String subChannel; // required
  public int userId; // required
  public String orderTime; // required
  public double salePrice; // required
  public double dealPrice; // required
  public double shipPrice; // required
  public double couponPrice; // required
  public double cashCouponPrice; // required
  public double totalRedbagPrice; // required
  public double usedRedbagPrice; // required
  public double balancePrice; // required
  public double payPrice; // required
  public double taxPrice; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CK_SUPERIOR_ORDER_CODE((short)1, "ckSuperiorOrderCode"),
    CK_TYPE((short)2, "ckType"),
    CHANNEL((short)3, "channel"),
    SUB_CHANNEL((short)4, "subChannel"),
    USER_ID((short)5, "userId"),
    ORDER_TIME((short)6, "orderTime"),
    SALE_PRICE((short)7, "salePrice"),
    DEAL_PRICE((short)8, "dealPrice"),
    SHIP_PRICE((short)9, "shipPrice"),
    COUPON_PRICE((short)10, "couponPrice"),
    CASH_COUPON_PRICE((short)11, "cashCouponPrice"),
    TOTAL_REDBAG_PRICE((short)12, "totalRedbagPrice"),
    USED_REDBAG_PRICE((short)13, "usedRedbagPrice"),
    BALANCE_PRICE((short)14, "balancePrice"),
    PAY_PRICE((short)15, "payPrice"),
    TAX_PRICE((short)16, "taxPrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CK_SUPERIOR_ORDER_CODE
          return CK_SUPERIOR_ORDER_CODE;
        case 2: // CK_TYPE
          return CK_TYPE;
        case 3: // CHANNEL
          return CHANNEL;
        case 4: // SUB_CHANNEL
          return SUB_CHANNEL;
        case 5: // USER_ID
          return USER_ID;
        case 6: // ORDER_TIME
          return ORDER_TIME;
        case 7: // SALE_PRICE
          return SALE_PRICE;
        case 8: // DEAL_PRICE
          return DEAL_PRICE;
        case 9: // SHIP_PRICE
          return SHIP_PRICE;
        case 10: // COUPON_PRICE
          return COUPON_PRICE;
        case 11: // CASH_COUPON_PRICE
          return CASH_COUPON_PRICE;
        case 12: // TOTAL_REDBAG_PRICE
          return TOTAL_REDBAG_PRICE;
        case 13: // USED_REDBAG_PRICE
          return USED_REDBAG_PRICE;
        case 14: // BALANCE_PRICE
          return BALANCE_PRICE;
        case 15: // PAY_PRICE
          return PAY_PRICE;
        case 16: // TAX_PRICE
          return TAX_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CKTYPE_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __SALEPRICE_ISSET_ID = 2;
  private static final int __DEALPRICE_ISSET_ID = 3;
  private static final int __SHIPPRICE_ISSET_ID = 4;
  private static final int __COUPONPRICE_ISSET_ID = 5;
  private static final int __CASHCOUPONPRICE_ISSET_ID = 6;
  private static final int __TOTALREDBAGPRICE_ISSET_ID = 7;
  private static final int __USEDREDBAGPRICE_ISSET_ID = 8;
  private static final int __BALANCEPRICE_ISSET_ID = 9;
  private static final int __PAYPRICE_ISSET_ID = 10;
  private static final int __TAXPRICE_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CK_SUPERIOR_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("ckSuperiorOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ckType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("subChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_TIME, new org.apache.thrift.meta_data.FieldMetaData("orderTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("salePrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("dealPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHIP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("shipPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COUPON_PRICE, new org.apache.thrift.meta_data.FieldMetaData("couponPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH_COUPON_PRICE, new org.apache.thrift.meta_data.FieldMetaData("cashCouponPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_REDBAG_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalRedbagPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USED_REDBAG_PRICE, new org.apache.thrift.meta_data.FieldMetaData("usedRedbagPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BALANCE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("balancePrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("payPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TAX_PRICE, new org.apache.thrift.meta_data.FieldMetaData("taxPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOrders.class, metaDataMap);
  }

  public TOrders() {
  }

  public TOrders(
    String ckSuperiorOrderCode,
    int ckType,
    String channel,
    String subChannel,
    int userId,
    String orderTime,
    double salePrice,
    double dealPrice,
    double shipPrice,
    double couponPrice,
    double cashCouponPrice,
    double totalRedbagPrice,
    double usedRedbagPrice,
    double balancePrice,
    double payPrice,
    double taxPrice)
  {
    this();
    this.ckSuperiorOrderCode = ckSuperiorOrderCode;
    this.ckType = ckType;
    setCkTypeIsSet(true);
    this.channel = channel;
    this.subChannel = subChannel;
    this.userId = userId;
    setUserIdIsSet(true);
    this.orderTime = orderTime;
    this.salePrice = salePrice;
    setSalePriceIsSet(true);
    this.dealPrice = dealPrice;
    setDealPriceIsSet(true);
    this.shipPrice = shipPrice;
    setShipPriceIsSet(true);
    this.couponPrice = couponPrice;
    setCouponPriceIsSet(true);
    this.cashCouponPrice = cashCouponPrice;
    setCashCouponPriceIsSet(true);
    this.totalRedbagPrice = totalRedbagPrice;
    setTotalRedbagPriceIsSet(true);
    this.usedRedbagPrice = usedRedbagPrice;
    setUsedRedbagPriceIsSet(true);
    this.balancePrice = balancePrice;
    setBalancePriceIsSet(true);
    this.payPrice = payPrice;
    setPayPriceIsSet(true);
    this.taxPrice = taxPrice;
    setTaxPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOrders(TOrders other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCkSuperiorOrderCode()) {
      this.ckSuperiorOrderCode = other.ckSuperiorOrderCode;
    }
    this.ckType = other.ckType;
    if (other.isSetChannel()) {
      this.channel = other.channel;
    }
    if (other.isSetSubChannel()) {
      this.subChannel = other.subChannel;
    }
    this.userId = other.userId;
    if (other.isSetOrderTime()) {
      this.orderTime = other.orderTime;
    }
    this.salePrice = other.salePrice;
    this.dealPrice = other.dealPrice;
    this.shipPrice = other.shipPrice;
    this.couponPrice = other.couponPrice;
    this.cashCouponPrice = other.cashCouponPrice;
    this.totalRedbagPrice = other.totalRedbagPrice;
    this.usedRedbagPrice = other.usedRedbagPrice;
    this.balancePrice = other.balancePrice;
    this.payPrice = other.payPrice;
    this.taxPrice = other.taxPrice;
  }

  public TOrders deepCopy() {
    return new TOrders(this);
  }

  @Override
  public void clear() {
    this.ckSuperiorOrderCode = null;
    setCkTypeIsSet(false);
    this.ckType = 0;
    this.channel = null;
    this.subChannel = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.orderTime = null;
    setSalePriceIsSet(false);
    this.salePrice = 0.0;
    setDealPriceIsSet(false);
    this.dealPrice = 0.0;
    setShipPriceIsSet(false);
    this.shipPrice = 0.0;
    setCouponPriceIsSet(false);
    this.couponPrice = 0.0;
    setCashCouponPriceIsSet(false);
    this.cashCouponPrice = 0.0;
    setTotalRedbagPriceIsSet(false);
    this.totalRedbagPrice = 0.0;
    setUsedRedbagPriceIsSet(false);
    this.usedRedbagPrice = 0.0;
    setBalancePriceIsSet(false);
    this.balancePrice = 0.0;
    setPayPriceIsSet(false);
    this.payPrice = 0.0;
    setTaxPriceIsSet(false);
    this.taxPrice = 0.0;
  }

  public String getCkSuperiorOrderCode() {
    return this.ckSuperiorOrderCode;
  }

  public TOrders setCkSuperiorOrderCode(String ckSuperiorOrderCode) {
    this.ckSuperiorOrderCode = ckSuperiorOrderCode;
    return this;
  }

  public void unsetCkSuperiorOrderCode() {
    this.ckSuperiorOrderCode = null;
  }

  /** Returns true if field ckSuperiorOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCkSuperiorOrderCode() {
    return this.ckSuperiorOrderCode != null;
  }

  public void setCkSuperiorOrderCodeIsSet(boolean value) {
    if (!value) {
      this.ckSuperiorOrderCode = null;
    }
  }

  public int getCkType() {
    return this.ckType;
  }

  public TOrders setCkType(int ckType) {
    this.ckType = ckType;
    setCkTypeIsSet(true);
    return this;
  }

  public void unsetCkType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CKTYPE_ISSET_ID);
  }

  /** Returns true if field ckType is set (has been assigned a value) and false otherwise */
  public boolean isSetCkType() {
    return EncodingUtils.testBit(__isset_bitfield, __CKTYPE_ISSET_ID);
  }

  public void setCkTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CKTYPE_ISSET_ID, value);
  }

  public String getChannel() {
    return this.channel;
  }

  public TOrders setChannel(String channel) {
    this.channel = channel;
    return this;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public String getSubChannel() {
    return this.subChannel;
  }

  public TOrders setSubChannel(String subChannel) {
    this.subChannel = subChannel;
    return this;
  }

  public void unsetSubChannel() {
    this.subChannel = null;
  }

  /** Returns true if field subChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetSubChannel() {
    return this.subChannel != null;
  }

  public void setSubChannelIsSet(boolean value) {
    if (!value) {
      this.subChannel = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public TOrders setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getOrderTime() {
    return this.orderTime;
  }

  public TOrders setOrderTime(String orderTime) {
    this.orderTime = orderTime;
    return this;
  }

  public void unsetOrderTime() {
    this.orderTime = null;
  }

  /** Returns true if field orderTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTime() {
    return this.orderTime != null;
  }

  public void setOrderTimeIsSet(boolean value) {
    if (!value) {
      this.orderTime = null;
    }
  }

  public double getSalePrice() {
    return this.salePrice;
  }

  public TOrders setSalePrice(double salePrice) {
    this.salePrice = salePrice;
    setSalePriceIsSet(true);
    return this;
  }

  public void unsetSalePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
  }

  /** Returns true if field salePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSalePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
  }

  public void setSalePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALEPRICE_ISSET_ID, value);
  }

  public double getDealPrice() {
    return this.dealPrice;
  }

  public TOrders setDealPrice(double dealPrice) {
    this.dealPrice = dealPrice;
    setDealPriceIsSet(true);
    return this;
  }

  public void unsetDealPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEALPRICE_ISSET_ID);
  }

  /** Returns true if field dealPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetDealPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __DEALPRICE_ISSET_ID);
  }

  public void setDealPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEALPRICE_ISSET_ID, value);
  }

  public double getShipPrice() {
    return this.shipPrice;
  }

  public TOrders setShipPrice(double shipPrice) {
    this.shipPrice = shipPrice;
    setShipPriceIsSet(true);
    return this;
  }

  public void unsetShipPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHIPPRICE_ISSET_ID);
  }

  /** Returns true if field shipPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetShipPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SHIPPRICE_ISSET_ID);
  }

  public void setShipPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHIPPRICE_ISSET_ID, value);
  }

  public double getCouponPrice() {
    return this.couponPrice;
  }

  public TOrders setCouponPrice(double couponPrice) {
    this.couponPrice = couponPrice;
    setCouponPriceIsSet(true);
    return this;
  }

  public void unsetCouponPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUPONPRICE_ISSET_ID);
  }

  /** Returns true if field couponPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __COUPONPRICE_ISSET_ID);
  }

  public void setCouponPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUPONPRICE_ISSET_ID, value);
  }

  public double getCashCouponPrice() {
    return this.cashCouponPrice;
  }

  public TOrders setCashCouponPrice(double cashCouponPrice) {
    this.cashCouponPrice = cashCouponPrice;
    setCashCouponPriceIsSet(true);
    return this;
  }

  public void unsetCashCouponPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHCOUPONPRICE_ISSET_ID);
  }

  /** Returns true if field cashCouponPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCashCouponPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHCOUPONPRICE_ISSET_ID);
  }

  public void setCashCouponPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHCOUPONPRICE_ISSET_ID, value);
  }

  public double getTotalRedbagPrice() {
    return this.totalRedbagPrice;
  }

  public TOrders setTotalRedbagPrice(double totalRedbagPrice) {
    this.totalRedbagPrice = totalRedbagPrice;
    setTotalRedbagPriceIsSet(true);
    return this;
  }

  public void unsetTotalRedbagPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALREDBAGPRICE_ISSET_ID);
  }

  /** Returns true if field totalRedbagPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRedbagPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALREDBAGPRICE_ISSET_ID);
  }

  public void setTotalRedbagPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALREDBAGPRICE_ISSET_ID, value);
  }

  public double getUsedRedbagPrice() {
    return this.usedRedbagPrice;
  }

  public TOrders setUsedRedbagPrice(double usedRedbagPrice) {
    this.usedRedbagPrice = usedRedbagPrice;
    setUsedRedbagPriceIsSet(true);
    return this;
  }

  public void unsetUsedRedbagPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEDREDBAGPRICE_ISSET_ID);
  }

  /** Returns true if field usedRedbagPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedRedbagPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __USEDREDBAGPRICE_ISSET_ID);
  }

  public void setUsedRedbagPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEDREDBAGPRICE_ISSET_ID, value);
  }

  public double getBalancePrice() {
    return this.balancePrice;
  }

  public TOrders setBalancePrice(double balancePrice) {
    this.balancePrice = balancePrice;
    setBalancePriceIsSet(true);
    return this;
  }

  public void unsetBalancePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCEPRICE_ISSET_ID);
  }

  /** Returns true if field balancePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetBalancePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCEPRICE_ISSET_ID);
  }

  public void setBalancePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCEPRICE_ISSET_ID, value);
  }

  public double getPayPrice() {
    return this.payPrice;
  }

  public TOrders setPayPrice(double payPrice) {
    this.payPrice = payPrice;
    setPayPriceIsSet(true);
    return this;
  }

  public void unsetPayPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYPRICE_ISSET_ID);
  }

  /** Returns true if field payPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPayPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYPRICE_ISSET_ID);
  }

  public void setPayPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYPRICE_ISSET_ID, value);
  }

  public double getTaxPrice() {
    return this.taxPrice;
  }

  public TOrders setTaxPrice(double taxPrice) {
    this.taxPrice = taxPrice;
    setTaxPriceIsSet(true);
    return this;
  }

  public void unsetTaxPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAXPRICE_ISSET_ID);
  }

  /** Returns true if field taxPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TAXPRICE_ISSET_ID);
  }

  public void setTaxPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAXPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CK_SUPERIOR_ORDER_CODE:
      if (value == null) {
        unsetCkSuperiorOrderCode();
      } else {
        setCkSuperiorOrderCode((String)value);
      }
      break;

    case CK_TYPE:
      if (value == null) {
        unsetCkType();
      } else {
        setCkType((Integer)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((String)value);
      }
      break;

    case SUB_CHANNEL:
      if (value == null) {
        unsetSubChannel();
      } else {
        setSubChannel((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case ORDER_TIME:
      if (value == null) {
        unsetOrderTime();
      } else {
        setOrderTime((String)value);
      }
      break;

    case SALE_PRICE:
      if (value == null) {
        unsetSalePrice();
      } else {
        setSalePrice((Double)value);
      }
      break;

    case DEAL_PRICE:
      if (value == null) {
        unsetDealPrice();
      } else {
        setDealPrice((Double)value);
      }
      break;

    case SHIP_PRICE:
      if (value == null) {
        unsetShipPrice();
      } else {
        setShipPrice((Double)value);
      }
      break;

    case COUPON_PRICE:
      if (value == null) {
        unsetCouponPrice();
      } else {
        setCouponPrice((Double)value);
      }
      break;

    case CASH_COUPON_PRICE:
      if (value == null) {
        unsetCashCouponPrice();
      } else {
        setCashCouponPrice((Double)value);
      }
      break;

    case TOTAL_REDBAG_PRICE:
      if (value == null) {
        unsetTotalRedbagPrice();
      } else {
        setTotalRedbagPrice((Double)value);
      }
      break;

    case USED_REDBAG_PRICE:
      if (value == null) {
        unsetUsedRedbagPrice();
      } else {
        setUsedRedbagPrice((Double)value);
      }
      break;

    case BALANCE_PRICE:
      if (value == null) {
        unsetBalancePrice();
      } else {
        setBalancePrice((Double)value);
      }
      break;

    case PAY_PRICE:
      if (value == null) {
        unsetPayPrice();
      } else {
        setPayPrice((Double)value);
      }
      break;

    case TAX_PRICE:
      if (value == null) {
        unsetTaxPrice();
      } else {
        setTaxPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CK_SUPERIOR_ORDER_CODE:
      return getCkSuperiorOrderCode();

    case CK_TYPE:
      return getCkType();

    case CHANNEL:
      return getChannel();

    case SUB_CHANNEL:
      return getSubChannel();

    case USER_ID:
      return getUserId();

    case ORDER_TIME:
      return getOrderTime();

    case SALE_PRICE:
      return getSalePrice();

    case DEAL_PRICE:
      return getDealPrice();

    case SHIP_PRICE:
      return getShipPrice();

    case COUPON_PRICE:
      return getCouponPrice();

    case CASH_COUPON_PRICE:
      return getCashCouponPrice();

    case TOTAL_REDBAG_PRICE:
      return getTotalRedbagPrice();

    case USED_REDBAG_PRICE:
      return getUsedRedbagPrice();

    case BALANCE_PRICE:
      return getBalancePrice();

    case PAY_PRICE:
      return getPayPrice();

    case TAX_PRICE:
      return getTaxPrice();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CK_SUPERIOR_ORDER_CODE:
      return isSetCkSuperiorOrderCode();
    case CK_TYPE:
      return isSetCkType();
    case CHANNEL:
      return isSetChannel();
    case SUB_CHANNEL:
      return isSetSubChannel();
    case USER_ID:
      return isSetUserId();
    case ORDER_TIME:
      return isSetOrderTime();
    case SALE_PRICE:
      return isSetSalePrice();
    case DEAL_PRICE:
      return isSetDealPrice();
    case SHIP_PRICE:
      return isSetShipPrice();
    case COUPON_PRICE:
      return isSetCouponPrice();
    case CASH_COUPON_PRICE:
      return isSetCashCouponPrice();
    case TOTAL_REDBAG_PRICE:
      return isSetTotalRedbagPrice();
    case USED_REDBAG_PRICE:
      return isSetUsedRedbagPrice();
    case BALANCE_PRICE:
      return isSetBalancePrice();
    case PAY_PRICE:
      return isSetPayPrice();
    case TAX_PRICE:
      return isSetTaxPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TOrders)
      return this.equals((TOrders)that);
    return false;
  }

  public boolean equals(TOrders that) {
    if (that == null)
      return false;

    boolean this_present_ckSuperiorOrderCode = true && this.isSetCkSuperiorOrderCode();
    boolean that_present_ckSuperiorOrderCode = true && that.isSetCkSuperiorOrderCode();
    if (this_present_ckSuperiorOrderCode || that_present_ckSuperiorOrderCode) {
      if (!(this_present_ckSuperiorOrderCode && that_present_ckSuperiorOrderCode))
        return false;
      if (!this.ckSuperiorOrderCode.equals(that.ckSuperiorOrderCode))
        return false;
    }

    boolean this_present_ckType = true;
    boolean that_present_ckType = true;
    if (this_present_ckType || that_present_ckType) {
      if (!(this_present_ckType && that_present_ckType))
        return false;
      if (this.ckType != that.ckType)
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_subChannel = true && this.isSetSubChannel();
    boolean that_present_subChannel = true && that.isSetSubChannel();
    if (this_present_subChannel || that_present_subChannel) {
      if (!(this_present_subChannel && that_present_subChannel))
        return false;
      if (!this.subChannel.equals(that.subChannel))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_orderTime = true && this.isSetOrderTime();
    boolean that_present_orderTime = true && that.isSetOrderTime();
    if (this_present_orderTime || that_present_orderTime) {
      if (!(this_present_orderTime && that_present_orderTime))
        return false;
      if (!this.orderTime.equals(that.orderTime))
        return false;
    }

    boolean this_present_salePrice = true;
    boolean that_present_salePrice = true;
    if (this_present_salePrice || that_present_salePrice) {
      if (!(this_present_salePrice && that_present_salePrice))
        return false;
      if (this.salePrice != that.salePrice)
        return false;
    }

    boolean this_present_dealPrice = true;
    boolean that_present_dealPrice = true;
    if (this_present_dealPrice || that_present_dealPrice) {
      if (!(this_present_dealPrice && that_present_dealPrice))
        return false;
      if (this.dealPrice != that.dealPrice)
        return false;
    }

    boolean this_present_shipPrice = true;
    boolean that_present_shipPrice = true;
    if (this_present_shipPrice || that_present_shipPrice) {
      if (!(this_present_shipPrice && that_present_shipPrice))
        return false;
      if (this.shipPrice != that.shipPrice)
        return false;
    }

    boolean this_present_couponPrice = true;
    boolean that_present_couponPrice = true;
    if (this_present_couponPrice || that_present_couponPrice) {
      if (!(this_present_couponPrice && that_present_couponPrice))
        return false;
      if (this.couponPrice != that.couponPrice)
        return false;
    }

    boolean this_present_cashCouponPrice = true;
    boolean that_present_cashCouponPrice = true;
    if (this_present_cashCouponPrice || that_present_cashCouponPrice) {
      if (!(this_present_cashCouponPrice && that_present_cashCouponPrice))
        return false;
      if (this.cashCouponPrice != that.cashCouponPrice)
        return false;
    }

    boolean this_present_totalRedbagPrice = true;
    boolean that_present_totalRedbagPrice = true;
    if (this_present_totalRedbagPrice || that_present_totalRedbagPrice) {
      if (!(this_present_totalRedbagPrice && that_present_totalRedbagPrice))
        return false;
      if (this.totalRedbagPrice != that.totalRedbagPrice)
        return false;
    }

    boolean this_present_usedRedbagPrice = true;
    boolean that_present_usedRedbagPrice = true;
    if (this_present_usedRedbagPrice || that_present_usedRedbagPrice) {
      if (!(this_present_usedRedbagPrice && that_present_usedRedbagPrice))
        return false;
      if (this.usedRedbagPrice != that.usedRedbagPrice)
        return false;
    }

    boolean this_present_balancePrice = true;
    boolean that_present_balancePrice = true;
    if (this_present_balancePrice || that_present_balancePrice) {
      if (!(this_present_balancePrice && that_present_balancePrice))
        return false;
      if (this.balancePrice != that.balancePrice)
        return false;
    }

    boolean this_present_payPrice = true;
    boolean that_present_payPrice = true;
    if (this_present_payPrice || that_present_payPrice) {
      if (!(this_present_payPrice && that_present_payPrice))
        return false;
      if (this.payPrice != that.payPrice)
        return false;
    }

    boolean this_present_taxPrice = true;
    boolean that_present_taxPrice = true;
    if (this_present_taxPrice || that_present_taxPrice) {
      if (!(this_present_taxPrice && that_present_taxPrice))
        return false;
      if (this.taxPrice != that.taxPrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ckSuperiorOrderCode = true && (isSetCkSuperiorOrderCode());
    list.add(present_ckSuperiorOrderCode);
    if (present_ckSuperiorOrderCode)
      list.add(ckSuperiorOrderCode);

    boolean present_ckType = true;
    list.add(present_ckType);
    if (present_ckType)
      list.add(ckType);

    boolean present_channel = true && (isSetChannel());
    list.add(present_channel);
    if (present_channel)
      list.add(channel);

    boolean present_subChannel = true && (isSetSubChannel());
    list.add(present_subChannel);
    if (present_subChannel)
      list.add(subChannel);

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_orderTime = true && (isSetOrderTime());
    list.add(present_orderTime);
    if (present_orderTime)
      list.add(orderTime);

    boolean present_salePrice = true;
    list.add(present_salePrice);
    if (present_salePrice)
      list.add(salePrice);

    boolean present_dealPrice = true;
    list.add(present_dealPrice);
    if (present_dealPrice)
      list.add(dealPrice);

    boolean present_shipPrice = true;
    list.add(present_shipPrice);
    if (present_shipPrice)
      list.add(shipPrice);

    boolean present_couponPrice = true;
    list.add(present_couponPrice);
    if (present_couponPrice)
      list.add(couponPrice);

    boolean present_cashCouponPrice = true;
    list.add(present_cashCouponPrice);
    if (present_cashCouponPrice)
      list.add(cashCouponPrice);

    boolean present_totalRedbagPrice = true;
    list.add(present_totalRedbagPrice);
    if (present_totalRedbagPrice)
      list.add(totalRedbagPrice);

    boolean present_usedRedbagPrice = true;
    list.add(present_usedRedbagPrice);
    if (present_usedRedbagPrice)
      list.add(usedRedbagPrice);

    boolean present_balancePrice = true;
    list.add(present_balancePrice);
    if (present_balancePrice)
      list.add(balancePrice);

    boolean present_payPrice = true;
    list.add(present_payPrice);
    if (present_payPrice)
      list.add(payPrice);

    boolean present_taxPrice = true;
    list.add(present_taxPrice);
    if (present_taxPrice)
      list.add(taxPrice);

    return list.hashCode();
  }

  @Override
  public int compareTo(TOrders other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCkSuperiorOrderCode()).compareTo(other.isSetCkSuperiorOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCkSuperiorOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ckSuperiorOrderCode, other.ckSuperiorOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCkType()).compareTo(other.isSetCkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ckType, other.ckType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubChannel()).compareTo(other.isSetSubChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subChannel, other.subChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTime()).compareTo(other.isSetOrderTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTime, other.orderTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalePrice()).compareTo(other.isSetSalePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salePrice, other.salePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDealPrice()).compareTo(other.isSetDealPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealPrice, other.dealPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShipPrice()).compareTo(other.isSetShipPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShipPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shipPrice, other.shipPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouponPrice()).compareTo(other.isSetCouponPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponPrice, other.couponPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashCouponPrice()).compareTo(other.isSetCashCouponPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashCouponPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashCouponPrice, other.cashCouponPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalRedbagPrice()).compareTo(other.isSetTotalRedbagPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRedbagPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalRedbagPrice, other.totalRedbagPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsedRedbagPrice()).compareTo(other.isSetUsedRedbagPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedRedbagPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedRedbagPrice, other.usedRedbagPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalancePrice()).compareTo(other.isSetBalancePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalancePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balancePrice, other.balancePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayPrice()).compareTo(other.isSetPayPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPrice, other.payPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxPrice()).compareTo(other.isSetTaxPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxPrice, other.taxPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TOrders(");
    boolean first = true;

    sb.append("ckSuperiorOrderCode:");
    if (this.ckSuperiorOrderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.ckSuperiorOrderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ckType:");
    sb.append(this.ckType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel:");
    if (this.channel == null) {
      sb.append("null");
    } else {
      sb.append(this.channel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subChannel:");
    if (this.subChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.subChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderTime:");
    if (this.orderTime == null) {
      sb.append("null");
    } else {
      sb.append(this.orderTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("salePrice:");
    sb.append(this.salePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dealPrice:");
    sb.append(this.dealPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shipPrice:");
    sb.append(this.shipPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("couponPrice:");
    sb.append(this.couponPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashCouponPrice:");
    sb.append(this.cashCouponPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalRedbagPrice:");
    sb.append(this.totalRedbagPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedRedbagPrice:");
    sb.append(this.usedRedbagPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balancePrice:");
    sb.append(this.balancePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payPrice:");
    sb.append(this.payPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taxPrice:");
    sb.append(this.taxPrice);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOrdersStandardSchemeFactory implements SchemeFactory {
    public TOrdersStandardScheme getScheme() {
      return new TOrdersStandardScheme();
    }
  }

  private static class TOrdersStandardScheme extends StandardScheme<TOrders> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TOrders struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CK_SUPERIOR_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ckSuperiorOrderCode = iprot.readString();
              struct.setCkSuperiorOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ckType = iprot.readI32();
              struct.setCkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel = iprot.readString();
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUB_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subChannel = iprot.readString();
              struct.setSubChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderTime = iprot.readString();
              struct.setOrderTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SALE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.salePrice = iprot.readDouble();
              struct.setSalePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dealPrice = iprot.readDouble();
              struct.setDealPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHIP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shipPrice = iprot.readDouble();
              struct.setShipPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COUPON_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.couponPrice = iprot.readDouble();
              struct.setCouponPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CASH_COUPON_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashCouponPrice = iprot.readDouble();
              struct.setCashCouponPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_REDBAG_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalRedbagPrice = iprot.readDouble();
              struct.setTotalRedbagPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USED_REDBAG_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.usedRedbagPrice = iprot.readDouble();
              struct.setUsedRedbagPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BALANCE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balancePrice = iprot.readDouble();
              struct.setBalancePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.payPrice = iprot.readDouble();
              struct.setPayPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TAX_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.taxPrice = iprot.readDouble();
              struct.setTaxPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TOrders struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ckSuperiorOrderCode != null) {
        oprot.writeFieldBegin(CK_SUPERIOR_ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.ckSuperiorOrderCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CK_TYPE_FIELD_DESC);
      oprot.writeI32(struct.ckType);
      oprot.writeFieldEnd();
      if (struct.channel != null) {
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeString(struct.channel);
        oprot.writeFieldEnd();
      }
      if (struct.subChannel != null) {
        oprot.writeFieldBegin(SUB_CHANNEL_FIELD_DESC);
        oprot.writeString(struct.subChannel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.orderTime != null) {
        oprot.writeFieldBegin(ORDER_TIME_FIELD_DESC);
        oprot.writeString(struct.orderTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SALE_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.salePrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.dealPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHIP_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.shipPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUPON_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.couponPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASH_COUPON_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.cashCouponPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_REDBAG_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalRedbagPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USED_REDBAG_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.usedRedbagPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.balancePrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.payPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAX_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.taxPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOrdersTupleSchemeFactory implements SchemeFactory {
    public TOrdersTupleScheme getScheme() {
      return new TOrdersTupleScheme();
    }
  }

  private static class TOrdersTupleScheme extends TupleScheme<TOrders> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOrders struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCkSuperiorOrderCode()) {
        optionals.set(0);
      }
      if (struct.isSetCkType()) {
        optionals.set(1);
      }
      if (struct.isSetChannel()) {
        optionals.set(2);
      }
      if (struct.isSetSubChannel()) {
        optionals.set(3);
      }
      if (struct.isSetUserId()) {
        optionals.set(4);
      }
      if (struct.isSetOrderTime()) {
        optionals.set(5);
      }
      if (struct.isSetSalePrice()) {
        optionals.set(6);
      }
      if (struct.isSetDealPrice()) {
        optionals.set(7);
      }
      if (struct.isSetShipPrice()) {
        optionals.set(8);
      }
      if (struct.isSetCouponPrice()) {
        optionals.set(9);
      }
      if (struct.isSetCashCouponPrice()) {
        optionals.set(10);
      }
      if (struct.isSetTotalRedbagPrice()) {
        optionals.set(11);
      }
      if (struct.isSetUsedRedbagPrice()) {
        optionals.set(12);
      }
      if (struct.isSetBalancePrice()) {
        optionals.set(13);
      }
      if (struct.isSetPayPrice()) {
        optionals.set(14);
      }
      if (struct.isSetTaxPrice()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetCkSuperiorOrderCode()) {
        oprot.writeString(struct.ckSuperiorOrderCode);
      }
      if (struct.isSetCkType()) {
        oprot.writeI32(struct.ckType);
      }
      if (struct.isSetChannel()) {
        oprot.writeString(struct.channel);
      }
      if (struct.isSetSubChannel()) {
        oprot.writeString(struct.subChannel);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetOrderTime()) {
        oprot.writeString(struct.orderTime);
      }
      if (struct.isSetSalePrice()) {
        oprot.writeDouble(struct.salePrice);
      }
      if (struct.isSetDealPrice()) {
        oprot.writeDouble(struct.dealPrice);
      }
      if (struct.isSetShipPrice()) {
        oprot.writeDouble(struct.shipPrice);
      }
      if (struct.isSetCouponPrice()) {
        oprot.writeDouble(struct.couponPrice);
      }
      if (struct.isSetCashCouponPrice()) {
        oprot.writeDouble(struct.cashCouponPrice);
      }
      if (struct.isSetTotalRedbagPrice()) {
        oprot.writeDouble(struct.totalRedbagPrice);
      }
      if (struct.isSetUsedRedbagPrice()) {
        oprot.writeDouble(struct.usedRedbagPrice);
      }
      if (struct.isSetBalancePrice()) {
        oprot.writeDouble(struct.balancePrice);
      }
      if (struct.isSetPayPrice()) {
        oprot.writeDouble(struct.payPrice);
      }
      if (struct.isSetTaxPrice()) {
        oprot.writeDouble(struct.taxPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOrders struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.ckSuperiorOrderCode = iprot.readString();
        struct.setCkSuperiorOrderCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ckType = iprot.readI32();
        struct.setCkTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.channel = iprot.readString();
        struct.setChannelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subChannel = iprot.readString();
        struct.setSubChannelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderTime = iprot.readString();
        struct.setOrderTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.salePrice = iprot.readDouble();
        struct.setSalePriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dealPrice = iprot.readDouble();
        struct.setDealPriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.shipPrice = iprot.readDouble();
        struct.setShipPriceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.couponPrice = iprot.readDouble();
        struct.setCouponPriceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cashCouponPrice = iprot.readDouble();
        struct.setCashCouponPriceIsSet(true);
      }
      if (incoming.get(11)) {
        struct.totalRedbagPrice = iprot.readDouble();
        struct.setTotalRedbagPriceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.usedRedbagPrice = iprot.readDouble();
        struct.setUsedRedbagPriceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.balancePrice = iprot.readDouble();
        struct.setBalancePriceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.payPrice = iprot.readDouble();
        struct.setPayPriceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.taxPrice = iprot.readDouble();
        struct.setTaxPriceIsSet(true);
      }
    }
  }

}

