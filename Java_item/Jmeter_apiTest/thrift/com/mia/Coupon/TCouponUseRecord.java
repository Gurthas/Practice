/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.Coupon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-18")
public class TCouponUseRecord implements org.apache.thrift.TBase<TCouponUseRecord, TCouponUseRecord._Fields>, java.io.Serializable, Cloneable, Comparable<TCouponUseRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCouponUseRecord");

  private static final org.apache.thrift.protocol.TField COUPON_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("couponCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUPERIOR_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("superiorOrderCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CK_SUPERIOR_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ckSuperiorOrderCode", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCouponUseRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCouponUseRecordTupleSchemeFactory());
  }

  public String couponCode; // required
  public String superiorOrderCode; // required
  public String orderCode; // required
  public String ckSuperiorOrderCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUPON_CODE((short)1, "couponCode"),
    SUPERIOR_ORDER_CODE((short)2, "superiorOrderCode"),
    ORDER_CODE((short)3, "orderCode"),
    CK_SUPERIOR_ORDER_CODE((short)4, "ckSuperiorOrderCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUPON_CODE
          return COUPON_CODE;
        case 2: // SUPERIOR_ORDER_CODE
          return SUPERIOR_ORDER_CODE;
        case 3: // ORDER_CODE
          return ORDER_CODE;
        case 4: // CK_SUPERIOR_ORDER_CODE
          return CK_SUPERIOR_ORDER_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUPON_CODE, new org.apache.thrift.meta_data.FieldMetaData("couponCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERIOR_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("superiorOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("orderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CK_SUPERIOR_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("ckSuperiorOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCouponUseRecord.class, metaDataMap);
  }

  public TCouponUseRecord() {
    this.couponCode = "";

    this.superiorOrderCode = "";

    this.orderCode = "";

    this.ckSuperiorOrderCode = "";

  }

  public TCouponUseRecord(
    String couponCode,
    String superiorOrderCode,
    String orderCode,
    String ckSuperiorOrderCode)
  {
    this();
    this.couponCode = couponCode;
    this.superiorOrderCode = superiorOrderCode;
    this.orderCode = orderCode;
    this.ckSuperiorOrderCode = ckSuperiorOrderCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCouponUseRecord(TCouponUseRecord other) {
    if (other.isSetCouponCode()) {
      this.couponCode = other.couponCode;
    }
    if (other.isSetSuperiorOrderCode()) {
      this.superiorOrderCode = other.superiorOrderCode;
    }
    if (other.isSetOrderCode()) {
      this.orderCode = other.orderCode;
    }
    if (other.isSetCkSuperiorOrderCode()) {
      this.ckSuperiorOrderCode = other.ckSuperiorOrderCode;
    }
  }

  public TCouponUseRecord deepCopy() {
    return new TCouponUseRecord(this);
  }

  @Override
  public void clear() {
    this.couponCode = "";

    this.superiorOrderCode = "";

    this.orderCode = "";

    this.ckSuperiorOrderCode = "";

  }

  public String getCouponCode() {
    return this.couponCode;
  }

  public TCouponUseRecord setCouponCode(String couponCode) {
    this.couponCode = couponCode;
    return this;
  }

  public void unsetCouponCode() {
    this.couponCode = null;
  }

  /** Returns true if field couponCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponCode() {
    return this.couponCode != null;
  }

  public void setCouponCodeIsSet(boolean value) {
    if (!value) {
      this.couponCode = null;
    }
  }

  public String getSuperiorOrderCode() {
    return this.superiorOrderCode;
  }

  public TCouponUseRecord setSuperiorOrderCode(String superiorOrderCode) {
    this.superiorOrderCode = superiorOrderCode;
    return this;
  }

  public void unsetSuperiorOrderCode() {
    this.superiorOrderCode = null;
  }

  /** Returns true if field superiorOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperiorOrderCode() {
    return this.superiorOrderCode != null;
  }

  public void setSuperiorOrderCodeIsSet(boolean value) {
    if (!value) {
      this.superiorOrderCode = null;
    }
  }

  public String getOrderCode() {
    return this.orderCode;
  }

  public TCouponUseRecord setOrderCode(String orderCode) {
    this.orderCode = orderCode;
    return this;
  }

  public void unsetOrderCode() {
    this.orderCode = null;
  }

  /** Returns true if field orderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderCode() {
    return this.orderCode != null;
  }

  public void setOrderCodeIsSet(boolean value) {
    if (!value) {
      this.orderCode = null;
    }
  }

  public String getCkSuperiorOrderCode() {
    return this.ckSuperiorOrderCode;
  }

  public TCouponUseRecord setCkSuperiorOrderCode(String ckSuperiorOrderCode) {
    this.ckSuperiorOrderCode = ckSuperiorOrderCode;
    return this;
  }

  public void unsetCkSuperiorOrderCode() {
    this.ckSuperiorOrderCode = null;
  }

  /** Returns true if field ckSuperiorOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCkSuperiorOrderCode() {
    return this.ckSuperiorOrderCode != null;
  }

  public void setCkSuperiorOrderCodeIsSet(boolean value) {
    if (!value) {
      this.ckSuperiorOrderCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COUPON_CODE:
      if (value == null) {
        unsetCouponCode();
      } else {
        setCouponCode((String)value);
      }
      break;

    case SUPERIOR_ORDER_CODE:
      if (value == null) {
        unsetSuperiorOrderCode();
      } else {
        setSuperiorOrderCode((String)value);
      }
      break;

    case ORDER_CODE:
      if (value == null) {
        unsetOrderCode();
      } else {
        setOrderCode((String)value);
      }
      break;

    case CK_SUPERIOR_ORDER_CODE:
      if (value == null) {
        unsetCkSuperiorOrderCode();
      } else {
        setCkSuperiorOrderCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COUPON_CODE:
      return getCouponCode();

    case SUPERIOR_ORDER_CODE:
      return getSuperiorOrderCode();

    case ORDER_CODE:
      return getOrderCode();

    case CK_SUPERIOR_ORDER_CODE:
      return getCkSuperiorOrderCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COUPON_CODE:
      return isSetCouponCode();
    case SUPERIOR_ORDER_CODE:
      return isSetSuperiorOrderCode();
    case ORDER_CODE:
      return isSetOrderCode();
    case CK_SUPERIOR_ORDER_CODE:
      return isSetCkSuperiorOrderCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCouponUseRecord)
      return this.equals((TCouponUseRecord)that);
    return false;
  }

  public boolean equals(TCouponUseRecord that) {
    if (that == null)
      return false;

    boolean this_present_couponCode = true && this.isSetCouponCode();
    boolean that_present_couponCode = true && that.isSetCouponCode();
    if (this_present_couponCode || that_present_couponCode) {
      if (!(this_present_couponCode && that_present_couponCode))
        return false;
      if (!this.couponCode.equals(that.couponCode))
        return false;
    }

    boolean this_present_superiorOrderCode = true && this.isSetSuperiorOrderCode();
    boolean that_present_superiorOrderCode = true && that.isSetSuperiorOrderCode();
    if (this_present_superiorOrderCode || that_present_superiorOrderCode) {
      if (!(this_present_superiorOrderCode && that_present_superiorOrderCode))
        return false;
      if (!this.superiorOrderCode.equals(that.superiorOrderCode))
        return false;
    }

    boolean this_present_orderCode = true && this.isSetOrderCode();
    boolean that_present_orderCode = true && that.isSetOrderCode();
    if (this_present_orderCode || that_present_orderCode) {
      if (!(this_present_orderCode && that_present_orderCode))
        return false;
      if (!this.orderCode.equals(that.orderCode))
        return false;
    }

    boolean this_present_ckSuperiorOrderCode = true && this.isSetCkSuperiorOrderCode();
    boolean that_present_ckSuperiorOrderCode = true && that.isSetCkSuperiorOrderCode();
    if (this_present_ckSuperiorOrderCode || that_present_ckSuperiorOrderCode) {
      if (!(this_present_ckSuperiorOrderCode && that_present_ckSuperiorOrderCode))
        return false;
      if (!this.ckSuperiorOrderCode.equals(that.ckSuperiorOrderCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_couponCode = true && (isSetCouponCode());
    list.add(present_couponCode);
    if (present_couponCode)
      list.add(couponCode);

    boolean present_superiorOrderCode = true && (isSetSuperiorOrderCode());
    list.add(present_superiorOrderCode);
    if (present_superiorOrderCode)
      list.add(superiorOrderCode);

    boolean present_orderCode = true && (isSetOrderCode());
    list.add(present_orderCode);
    if (present_orderCode)
      list.add(orderCode);

    boolean present_ckSuperiorOrderCode = true && (isSetCkSuperiorOrderCode());
    list.add(present_ckSuperiorOrderCode);
    if (present_ckSuperiorOrderCode)
      list.add(ckSuperiorOrderCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCouponUseRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCouponCode()).compareTo(other.isSetCouponCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponCode, other.couponCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperiorOrderCode()).compareTo(other.isSetSuperiorOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperiorOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superiorOrderCode, other.superiorOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderCode()).compareTo(other.isSetOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCode, other.orderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCkSuperiorOrderCode()).compareTo(other.isSetCkSuperiorOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCkSuperiorOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ckSuperiorOrderCode, other.ckSuperiorOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCouponUseRecord(");
    boolean first = true;

    sb.append("couponCode:");
    if (this.couponCode == null) {
      sb.append("null");
    } else {
      sb.append(this.couponCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superiorOrderCode:");
    if (this.superiorOrderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.superiorOrderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderCode:");
    if (this.orderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ckSuperiorOrderCode:");
    if (this.ckSuperiorOrderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.ckSuperiorOrderCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCouponUseRecordStandardSchemeFactory implements SchemeFactory {
    public TCouponUseRecordStandardScheme getScheme() {
      return new TCouponUseRecordStandardScheme();
    }
  }

  private static class TCouponUseRecordStandardScheme extends StandardScheme<TCouponUseRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCouponUseRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUPON_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.couponCode = iprot.readString();
              struct.setCouponCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUPERIOR_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.superiorOrderCode = iprot.readString();
              struct.setSuperiorOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderCode = iprot.readString();
              struct.setOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CK_SUPERIOR_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ckSuperiorOrderCode = iprot.readString();
              struct.setCkSuperiorOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCouponUseRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.couponCode != null) {
        oprot.writeFieldBegin(COUPON_CODE_FIELD_DESC);
        oprot.writeString(struct.couponCode);
        oprot.writeFieldEnd();
      }
      if (struct.superiorOrderCode != null) {
        oprot.writeFieldBegin(SUPERIOR_ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.superiorOrderCode);
        oprot.writeFieldEnd();
      }
      if (struct.orderCode != null) {
        oprot.writeFieldBegin(ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.orderCode);
        oprot.writeFieldEnd();
      }
      if (struct.ckSuperiorOrderCode != null) {
        oprot.writeFieldBegin(CK_SUPERIOR_ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.ckSuperiorOrderCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCouponUseRecordTupleSchemeFactory implements SchemeFactory {
    public TCouponUseRecordTupleScheme getScheme() {
      return new TCouponUseRecordTupleScheme();
    }
  }

  private static class TCouponUseRecordTupleScheme extends TupleScheme<TCouponUseRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCouponUseRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCouponCode()) {
        optionals.set(0);
      }
      if (struct.isSetSuperiorOrderCode()) {
        optionals.set(1);
      }
      if (struct.isSetOrderCode()) {
        optionals.set(2);
      }
      if (struct.isSetCkSuperiorOrderCode()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCouponCode()) {
        oprot.writeString(struct.couponCode);
      }
      if (struct.isSetSuperiorOrderCode()) {
        oprot.writeString(struct.superiorOrderCode);
      }
      if (struct.isSetOrderCode()) {
        oprot.writeString(struct.orderCode);
      }
      if (struct.isSetCkSuperiorOrderCode()) {
        oprot.writeString(struct.ckSuperiorOrderCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCouponUseRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.couponCode = iprot.readString();
        struct.setCouponCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.superiorOrderCode = iprot.readString();
        struct.setSuperiorOrderCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orderCode = iprot.readString();
        struct.setOrderCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ckSuperiorOrderCode = iprot.readString();
        struct.setCkSuperiorOrderCodeIsSet(true);
      }
    }
  }

}

