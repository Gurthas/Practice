/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.Coupon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-18")
public class TResultQueryUserCoupon implements org.apache.thrift.TBase<TResultQueryUserCoupon, TResultQueryUserCoupon._Fields>, java.io.Serializable, Cloneable, Comparable<TResultQueryUserCoupon> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResultQueryUserCoupon");

  private static final org.apache.thrift.protocol.TField ERROR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("errorInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pageList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNo", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResultQueryUserCouponStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResultQueryUserCouponTupleSchemeFactory());
  }

  public com.mia.Coupon.TErrorInfo errorInfo; // required
  public List<TCoupon> pageList; // required
  public long total; // required
  public int pageNo; // required
  public int pageSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERROR_INFO((short)1, "errorInfo"),
    PAGE_LIST((short)2, "pageList"),
    TOTAL((short)3, "total"),
    PAGE_NO((short)4, "pageNo"),
    PAGE_SIZE((short)5, "pageSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERROR_INFO
          return ERROR_INFO;
        case 2: // PAGE_LIST
          return PAGE_LIST;
        case 3: // TOTAL
          return TOTAL;
        case 4: // PAGE_NO
          return PAGE_NO;
        case 5: // PAGE_SIZE
          return PAGE_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTAL_ISSET_ID = 0;
  private static final int __PAGENO_ISSET_ID = 1;
  private static final int __PAGESIZE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERROR_INFO, new org.apache.thrift.meta_data.FieldMetaData("errorInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.mia.Coupon.TErrorInfo.class)));
    tmpMap.put(_Fields.PAGE_LIST, new org.apache.thrift.meta_data.FieldMetaData("pageList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCoupon.class))));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE_NO, new org.apache.thrift.meta_data.FieldMetaData("pageNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultQueryUserCoupon.class, metaDataMap);
  }

  public TResultQueryUserCoupon() {
  }

  public TResultQueryUserCoupon(
    com.mia.Coupon.TErrorInfo errorInfo,
    List<TCoupon> pageList,
    long total,
    int pageNo,
    int pageSize)
  {
    this();
    this.errorInfo = errorInfo;
    this.pageList = pageList;
    this.total = total;
    setTotalIsSet(true);
    this.pageNo = pageNo;
    setPageNoIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResultQueryUserCoupon(TResultQueryUserCoupon other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetErrorInfo()) {
      this.errorInfo = new com.mia.Coupon.TErrorInfo(other.errorInfo);
    }
    if (other.isSetPageList()) {
      List<TCoupon> __this__pageList = new ArrayList<TCoupon>(other.pageList.size());
      for (TCoupon other_element : other.pageList) {
        __this__pageList.add(new TCoupon(other_element));
      }
      this.pageList = __this__pageList;
    }
    this.total = other.total;
    this.pageNo = other.pageNo;
    this.pageSize = other.pageSize;
  }

  public TResultQueryUserCoupon deepCopy() {
    return new TResultQueryUserCoupon(this);
  }

  @Override
  public void clear() {
    this.errorInfo = null;
    this.pageList = null;
    setTotalIsSet(false);
    this.total = 0;
    setPageNoIsSet(false);
    this.pageNo = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
  }

  public com.mia.Coupon.TErrorInfo getErrorInfo() {
    return this.errorInfo;
  }

  public TResultQueryUserCoupon setErrorInfo(com.mia.Coupon.TErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

  public void unsetErrorInfo() {
    this.errorInfo = null;
  }

  /** Returns true if field errorInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorInfo() {
    return this.errorInfo != null;
  }

  public void setErrorInfoIsSet(boolean value) {
    if (!value) {
      this.errorInfo = null;
    }
  }

  public int getPageListSize() {
    return (this.pageList == null) ? 0 : this.pageList.size();
  }

  public java.util.Iterator<TCoupon> getPageListIterator() {
    return (this.pageList == null) ? null : this.pageList.iterator();
  }

  public void addToPageList(TCoupon elem) {
    if (this.pageList == null) {
      this.pageList = new ArrayList<TCoupon>();
    }
    this.pageList.add(elem);
  }

  public List<TCoupon> getPageList() {
    return this.pageList;
  }

  public TResultQueryUserCoupon setPageList(List<TCoupon> pageList) {
    this.pageList = pageList;
    return this;
  }

  public void unsetPageList() {
    this.pageList = null;
  }

  /** Returns true if field pageList is set (has been assigned a value) and false otherwise */
  public boolean isSetPageList() {
    return this.pageList != null;
  }

  public void setPageListIsSet(boolean value) {
    if (!value) {
      this.pageList = null;
    }
  }

  public long getTotal() {
    return this.total;
  }

  public TResultQueryUserCoupon setTotal(long total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public int getPageNo() {
    return this.pageNo;
  }

  public TResultQueryUserCoupon setPageNo(int pageNo) {
    this.pageNo = pageNo;
    setPageNoIsSet(true);
    return this;
  }

  public void unsetPageNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  /** Returns true if field pageNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNo() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGENO_ISSET_ID);
  }

  public void setPageNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENO_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public TResultQueryUserCoupon setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERROR_INFO:
      if (value == null) {
        unsetErrorInfo();
      } else {
        setErrorInfo((com.mia.Coupon.TErrorInfo)value);
      }
      break;

    case PAGE_LIST:
      if (value == null) {
        unsetPageList();
      } else {
        setPageList((List<TCoupon>)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Long)value);
      }
      break;

    case PAGE_NO:
      if (value == null) {
        unsetPageNo();
      } else {
        setPageNo((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERROR_INFO:
      return getErrorInfo();

    case PAGE_LIST:
      return getPageList();

    case TOTAL:
      return getTotal();

    case PAGE_NO:
      return getPageNo();

    case PAGE_SIZE:
      return getPageSize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERROR_INFO:
      return isSetErrorInfo();
    case PAGE_LIST:
      return isSetPageList();
    case TOTAL:
      return isSetTotal();
    case PAGE_NO:
      return isSetPageNo();
    case PAGE_SIZE:
      return isSetPageSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResultQueryUserCoupon)
      return this.equals((TResultQueryUserCoupon)that);
    return false;
  }

  public boolean equals(TResultQueryUserCoupon that) {
    if (that == null)
      return false;

    boolean this_present_errorInfo = true && this.isSetErrorInfo();
    boolean that_present_errorInfo = true && that.isSetErrorInfo();
    if (this_present_errorInfo || that_present_errorInfo) {
      if (!(this_present_errorInfo && that_present_errorInfo))
        return false;
      if (!this.errorInfo.equals(that.errorInfo))
        return false;
    }

    boolean this_present_pageList = true && this.isSetPageList();
    boolean that_present_pageList = true && that.isSetPageList();
    if (this_present_pageList || that_present_pageList) {
      if (!(this_present_pageList && that_present_pageList))
        return false;
      if (!this.pageList.equals(that.pageList))
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_pageNo = true;
    boolean that_present_pageNo = true;
    if (this_present_pageNo || that_present_pageNo) {
      if (!(this_present_pageNo && that_present_pageNo))
        return false;
      if (this.pageNo != that.pageNo)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_errorInfo = true && (isSetErrorInfo());
    list.add(present_errorInfo);
    if (present_errorInfo)
      list.add(errorInfo);

    boolean present_pageList = true && (isSetPageList());
    list.add(present_pageList);
    if (present_pageList)
      list.add(pageList);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_pageNo = true;
    list.add(present_pageNo);
    if (present_pageNo)
      list.add(pageNo);

    boolean present_pageSize = true;
    list.add(present_pageSize);
    if (present_pageSize)
      list.add(pageSize);

    return list.hashCode();
  }

  @Override
  public int compareTo(TResultQueryUserCoupon other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetErrorInfo()).compareTo(other.isSetErrorInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorInfo, other.errorInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageList()).compareTo(other.isSetPageList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageList, other.pageList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageNo()).compareTo(other.isSetPageNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNo, other.pageNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResultQueryUserCoupon(");
    boolean first = true;

    sb.append("errorInfo:");
    if (this.errorInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.errorInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageList:");
    if (this.pageList == null) {
      sb.append("null");
    } else {
      sb.append(this.pageList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageNo:");
    sb.append(this.pageNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (errorInfo != null) {
      errorInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResultQueryUserCouponStandardSchemeFactory implements SchemeFactory {
    public TResultQueryUserCouponStandardScheme getScheme() {
      return new TResultQueryUserCouponStandardScheme();
    }
  }

  private static class TResultQueryUserCouponStandardScheme extends StandardScheme<TResultQueryUserCoupon> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResultQueryUserCoupon struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERROR_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.errorInfo = new com.mia.Coupon.TErrorInfo();
              struct.errorInfo.read(iprot);
              struct.setErrorInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.pageList = new ArrayList<TCoupon>(_list0.size);
                TCoupon _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TCoupon();
                  _elem1.read(iprot);
                  struct.pageList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPageListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total = iprot.readI64();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNo = iprot.readI32();
              struct.setPageNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResultQueryUserCoupon struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.errorInfo != null) {
        oprot.writeFieldBegin(ERROR_INFO_FIELD_DESC);
        struct.errorInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.pageList != null) {
        oprot.writeFieldBegin(PAGE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pageList.size()));
          for (TCoupon _iter3 : struct.pageList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI64(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_NO_FIELD_DESC);
      oprot.writeI32(struct.pageNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResultQueryUserCouponTupleSchemeFactory implements SchemeFactory {
    public TResultQueryUserCouponTupleScheme getScheme() {
      return new TResultQueryUserCouponTupleScheme();
    }
  }

  private static class TResultQueryUserCouponTupleScheme extends TupleScheme<TResultQueryUserCoupon> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResultQueryUserCoupon struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetErrorInfo()) {
        optionals.set(0);
      }
      if (struct.isSetPageList()) {
        optionals.set(1);
      }
      if (struct.isSetTotal()) {
        optionals.set(2);
      }
      if (struct.isSetPageNo()) {
        optionals.set(3);
      }
      if (struct.isSetPageSize()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetErrorInfo()) {
        struct.errorInfo.write(oprot);
      }
      if (struct.isSetPageList()) {
        {
          oprot.writeI32(struct.pageList.size());
          for (TCoupon _iter4 : struct.pageList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetTotal()) {
        oprot.writeI64(struct.total);
      }
      if (struct.isSetPageNo()) {
        oprot.writeI32(struct.pageNo);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResultQueryUserCoupon struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.errorInfo = new com.mia.Coupon.TErrorInfo();
        struct.errorInfo.read(iprot);
        struct.setErrorInfoIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pageList = new ArrayList<TCoupon>(_list5.size);
          TCoupon _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new TCoupon();
            _elem6.read(iprot);
            struct.pageList.add(_elem6);
          }
        }
        struct.setPageListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.total = iprot.readI64();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pageNo = iprot.readI32();
        struct.setPageNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
    }
  }

}

