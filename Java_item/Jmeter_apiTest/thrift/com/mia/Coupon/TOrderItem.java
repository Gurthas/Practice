/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.Coupon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-18")
public class TOrderItem implements org.apache.thrift.TBase<TOrderItem, TOrderItem._Fields>, java.io.Serializable, Cloneable, Comparable<TOrderItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOrderItem");

  private static final org.apache.thrift.protocol.TField UNIQ_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SHOP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shopName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WAREHOUSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("warehouseId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WAREHOUSE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("warehouseType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SUPPLIER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supplierId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_SPU_FIELD_DESC = new org.apache.thrift.protocol.TField("isSpu", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField GIFT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("giftType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ITEM_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemSize", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ITEM_SALE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemSalePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField DEAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("dealPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField SHIP_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("shipPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField COUPON_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("couponCode", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField COUPON_LIMIT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("couponLimitType", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField COUPON_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("couponPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField CASH_COUPON_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("cashCouponPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField REDBAG_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("redbagPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField BALANCE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("balancePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField REDUCE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("reducePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField TAX_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("taxPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField PAY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("payPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField BRAND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brandId", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField PARENT_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentCategoryId", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField SPU_SKUS_FIELD_DESC = new org.apache.thrift.protocol.TField("spuSkus", org.apache.thrift.protocol.TType.LIST, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TOrderItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TOrderItemTupleSchemeFactory());
  }

  public String uniqKey; // required
  public String shopName; // required
  public int shopId; // required
  public int warehouseId; // required
  public int warehouseType; // required
  public int supplierId; // required
  public int isSpu; // required
  public int giftType; // required
  public int itemId; // required
  public String itemSize; // required
  public String itemName; // required
  public double itemSalePrice; // required
  public double dealPrice; // required
  public double shipPrice; // required
  public String couponCode; // required
  public int couponLimitType; // required
  public double couponPrice; // required
  public double cashCouponPrice; // required
  public double redbagPrice; // required
  public double balancePrice; // required
  public double reducePrice; // required
  public double taxPrice; // required
  public double payPrice; // required
  public int brandId; // required
  public int categoryId; // required
  public int parentCategoryId; // required
  public List<TSpuSku> spuSkus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UNIQ_KEY((short)1, "uniqKey"),
    SHOP_NAME((short)2, "shopName"),
    SHOP_ID((short)3, "shopId"),
    WAREHOUSE_ID((short)4, "warehouseId"),
    WAREHOUSE_TYPE((short)5, "warehouseType"),
    SUPPLIER_ID((short)6, "supplierId"),
    IS_SPU((short)7, "isSpu"),
    GIFT_TYPE((short)8, "giftType"),
    ITEM_ID((short)9, "itemId"),
    ITEM_SIZE((short)10, "itemSize"),
    ITEM_NAME((short)11, "itemName"),
    ITEM_SALE_PRICE((short)12, "itemSalePrice"),
    DEAL_PRICE((short)13, "dealPrice"),
    SHIP_PRICE((short)14, "shipPrice"),
    COUPON_CODE((short)15, "couponCode"),
    COUPON_LIMIT_TYPE((short)16, "couponLimitType"),
    COUPON_PRICE((short)17, "couponPrice"),
    CASH_COUPON_PRICE((short)18, "cashCouponPrice"),
    REDBAG_PRICE((short)19, "redbagPrice"),
    BALANCE_PRICE((short)20, "balancePrice"),
    REDUCE_PRICE((short)21, "reducePrice"),
    TAX_PRICE((short)22, "taxPrice"),
    PAY_PRICE((short)23, "payPrice"),
    BRAND_ID((short)24, "brandId"),
    CATEGORY_ID((short)25, "categoryId"),
    PARENT_CATEGORY_ID((short)26, "parentCategoryId"),
    SPU_SKUS((short)27, "spuSkus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UNIQ_KEY
          return UNIQ_KEY;
        case 2: // SHOP_NAME
          return SHOP_NAME;
        case 3: // SHOP_ID
          return SHOP_ID;
        case 4: // WAREHOUSE_ID
          return WAREHOUSE_ID;
        case 5: // WAREHOUSE_TYPE
          return WAREHOUSE_TYPE;
        case 6: // SUPPLIER_ID
          return SUPPLIER_ID;
        case 7: // IS_SPU
          return IS_SPU;
        case 8: // GIFT_TYPE
          return GIFT_TYPE;
        case 9: // ITEM_ID
          return ITEM_ID;
        case 10: // ITEM_SIZE
          return ITEM_SIZE;
        case 11: // ITEM_NAME
          return ITEM_NAME;
        case 12: // ITEM_SALE_PRICE
          return ITEM_SALE_PRICE;
        case 13: // DEAL_PRICE
          return DEAL_PRICE;
        case 14: // SHIP_PRICE
          return SHIP_PRICE;
        case 15: // COUPON_CODE
          return COUPON_CODE;
        case 16: // COUPON_LIMIT_TYPE
          return COUPON_LIMIT_TYPE;
        case 17: // COUPON_PRICE
          return COUPON_PRICE;
        case 18: // CASH_COUPON_PRICE
          return CASH_COUPON_PRICE;
        case 19: // REDBAG_PRICE
          return REDBAG_PRICE;
        case 20: // BALANCE_PRICE
          return BALANCE_PRICE;
        case 21: // REDUCE_PRICE
          return REDUCE_PRICE;
        case 22: // TAX_PRICE
          return TAX_PRICE;
        case 23: // PAY_PRICE
          return PAY_PRICE;
        case 24: // BRAND_ID
          return BRAND_ID;
        case 25: // CATEGORY_ID
          return CATEGORY_ID;
        case 26: // PARENT_CATEGORY_ID
          return PARENT_CATEGORY_ID;
        case 27: // SPU_SKUS
          return SPU_SKUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHOPID_ISSET_ID = 0;
  private static final int __WAREHOUSEID_ISSET_ID = 1;
  private static final int __WAREHOUSETYPE_ISSET_ID = 2;
  private static final int __SUPPLIERID_ISSET_ID = 3;
  private static final int __ISSPU_ISSET_ID = 4;
  private static final int __GIFTTYPE_ISSET_ID = 5;
  private static final int __ITEMID_ISSET_ID = 6;
  private static final int __ITEMSALEPRICE_ISSET_ID = 7;
  private static final int __DEALPRICE_ISSET_ID = 8;
  private static final int __SHIPPRICE_ISSET_ID = 9;
  private static final int __COUPONLIMITTYPE_ISSET_ID = 10;
  private static final int __COUPONPRICE_ISSET_ID = 11;
  private static final int __CASHCOUPONPRICE_ISSET_ID = 12;
  private static final int __REDBAGPRICE_ISSET_ID = 13;
  private static final int __BALANCEPRICE_ISSET_ID = 14;
  private static final int __REDUCEPRICE_ISSET_ID = 15;
  private static final int __TAXPRICE_ISSET_ID = 16;
  private static final int __PAYPRICE_ISSET_ID = 17;
  private static final int __BRANDID_ISSET_ID = 18;
  private static final int __CATEGORYID_ISSET_ID = 19;
  private static final int __PARENTCATEGORYID_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UNIQ_KEY, new org.apache.thrift.meta_data.FieldMetaData("uniqKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOP_NAME, new org.apache.thrift.meta_data.FieldMetaData("shopName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WAREHOUSE_ID, new org.apache.thrift.meta_data.FieldMetaData("warehouseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WAREHOUSE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("warehouseType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPPLIER_ID, new org.apache.thrift.meta_data.FieldMetaData("supplierId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SPU, new org.apache.thrift.meta_data.FieldMetaData("isSpu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIFT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("giftType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_SIZE, new org.apache.thrift.meta_data.FieldMetaData("itemSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_SALE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("itemSalePrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("dealPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHIP_PRICE, new org.apache.thrift.meta_data.FieldMetaData("shipPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COUPON_CODE, new org.apache.thrift.meta_data.FieldMetaData("couponCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUPON_LIMIT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("couponLimitType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUPON_PRICE, new org.apache.thrift.meta_data.FieldMetaData("couponPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH_COUPON_PRICE, new org.apache.thrift.meta_data.FieldMetaData("cashCouponPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REDBAG_PRICE, new org.apache.thrift.meta_data.FieldMetaData("redbagPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BALANCE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("balancePrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REDUCE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("reducePrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TAX_PRICE, new org.apache.thrift.meta_data.FieldMetaData("taxPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAY_PRICE, new org.apache.thrift.meta_data.FieldMetaData("payPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BRAND_ID, new org.apache.thrift.meta_data.FieldMetaData("brandId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("parentCategoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPU_SKUS, new org.apache.thrift.meta_data.FieldMetaData("spuSkus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TSpuSku"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOrderItem.class, metaDataMap);
  }

  public TOrderItem() {
  }

  public TOrderItem(
    String uniqKey,
    String shopName,
    int shopId,
    int warehouseId,
    int warehouseType,
    int supplierId,
    int isSpu,
    int giftType,
    int itemId,
    String itemSize,
    String itemName,
    double itemSalePrice,
    double dealPrice,
    double shipPrice,
    String couponCode,
    int couponLimitType,
    double couponPrice,
    double cashCouponPrice,
    double redbagPrice,
    double balancePrice,
    double reducePrice,
    double taxPrice,
    double payPrice,
    int brandId,
    int categoryId,
    int parentCategoryId,
    List<TSpuSku> spuSkus)
  {
    this();
    this.uniqKey = uniqKey;
    this.shopName = shopName;
    this.shopId = shopId;
    setShopIdIsSet(true);
    this.warehouseId = warehouseId;
    setWarehouseIdIsSet(true);
    this.warehouseType = warehouseType;
    setWarehouseTypeIsSet(true);
    this.supplierId = supplierId;
    setSupplierIdIsSet(true);
    this.isSpu = isSpu;
    setIsSpuIsSet(true);
    this.giftType = giftType;
    setGiftTypeIsSet(true);
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.itemSize = itemSize;
    this.itemName = itemName;
    this.itemSalePrice = itemSalePrice;
    setItemSalePriceIsSet(true);
    this.dealPrice = dealPrice;
    setDealPriceIsSet(true);
    this.shipPrice = shipPrice;
    setShipPriceIsSet(true);
    this.couponCode = couponCode;
    this.couponLimitType = couponLimitType;
    setCouponLimitTypeIsSet(true);
    this.couponPrice = couponPrice;
    setCouponPriceIsSet(true);
    this.cashCouponPrice = cashCouponPrice;
    setCashCouponPriceIsSet(true);
    this.redbagPrice = redbagPrice;
    setRedbagPriceIsSet(true);
    this.balancePrice = balancePrice;
    setBalancePriceIsSet(true);
    this.reducePrice = reducePrice;
    setReducePriceIsSet(true);
    this.taxPrice = taxPrice;
    setTaxPriceIsSet(true);
    this.payPrice = payPrice;
    setPayPriceIsSet(true);
    this.brandId = brandId;
    setBrandIdIsSet(true);
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    this.parentCategoryId = parentCategoryId;
    setParentCategoryIdIsSet(true);
    this.spuSkus = spuSkus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOrderItem(TOrderItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUniqKey()) {
      this.uniqKey = other.uniqKey;
    }
    if (other.isSetShopName()) {
      this.shopName = other.shopName;
    }
    this.shopId = other.shopId;
    this.warehouseId = other.warehouseId;
    this.warehouseType = other.warehouseType;
    this.supplierId = other.supplierId;
    this.isSpu = other.isSpu;
    this.giftType = other.giftType;
    this.itemId = other.itemId;
    if (other.isSetItemSize()) {
      this.itemSize = other.itemSize;
    }
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    this.itemSalePrice = other.itemSalePrice;
    this.dealPrice = other.dealPrice;
    this.shipPrice = other.shipPrice;
    if (other.isSetCouponCode()) {
      this.couponCode = other.couponCode;
    }
    this.couponLimitType = other.couponLimitType;
    this.couponPrice = other.couponPrice;
    this.cashCouponPrice = other.cashCouponPrice;
    this.redbagPrice = other.redbagPrice;
    this.balancePrice = other.balancePrice;
    this.reducePrice = other.reducePrice;
    this.taxPrice = other.taxPrice;
    this.payPrice = other.payPrice;
    this.brandId = other.brandId;
    this.categoryId = other.categoryId;
    this.parentCategoryId = other.parentCategoryId;
    if (other.isSetSpuSkus()) {
      List<TSpuSku> __this__spuSkus = new ArrayList<TSpuSku>(other.spuSkus.size());
      for (TSpuSku other_element : other.spuSkus) {
        __this__spuSkus.add(other_element);
      }
      this.spuSkus = __this__spuSkus;
    }
  }

  public TOrderItem deepCopy() {
    return new TOrderItem(this);
  }

  @Override
  public void clear() {
    this.uniqKey = null;
    this.shopName = null;
    setShopIdIsSet(false);
    this.shopId = 0;
    setWarehouseIdIsSet(false);
    this.warehouseId = 0;
    setWarehouseTypeIsSet(false);
    this.warehouseType = 0;
    setSupplierIdIsSet(false);
    this.supplierId = 0;
    setIsSpuIsSet(false);
    this.isSpu = 0;
    setGiftTypeIsSet(false);
    this.giftType = 0;
    setItemIdIsSet(false);
    this.itemId = 0;
    this.itemSize = null;
    this.itemName = null;
    setItemSalePriceIsSet(false);
    this.itemSalePrice = 0.0;
    setDealPriceIsSet(false);
    this.dealPrice = 0.0;
    setShipPriceIsSet(false);
    this.shipPrice = 0.0;
    this.couponCode = null;
    setCouponLimitTypeIsSet(false);
    this.couponLimitType = 0;
    setCouponPriceIsSet(false);
    this.couponPrice = 0.0;
    setCashCouponPriceIsSet(false);
    this.cashCouponPrice = 0.0;
    setRedbagPriceIsSet(false);
    this.redbagPrice = 0.0;
    setBalancePriceIsSet(false);
    this.balancePrice = 0.0;
    setReducePriceIsSet(false);
    this.reducePrice = 0.0;
    setTaxPriceIsSet(false);
    this.taxPrice = 0.0;
    setPayPriceIsSet(false);
    this.payPrice = 0.0;
    setBrandIdIsSet(false);
    this.brandId = 0;
    setCategoryIdIsSet(false);
    this.categoryId = 0;
    setParentCategoryIdIsSet(false);
    this.parentCategoryId = 0;
    this.spuSkus = null;
  }

  public String getUniqKey() {
    return this.uniqKey;
  }

  public TOrderItem setUniqKey(String uniqKey) {
    this.uniqKey = uniqKey;
    return this;
  }

  public void unsetUniqKey() {
    this.uniqKey = null;
  }

  /** Returns true if field uniqKey is set (has been assigned a value) and false otherwise */
  public boolean isSetUniqKey() {
    return this.uniqKey != null;
  }

  public void setUniqKeyIsSet(boolean value) {
    if (!value) {
      this.uniqKey = null;
    }
  }

  public String getShopName() {
    return this.shopName;
  }

  public TOrderItem setShopName(String shopName) {
    this.shopName = shopName;
    return this;
  }

  public void unsetShopName() {
    this.shopName = null;
  }

  /** Returns true if field shopName is set (has been assigned a value) and false otherwise */
  public boolean isSetShopName() {
    return this.shopName != null;
  }

  public void setShopNameIsSet(boolean value) {
    if (!value) {
      this.shopName = null;
    }
  }

  public int getShopId() {
    return this.shopId;
  }

  public TOrderItem setShopId(int shopId) {
    this.shopId = shopId;
    setShopIdIsSet(true);
    return this;
  }

  public void unsetShopId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
  public boolean isSetShopId() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
  }

  public void setShopIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
  }

  public int getWarehouseId() {
    return this.warehouseId;
  }

  public TOrderItem setWarehouseId(int warehouseId) {
    this.warehouseId = warehouseId;
    setWarehouseIdIsSet(true);
    return this;
  }

  public void unsetWarehouseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAREHOUSEID_ISSET_ID);
  }

  /** Returns true if field warehouseId is set (has been assigned a value) and false otherwise */
  public boolean isSetWarehouseId() {
    return EncodingUtils.testBit(__isset_bitfield, __WAREHOUSEID_ISSET_ID);
  }

  public void setWarehouseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAREHOUSEID_ISSET_ID, value);
  }

  public int getWarehouseType() {
    return this.warehouseType;
  }

  public TOrderItem setWarehouseType(int warehouseType) {
    this.warehouseType = warehouseType;
    setWarehouseTypeIsSet(true);
    return this;
  }

  public void unsetWarehouseType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAREHOUSETYPE_ISSET_ID);
  }

  /** Returns true if field warehouseType is set (has been assigned a value) and false otherwise */
  public boolean isSetWarehouseType() {
    return EncodingUtils.testBit(__isset_bitfield, __WAREHOUSETYPE_ISSET_ID);
  }

  public void setWarehouseTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAREHOUSETYPE_ISSET_ID, value);
  }

  public int getSupplierId() {
    return this.supplierId;
  }

  public TOrderItem setSupplierId(int supplierId) {
    this.supplierId = supplierId;
    setSupplierIdIsSet(true);
    return this;
  }

  public void unsetSupplierId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPPLIERID_ISSET_ID);
  }

  /** Returns true if field supplierId is set (has been assigned a value) and false otherwise */
  public boolean isSetSupplierId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPPLIERID_ISSET_ID);
  }

  public void setSupplierIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPPLIERID_ISSET_ID, value);
  }

  public int getIsSpu() {
    return this.isSpu;
  }

  public TOrderItem setIsSpu(int isSpu) {
    this.isSpu = isSpu;
    setIsSpuIsSet(true);
    return this;
  }

  public void unsetIsSpu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSPU_ISSET_ID);
  }

  /** Returns true if field isSpu is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSpu() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSPU_ISSET_ID);
  }

  public void setIsSpuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSPU_ISSET_ID, value);
  }

  public int getGiftType() {
    return this.giftType;
  }

  public TOrderItem setGiftType(int giftType) {
    this.giftType = giftType;
    setGiftTypeIsSet(true);
    return this;
  }

  public void unsetGiftType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIFTTYPE_ISSET_ID);
  }

  /** Returns true if field giftType is set (has been assigned a value) and false otherwise */
  public boolean isSetGiftType() {
    return EncodingUtils.testBit(__isset_bitfield, __GIFTTYPE_ISSET_ID);
  }

  public void setGiftTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIFTTYPE_ISSET_ID, value);
  }

  public int getItemId() {
    return this.itemId;
  }

  public TOrderItem setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public String getItemSize() {
    return this.itemSize;
  }

  public TOrderItem setItemSize(String itemSize) {
    this.itemSize = itemSize;
    return this;
  }

  public void unsetItemSize() {
    this.itemSize = null;
  }

  /** Returns true if field itemSize is set (has been assigned a value) and false otherwise */
  public boolean isSetItemSize() {
    return this.itemSize != null;
  }

  public void setItemSizeIsSet(boolean value) {
    if (!value) {
      this.itemSize = null;
    }
  }

  public String getItemName() {
    return this.itemName;
  }

  public TOrderItem setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public double getItemSalePrice() {
    return this.itemSalePrice;
  }

  public TOrderItem setItemSalePrice(double itemSalePrice) {
    this.itemSalePrice = itemSalePrice;
    setItemSalePriceIsSet(true);
    return this;
  }

  public void unsetItemSalePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMSALEPRICE_ISSET_ID);
  }

  /** Returns true if field itemSalePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetItemSalePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMSALEPRICE_ISSET_ID);
  }

  public void setItemSalePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMSALEPRICE_ISSET_ID, value);
  }

  public double getDealPrice() {
    return this.dealPrice;
  }

  public TOrderItem setDealPrice(double dealPrice) {
    this.dealPrice = dealPrice;
    setDealPriceIsSet(true);
    return this;
  }

  public void unsetDealPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEALPRICE_ISSET_ID);
  }

  /** Returns true if field dealPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetDealPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __DEALPRICE_ISSET_ID);
  }

  public void setDealPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEALPRICE_ISSET_ID, value);
  }

  public double getShipPrice() {
    return this.shipPrice;
  }

  public TOrderItem setShipPrice(double shipPrice) {
    this.shipPrice = shipPrice;
    setShipPriceIsSet(true);
    return this;
  }

  public void unsetShipPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHIPPRICE_ISSET_ID);
  }

  /** Returns true if field shipPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetShipPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SHIPPRICE_ISSET_ID);
  }

  public void setShipPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHIPPRICE_ISSET_ID, value);
  }

  public String getCouponCode() {
    return this.couponCode;
  }

  public TOrderItem setCouponCode(String couponCode) {
    this.couponCode = couponCode;
    return this;
  }

  public void unsetCouponCode() {
    this.couponCode = null;
  }

  /** Returns true if field couponCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponCode() {
    return this.couponCode != null;
  }

  public void setCouponCodeIsSet(boolean value) {
    if (!value) {
      this.couponCode = null;
    }
  }

  public int getCouponLimitType() {
    return this.couponLimitType;
  }

  public TOrderItem setCouponLimitType(int couponLimitType) {
    this.couponLimitType = couponLimitType;
    setCouponLimitTypeIsSet(true);
    return this;
  }

  public void unsetCouponLimitType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUPONLIMITTYPE_ISSET_ID);
  }

  /** Returns true if field couponLimitType is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponLimitType() {
    return EncodingUtils.testBit(__isset_bitfield, __COUPONLIMITTYPE_ISSET_ID);
  }

  public void setCouponLimitTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUPONLIMITTYPE_ISSET_ID, value);
  }

  public double getCouponPrice() {
    return this.couponPrice;
  }

  public TOrderItem setCouponPrice(double couponPrice) {
    this.couponPrice = couponPrice;
    setCouponPriceIsSet(true);
    return this;
  }

  public void unsetCouponPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUPONPRICE_ISSET_ID);
  }

  /** Returns true if field couponPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __COUPONPRICE_ISSET_ID);
  }

  public void setCouponPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUPONPRICE_ISSET_ID, value);
  }

  public double getCashCouponPrice() {
    return this.cashCouponPrice;
  }

  public TOrderItem setCashCouponPrice(double cashCouponPrice) {
    this.cashCouponPrice = cashCouponPrice;
    setCashCouponPriceIsSet(true);
    return this;
  }

  public void unsetCashCouponPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHCOUPONPRICE_ISSET_ID);
  }

  /** Returns true if field cashCouponPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCashCouponPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHCOUPONPRICE_ISSET_ID);
  }

  public void setCashCouponPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHCOUPONPRICE_ISSET_ID, value);
  }

  public double getRedbagPrice() {
    return this.redbagPrice;
  }

  public TOrderItem setRedbagPrice(double redbagPrice) {
    this.redbagPrice = redbagPrice;
    setRedbagPriceIsSet(true);
    return this;
  }

  public void unsetRedbagPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDBAGPRICE_ISSET_ID);
  }

  /** Returns true if field redbagPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRedbagPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __REDBAGPRICE_ISSET_ID);
  }

  public void setRedbagPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDBAGPRICE_ISSET_ID, value);
  }

  public double getBalancePrice() {
    return this.balancePrice;
  }

  public TOrderItem setBalancePrice(double balancePrice) {
    this.balancePrice = balancePrice;
    setBalancePriceIsSet(true);
    return this;
  }

  public void unsetBalancePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCEPRICE_ISSET_ID);
  }

  /** Returns true if field balancePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetBalancePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCEPRICE_ISSET_ID);
  }

  public void setBalancePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCEPRICE_ISSET_ID, value);
  }

  public double getReducePrice() {
    return this.reducePrice;
  }

  public TOrderItem setReducePrice(double reducePrice) {
    this.reducePrice = reducePrice;
    setReducePriceIsSet(true);
    return this;
  }

  public void unsetReducePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDUCEPRICE_ISSET_ID);
  }

  /** Returns true if field reducePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetReducePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __REDUCEPRICE_ISSET_ID);
  }

  public void setReducePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDUCEPRICE_ISSET_ID, value);
  }

  public double getTaxPrice() {
    return this.taxPrice;
  }

  public TOrderItem setTaxPrice(double taxPrice) {
    this.taxPrice = taxPrice;
    setTaxPriceIsSet(true);
    return this;
  }

  public void unsetTaxPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAXPRICE_ISSET_ID);
  }

  /** Returns true if field taxPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TAXPRICE_ISSET_ID);
  }

  public void setTaxPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAXPRICE_ISSET_ID, value);
  }

  public double getPayPrice() {
    return this.payPrice;
  }

  public TOrderItem setPayPrice(double payPrice) {
    this.payPrice = payPrice;
    setPayPriceIsSet(true);
    return this;
  }

  public void unsetPayPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYPRICE_ISSET_ID);
  }

  /** Returns true if field payPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPayPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYPRICE_ISSET_ID);
  }

  public void setPayPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYPRICE_ISSET_ID, value);
  }

  public int getBrandId() {
    return this.brandId;
  }

  public TOrderItem setBrandId(int brandId) {
    this.brandId = brandId;
    setBrandIdIsSet(true);
    return this;
  }

  public void unsetBrandId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRANDID_ISSET_ID);
  }

  /** Returns true if field brandId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandId() {
    return EncodingUtils.testBit(__isset_bitfield, __BRANDID_ISSET_ID);
  }

  public void setBrandIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRANDID_ISSET_ID, value);
  }

  public int getCategoryId() {
    return this.categoryId;
  }

  public TOrderItem setCategoryId(int categoryId) {
    this.categoryId = categoryId;
    setCategoryIdIsSet(true);
    return this;
  }

  public void unsetCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
  }

  public void setCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
  }

  public int getParentCategoryId() {
    return this.parentCategoryId;
  }

  public TOrderItem setParentCategoryId(int parentCategoryId) {
    this.parentCategoryId = parentCategoryId;
    setParentCategoryIdIsSet(true);
    return this;
  }

  public void unsetParentCategoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTCATEGORYID_ISSET_ID);
  }

  /** Returns true if field parentCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentCategoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTCATEGORYID_ISSET_ID);
  }

  public void setParentCategoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTCATEGORYID_ISSET_ID, value);
  }

  public int getSpuSkusSize() {
    return (this.spuSkus == null) ? 0 : this.spuSkus.size();
  }

  public java.util.Iterator<TSpuSku> getSpuSkusIterator() {
    return (this.spuSkus == null) ? null : this.spuSkus.iterator();
  }

  public void addToSpuSkus(TSpuSku elem) {
    if (this.spuSkus == null) {
      this.spuSkus = new ArrayList<TSpuSku>();
    }
    this.spuSkus.add(elem);
  }

  public List<TSpuSku> getSpuSkus() {
    return this.spuSkus;
  }

  public TOrderItem setSpuSkus(List<TSpuSku> spuSkus) {
    this.spuSkus = spuSkus;
    return this;
  }

  public void unsetSpuSkus() {
    this.spuSkus = null;
  }

  /** Returns true if field spuSkus is set (has been assigned a value) and false otherwise */
  public boolean isSetSpuSkus() {
    return this.spuSkus != null;
  }

  public void setSpuSkusIsSet(boolean value) {
    if (!value) {
      this.spuSkus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UNIQ_KEY:
      if (value == null) {
        unsetUniqKey();
      } else {
        setUniqKey((String)value);
      }
      break;

    case SHOP_NAME:
      if (value == null) {
        unsetShopName();
      } else {
        setShopName((String)value);
      }
      break;

    case SHOP_ID:
      if (value == null) {
        unsetShopId();
      } else {
        setShopId((Integer)value);
      }
      break;

    case WAREHOUSE_ID:
      if (value == null) {
        unsetWarehouseId();
      } else {
        setWarehouseId((Integer)value);
      }
      break;

    case WAREHOUSE_TYPE:
      if (value == null) {
        unsetWarehouseType();
      } else {
        setWarehouseType((Integer)value);
      }
      break;

    case SUPPLIER_ID:
      if (value == null) {
        unsetSupplierId();
      } else {
        setSupplierId((Integer)value);
      }
      break;

    case IS_SPU:
      if (value == null) {
        unsetIsSpu();
      } else {
        setIsSpu((Integer)value);
      }
      break;

    case GIFT_TYPE:
      if (value == null) {
        unsetGiftType();
      } else {
        setGiftType((Integer)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Integer)value);
      }
      break;

    case ITEM_SIZE:
      if (value == null) {
        unsetItemSize();
      } else {
        setItemSize((String)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case ITEM_SALE_PRICE:
      if (value == null) {
        unsetItemSalePrice();
      } else {
        setItemSalePrice((Double)value);
      }
      break;

    case DEAL_PRICE:
      if (value == null) {
        unsetDealPrice();
      } else {
        setDealPrice((Double)value);
      }
      break;

    case SHIP_PRICE:
      if (value == null) {
        unsetShipPrice();
      } else {
        setShipPrice((Double)value);
      }
      break;

    case COUPON_CODE:
      if (value == null) {
        unsetCouponCode();
      } else {
        setCouponCode((String)value);
      }
      break;

    case COUPON_LIMIT_TYPE:
      if (value == null) {
        unsetCouponLimitType();
      } else {
        setCouponLimitType((Integer)value);
      }
      break;

    case COUPON_PRICE:
      if (value == null) {
        unsetCouponPrice();
      } else {
        setCouponPrice((Double)value);
      }
      break;

    case CASH_COUPON_PRICE:
      if (value == null) {
        unsetCashCouponPrice();
      } else {
        setCashCouponPrice((Double)value);
      }
      break;

    case REDBAG_PRICE:
      if (value == null) {
        unsetRedbagPrice();
      } else {
        setRedbagPrice((Double)value);
      }
      break;

    case BALANCE_PRICE:
      if (value == null) {
        unsetBalancePrice();
      } else {
        setBalancePrice((Double)value);
      }
      break;

    case REDUCE_PRICE:
      if (value == null) {
        unsetReducePrice();
      } else {
        setReducePrice((Double)value);
      }
      break;

    case TAX_PRICE:
      if (value == null) {
        unsetTaxPrice();
      } else {
        setTaxPrice((Double)value);
      }
      break;

    case PAY_PRICE:
      if (value == null) {
        unsetPayPrice();
      } else {
        setPayPrice((Double)value);
      }
      break;

    case BRAND_ID:
      if (value == null) {
        unsetBrandId();
      } else {
        setBrandId((Integer)value);
      }
      break;

    case CATEGORY_ID:
      if (value == null) {
        unsetCategoryId();
      } else {
        setCategoryId((Integer)value);
      }
      break;

    case PARENT_CATEGORY_ID:
      if (value == null) {
        unsetParentCategoryId();
      } else {
        setParentCategoryId((Integer)value);
      }
      break;

    case SPU_SKUS:
      if (value == null) {
        unsetSpuSkus();
      } else {
        setSpuSkus((List<TSpuSku>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UNIQ_KEY:
      return getUniqKey();

    case SHOP_NAME:
      return getShopName();

    case SHOP_ID:
      return getShopId();

    case WAREHOUSE_ID:
      return getWarehouseId();

    case WAREHOUSE_TYPE:
      return getWarehouseType();

    case SUPPLIER_ID:
      return getSupplierId();

    case IS_SPU:
      return getIsSpu();

    case GIFT_TYPE:
      return getGiftType();

    case ITEM_ID:
      return getItemId();

    case ITEM_SIZE:
      return getItemSize();

    case ITEM_NAME:
      return getItemName();

    case ITEM_SALE_PRICE:
      return getItemSalePrice();

    case DEAL_PRICE:
      return getDealPrice();

    case SHIP_PRICE:
      return getShipPrice();

    case COUPON_CODE:
      return getCouponCode();

    case COUPON_LIMIT_TYPE:
      return getCouponLimitType();

    case COUPON_PRICE:
      return getCouponPrice();

    case CASH_COUPON_PRICE:
      return getCashCouponPrice();

    case REDBAG_PRICE:
      return getRedbagPrice();

    case BALANCE_PRICE:
      return getBalancePrice();

    case REDUCE_PRICE:
      return getReducePrice();

    case TAX_PRICE:
      return getTaxPrice();

    case PAY_PRICE:
      return getPayPrice();

    case BRAND_ID:
      return getBrandId();

    case CATEGORY_ID:
      return getCategoryId();

    case PARENT_CATEGORY_ID:
      return getParentCategoryId();

    case SPU_SKUS:
      return getSpuSkus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UNIQ_KEY:
      return isSetUniqKey();
    case SHOP_NAME:
      return isSetShopName();
    case SHOP_ID:
      return isSetShopId();
    case WAREHOUSE_ID:
      return isSetWarehouseId();
    case WAREHOUSE_TYPE:
      return isSetWarehouseType();
    case SUPPLIER_ID:
      return isSetSupplierId();
    case IS_SPU:
      return isSetIsSpu();
    case GIFT_TYPE:
      return isSetGiftType();
    case ITEM_ID:
      return isSetItemId();
    case ITEM_SIZE:
      return isSetItemSize();
    case ITEM_NAME:
      return isSetItemName();
    case ITEM_SALE_PRICE:
      return isSetItemSalePrice();
    case DEAL_PRICE:
      return isSetDealPrice();
    case SHIP_PRICE:
      return isSetShipPrice();
    case COUPON_CODE:
      return isSetCouponCode();
    case COUPON_LIMIT_TYPE:
      return isSetCouponLimitType();
    case COUPON_PRICE:
      return isSetCouponPrice();
    case CASH_COUPON_PRICE:
      return isSetCashCouponPrice();
    case REDBAG_PRICE:
      return isSetRedbagPrice();
    case BALANCE_PRICE:
      return isSetBalancePrice();
    case REDUCE_PRICE:
      return isSetReducePrice();
    case TAX_PRICE:
      return isSetTaxPrice();
    case PAY_PRICE:
      return isSetPayPrice();
    case BRAND_ID:
      return isSetBrandId();
    case CATEGORY_ID:
      return isSetCategoryId();
    case PARENT_CATEGORY_ID:
      return isSetParentCategoryId();
    case SPU_SKUS:
      return isSetSpuSkus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TOrderItem)
      return this.equals((TOrderItem)that);
    return false;
  }

  public boolean equals(TOrderItem that) {
    if (that == null)
      return false;

    boolean this_present_uniqKey = true && this.isSetUniqKey();
    boolean that_present_uniqKey = true && that.isSetUniqKey();
    if (this_present_uniqKey || that_present_uniqKey) {
      if (!(this_present_uniqKey && that_present_uniqKey))
        return false;
      if (!this.uniqKey.equals(that.uniqKey))
        return false;
    }

    boolean this_present_shopName = true && this.isSetShopName();
    boolean that_present_shopName = true && that.isSetShopName();
    if (this_present_shopName || that_present_shopName) {
      if (!(this_present_shopName && that_present_shopName))
        return false;
      if (!this.shopName.equals(that.shopName))
        return false;
    }

    boolean this_present_shopId = true;
    boolean that_present_shopId = true;
    if (this_present_shopId || that_present_shopId) {
      if (!(this_present_shopId && that_present_shopId))
        return false;
      if (this.shopId != that.shopId)
        return false;
    }

    boolean this_present_warehouseId = true;
    boolean that_present_warehouseId = true;
    if (this_present_warehouseId || that_present_warehouseId) {
      if (!(this_present_warehouseId && that_present_warehouseId))
        return false;
      if (this.warehouseId != that.warehouseId)
        return false;
    }

    boolean this_present_warehouseType = true;
    boolean that_present_warehouseType = true;
    if (this_present_warehouseType || that_present_warehouseType) {
      if (!(this_present_warehouseType && that_present_warehouseType))
        return false;
      if (this.warehouseType != that.warehouseType)
        return false;
    }

    boolean this_present_supplierId = true;
    boolean that_present_supplierId = true;
    if (this_present_supplierId || that_present_supplierId) {
      if (!(this_present_supplierId && that_present_supplierId))
        return false;
      if (this.supplierId != that.supplierId)
        return false;
    }

    boolean this_present_isSpu = true;
    boolean that_present_isSpu = true;
    if (this_present_isSpu || that_present_isSpu) {
      if (!(this_present_isSpu && that_present_isSpu))
        return false;
      if (this.isSpu != that.isSpu)
        return false;
    }

    boolean this_present_giftType = true;
    boolean that_present_giftType = true;
    if (this_present_giftType || that_present_giftType) {
      if (!(this_present_giftType && that_present_giftType))
        return false;
      if (this.giftType != that.giftType)
        return false;
    }

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_itemSize = true && this.isSetItemSize();
    boolean that_present_itemSize = true && that.isSetItemSize();
    if (this_present_itemSize || that_present_itemSize) {
      if (!(this_present_itemSize && that_present_itemSize))
        return false;
      if (!this.itemSize.equals(that.itemSize))
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_itemSalePrice = true;
    boolean that_present_itemSalePrice = true;
    if (this_present_itemSalePrice || that_present_itemSalePrice) {
      if (!(this_present_itemSalePrice && that_present_itemSalePrice))
        return false;
      if (this.itemSalePrice != that.itemSalePrice)
        return false;
    }

    boolean this_present_dealPrice = true;
    boolean that_present_dealPrice = true;
    if (this_present_dealPrice || that_present_dealPrice) {
      if (!(this_present_dealPrice && that_present_dealPrice))
        return false;
      if (this.dealPrice != that.dealPrice)
        return false;
    }

    boolean this_present_shipPrice = true;
    boolean that_present_shipPrice = true;
    if (this_present_shipPrice || that_present_shipPrice) {
      if (!(this_present_shipPrice && that_present_shipPrice))
        return false;
      if (this.shipPrice != that.shipPrice)
        return false;
    }

    boolean this_present_couponCode = true && this.isSetCouponCode();
    boolean that_present_couponCode = true && that.isSetCouponCode();
    if (this_present_couponCode || that_present_couponCode) {
      if (!(this_present_couponCode && that_present_couponCode))
        return false;
      if (!this.couponCode.equals(that.couponCode))
        return false;
    }

    boolean this_present_couponLimitType = true;
    boolean that_present_couponLimitType = true;
    if (this_present_couponLimitType || that_present_couponLimitType) {
      if (!(this_present_couponLimitType && that_present_couponLimitType))
        return false;
      if (this.couponLimitType != that.couponLimitType)
        return false;
    }

    boolean this_present_couponPrice = true;
    boolean that_present_couponPrice = true;
    if (this_present_couponPrice || that_present_couponPrice) {
      if (!(this_present_couponPrice && that_present_couponPrice))
        return false;
      if (this.couponPrice != that.couponPrice)
        return false;
    }

    boolean this_present_cashCouponPrice = true;
    boolean that_present_cashCouponPrice = true;
    if (this_present_cashCouponPrice || that_present_cashCouponPrice) {
      if (!(this_present_cashCouponPrice && that_present_cashCouponPrice))
        return false;
      if (this.cashCouponPrice != that.cashCouponPrice)
        return false;
    }

    boolean this_present_redbagPrice = true;
    boolean that_present_redbagPrice = true;
    if (this_present_redbagPrice || that_present_redbagPrice) {
      if (!(this_present_redbagPrice && that_present_redbagPrice))
        return false;
      if (this.redbagPrice != that.redbagPrice)
        return false;
    }

    boolean this_present_balancePrice = true;
    boolean that_present_balancePrice = true;
    if (this_present_balancePrice || that_present_balancePrice) {
      if (!(this_present_balancePrice && that_present_balancePrice))
        return false;
      if (this.balancePrice != that.balancePrice)
        return false;
    }

    boolean this_present_reducePrice = true;
    boolean that_present_reducePrice = true;
    if (this_present_reducePrice || that_present_reducePrice) {
      if (!(this_present_reducePrice && that_present_reducePrice))
        return false;
      if (this.reducePrice != that.reducePrice)
        return false;
    }

    boolean this_present_taxPrice = true;
    boolean that_present_taxPrice = true;
    if (this_present_taxPrice || that_present_taxPrice) {
      if (!(this_present_taxPrice && that_present_taxPrice))
        return false;
      if (this.taxPrice != that.taxPrice)
        return false;
    }

    boolean this_present_payPrice = true;
    boolean that_present_payPrice = true;
    if (this_present_payPrice || that_present_payPrice) {
      if (!(this_present_payPrice && that_present_payPrice))
        return false;
      if (this.payPrice != that.payPrice)
        return false;
    }

    boolean this_present_brandId = true;
    boolean that_present_brandId = true;
    if (this_present_brandId || that_present_brandId) {
      if (!(this_present_brandId && that_present_brandId))
        return false;
      if (this.brandId != that.brandId)
        return false;
    }

    boolean this_present_categoryId = true;
    boolean that_present_categoryId = true;
    if (this_present_categoryId || that_present_categoryId) {
      if (!(this_present_categoryId && that_present_categoryId))
        return false;
      if (this.categoryId != that.categoryId)
        return false;
    }

    boolean this_present_parentCategoryId = true;
    boolean that_present_parentCategoryId = true;
    if (this_present_parentCategoryId || that_present_parentCategoryId) {
      if (!(this_present_parentCategoryId && that_present_parentCategoryId))
        return false;
      if (this.parentCategoryId != that.parentCategoryId)
        return false;
    }

    boolean this_present_spuSkus = true && this.isSetSpuSkus();
    boolean that_present_spuSkus = true && that.isSetSpuSkus();
    if (this_present_spuSkus || that_present_spuSkus) {
      if (!(this_present_spuSkus && that_present_spuSkus))
        return false;
      if (!this.spuSkus.equals(that.spuSkus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uniqKey = true && (isSetUniqKey());
    list.add(present_uniqKey);
    if (present_uniqKey)
      list.add(uniqKey);

    boolean present_shopName = true && (isSetShopName());
    list.add(present_shopName);
    if (present_shopName)
      list.add(shopName);

    boolean present_shopId = true;
    list.add(present_shopId);
    if (present_shopId)
      list.add(shopId);

    boolean present_warehouseId = true;
    list.add(present_warehouseId);
    if (present_warehouseId)
      list.add(warehouseId);

    boolean present_warehouseType = true;
    list.add(present_warehouseType);
    if (present_warehouseType)
      list.add(warehouseType);

    boolean present_supplierId = true;
    list.add(present_supplierId);
    if (present_supplierId)
      list.add(supplierId);

    boolean present_isSpu = true;
    list.add(present_isSpu);
    if (present_isSpu)
      list.add(isSpu);

    boolean present_giftType = true;
    list.add(present_giftType);
    if (present_giftType)
      list.add(giftType);

    boolean present_itemId = true;
    list.add(present_itemId);
    if (present_itemId)
      list.add(itemId);

    boolean present_itemSize = true && (isSetItemSize());
    list.add(present_itemSize);
    if (present_itemSize)
      list.add(itemSize);

    boolean present_itemName = true && (isSetItemName());
    list.add(present_itemName);
    if (present_itemName)
      list.add(itemName);

    boolean present_itemSalePrice = true;
    list.add(present_itemSalePrice);
    if (present_itemSalePrice)
      list.add(itemSalePrice);

    boolean present_dealPrice = true;
    list.add(present_dealPrice);
    if (present_dealPrice)
      list.add(dealPrice);

    boolean present_shipPrice = true;
    list.add(present_shipPrice);
    if (present_shipPrice)
      list.add(shipPrice);

    boolean present_couponCode = true && (isSetCouponCode());
    list.add(present_couponCode);
    if (present_couponCode)
      list.add(couponCode);

    boolean present_couponLimitType = true;
    list.add(present_couponLimitType);
    if (present_couponLimitType)
      list.add(couponLimitType);

    boolean present_couponPrice = true;
    list.add(present_couponPrice);
    if (present_couponPrice)
      list.add(couponPrice);

    boolean present_cashCouponPrice = true;
    list.add(present_cashCouponPrice);
    if (present_cashCouponPrice)
      list.add(cashCouponPrice);

    boolean present_redbagPrice = true;
    list.add(present_redbagPrice);
    if (present_redbagPrice)
      list.add(redbagPrice);

    boolean present_balancePrice = true;
    list.add(present_balancePrice);
    if (present_balancePrice)
      list.add(balancePrice);

    boolean present_reducePrice = true;
    list.add(present_reducePrice);
    if (present_reducePrice)
      list.add(reducePrice);

    boolean present_taxPrice = true;
    list.add(present_taxPrice);
    if (present_taxPrice)
      list.add(taxPrice);

    boolean present_payPrice = true;
    list.add(present_payPrice);
    if (present_payPrice)
      list.add(payPrice);

    boolean present_brandId = true;
    list.add(present_brandId);
    if (present_brandId)
      list.add(brandId);

    boolean present_categoryId = true;
    list.add(present_categoryId);
    if (present_categoryId)
      list.add(categoryId);

    boolean present_parentCategoryId = true;
    list.add(present_parentCategoryId);
    if (present_parentCategoryId)
      list.add(parentCategoryId);

    boolean present_spuSkus = true && (isSetSpuSkus());
    list.add(present_spuSkus);
    if (present_spuSkus)
      list.add(spuSkus);

    return list.hashCode();
  }

  @Override
  public int compareTo(TOrderItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUniqKey()).compareTo(other.isSetUniqKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUniqKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqKey, other.uniqKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopName()).compareTo(other.isSetShopName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopName, other.shopName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarehouseId()).compareTo(other.isSetWarehouseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarehouseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warehouseId, other.warehouseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarehouseType()).compareTo(other.isSetWarehouseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarehouseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warehouseType, other.warehouseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupplierId()).compareTo(other.isSetSupplierId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupplierId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supplierId, other.supplierId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSpu()).compareTo(other.isSetIsSpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSpu, other.isSpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiftType()).compareTo(other.isSetGiftType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiftType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giftType, other.giftType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemSize()).compareTo(other.isSetItemSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemSize, other.itemSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(other.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, other.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemSalePrice()).compareTo(other.isSetItemSalePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemSalePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemSalePrice, other.itemSalePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDealPrice()).compareTo(other.isSetDealPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealPrice, other.dealPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShipPrice()).compareTo(other.isSetShipPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShipPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shipPrice, other.shipPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouponCode()).compareTo(other.isSetCouponCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponCode, other.couponCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouponLimitType()).compareTo(other.isSetCouponLimitType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponLimitType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponLimitType, other.couponLimitType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouponPrice()).compareTo(other.isSetCouponPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponPrice, other.couponPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashCouponPrice()).compareTo(other.isSetCashCouponPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashCouponPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashCouponPrice, other.cashCouponPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedbagPrice()).compareTo(other.isSetRedbagPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedbagPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redbagPrice, other.redbagPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalancePrice()).compareTo(other.isSetBalancePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalancePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balancePrice, other.balancePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReducePrice()).compareTo(other.isSetReducePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReducePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reducePrice, other.reducePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxPrice()).compareTo(other.isSetTaxPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxPrice, other.taxPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayPrice()).compareTo(other.isSetPayPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPrice, other.payPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandId()).compareTo(other.isSetBrandId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandId, other.brandId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentCategoryId()).compareTo(other.isSetParentCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentCategoryId, other.parentCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpuSkus()).compareTo(other.isSetSpuSkus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpuSkus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spuSkus, other.spuSkus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TOrderItem(");
    boolean first = true;

    sb.append("uniqKey:");
    if (this.uniqKey == null) {
      sb.append("null");
    } else {
      sb.append(this.uniqKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopName:");
    if (this.shopName == null) {
      sb.append("null");
    } else {
      sb.append(this.shopName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopId:");
    sb.append(this.shopId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warehouseId:");
    sb.append(this.warehouseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warehouseType:");
    sb.append(this.warehouseType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("supplierId:");
    sb.append(this.supplierId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSpu:");
    sb.append(this.isSpu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giftType:");
    sb.append(this.giftType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemSize:");
    if (this.itemSize == null) {
      sb.append("null");
    } else {
      sb.append(this.itemSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemName:");
    if (this.itemName == null) {
      sb.append("null");
    } else {
      sb.append(this.itemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemSalePrice:");
    sb.append(this.itemSalePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dealPrice:");
    sb.append(this.dealPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shipPrice:");
    sb.append(this.shipPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("couponCode:");
    if (this.couponCode == null) {
      sb.append("null");
    } else {
      sb.append(this.couponCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("couponLimitType:");
    sb.append(this.couponLimitType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("couponPrice:");
    sb.append(this.couponPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashCouponPrice:");
    sb.append(this.cashCouponPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("redbagPrice:");
    sb.append(this.redbagPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("balancePrice:");
    sb.append(this.balancePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reducePrice:");
    sb.append(this.reducePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taxPrice:");
    sb.append(this.taxPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payPrice:");
    sb.append(this.payPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandId:");
    sb.append(this.brandId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryId:");
    sb.append(this.categoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentCategoryId:");
    sb.append(this.parentCategoryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spuSkus:");
    if (this.spuSkus == null) {
      sb.append("null");
    } else {
      sb.append(this.spuSkus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOrderItemStandardSchemeFactory implements SchemeFactory {
    public TOrderItemStandardScheme getScheme() {
      return new TOrderItemStandardScheme();
    }
  }

  private static class TOrderItemStandardScheme extends StandardScheme<TOrderItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TOrderItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UNIQ_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uniqKey = iprot.readString();
              struct.setUniqKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SHOP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shopName = iprot.readString();
              struct.setShopNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shopId = iprot.readI32();
              struct.setShopIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WAREHOUSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.warehouseId = iprot.readI32();
              struct.setWarehouseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WAREHOUSE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.warehouseType = iprot.readI32();
              struct.setWarehouseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUPPLIER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.supplierId = iprot.readI32();
              struct.setSupplierIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_SPU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSpu = iprot.readI32();
              struct.setIsSpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GIFT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giftType = iprot.readI32();
              struct.setGiftTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ITEM_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemSize = iprot.readString();
              struct.setItemSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ITEM_SALE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.itemSalePrice = iprot.readDouble();
              struct.setItemSalePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DEAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dealPrice = iprot.readDouble();
              struct.setDealPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHIP_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shipPrice = iprot.readDouble();
              struct.setShipPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COUPON_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.couponCode = iprot.readString();
              struct.setCouponCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COUPON_LIMIT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.couponLimitType = iprot.readI32();
              struct.setCouponLimitTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COUPON_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.couponPrice = iprot.readDouble();
              struct.setCouponPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CASH_COUPON_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashCouponPrice = iprot.readDouble();
              struct.setCashCouponPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REDBAG_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.redbagPrice = iprot.readDouble();
              struct.setRedbagPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BALANCE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balancePrice = iprot.readDouble();
              struct.setBalancePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // REDUCE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reducePrice = iprot.readDouble();
              struct.setReducePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TAX_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.taxPrice = iprot.readDouble();
              struct.setTaxPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PAY_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.payPrice = iprot.readDouble();
              struct.setPayPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BRAND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brandId = iprot.readI32();
              struct.setBrandIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryId = iprot.readI32();
              struct.setCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PARENT_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentCategoryId = iprot.readI32();
              struct.setParentCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // SPU_SKUS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.spuSkus = new ArrayList<TSpuSku>(_list48.size);
                TSpuSku _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new TSpuSku();
                  _elem49.read(iprot);
                  struct.spuSkus.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setSpuSkusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TOrderItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uniqKey != null) {
        oprot.writeFieldBegin(UNIQ_KEY_FIELD_DESC);
        oprot.writeString(struct.uniqKey);
        oprot.writeFieldEnd();
      }
      if (struct.shopName != null) {
        oprot.writeFieldBegin(SHOP_NAME_FIELD_DESC);
        oprot.writeString(struct.shopName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
      oprot.writeI32(struct.shopId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WAREHOUSE_ID_FIELD_DESC);
      oprot.writeI32(struct.warehouseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WAREHOUSE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.warehouseType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUPPLIER_ID_FIELD_DESC);
      oprot.writeI32(struct.supplierId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SPU_FIELD_DESC);
      oprot.writeI32(struct.isSpu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIFT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.giftType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      if (struct.itemSize != null) {
        oprot.writeFieldBegin(ITEM_SIZE_FIELD_DESC);
        oprot.writeString(struct.itemSize);
        oprot.writeFieldEnd();
      }
      if (struct.itemName != null) {
        oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.itemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ITEM_SALE_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.itemSalePrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.dealPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHIP_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.shipPrice);
      oprot.writeFieldEnd();
      if (struct.couponCode != null) {
        oprot.writeFieldBegin(COUPON_CODE_FIELD_DESC);
        oprot.writeString(struct.couponCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUPON_LIMIT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.couponLimitType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUPON_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.couponPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASH_COUPON_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.cashCouponPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REDBAG_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.redbagPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BALANCE_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.balancePrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REDUCE_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.reducePrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TAX_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.taxPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.payPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRAND_ID_FIELD_DESC);
      oprot.writeI32(struct.brandId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.categoryId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.parentCategoryId);
      oprot.writeFieldEnd();
      if (struct.spuSkus != null) {
        oprot.writeFieldBegin(SPU_SKUS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spuSkus.size()));
          for (TSpuSku _iter51 : struct.spuSkus)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOrderItemTupleSchemeFactory implements SchemeFactory {
    public TOrderItemTupleScheme getScheme() {
      return new TOrderItemTupleScheme();
    }
  }

  private static class TOrderItemTupleScheme extends TupleScheme<TOrderItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOrderItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUniqKey()) {
        optionals.set(0);
      }
      if (struct.isSetShopName()) {
        optionals.set(1);
      }
      if (struct.isSetShopId()) {
        optionals.set(2);
      }
      if (struct.isSetWarehouseId()) {
        optionals.set(3);
      }
      if (struct.isSetWarehouseType()) {
        optionals.set(4);
      }
      if (struct.isSetSupplierId()) {
        optionals.set(5);
      }
      if (struct.isSetIsSpu()) {
        optionals.set(6);
      }
      if (struct.isSetGiftType()) {
        optionals.set(7);
      }
      if (struct.isSetItemId()) {
        optionals.set(8);
      }
      if (struct.isSetItemSize()) {
        optionals.set(9);
      }
      if (struct.isSetItemName()) {
        optionals.set(10);
      }
      if (struct.isSetItemSalePrice()) {
        optionals.set(11);
      }
      if (struct.isSetDealPrice()) {
        optionals.set(12);
      }
      if (struct.isSetShipPrice()) {
        optionals.set(13);
      }
      if (struct.isSetCouponCode()) {
        optionals.set(14);
      }
      if (struct.isSetCouponLimitType()) {
        optionals.set(15);
      }
      if (struct.isSetCouponPrice()) {
        optionals.set(16);
      }
      if (struct.isSetCashCouponPrice()) {
        optionals.set(17);
      }
      if (struct.isSetRedbagPrice()) {
        optionals.set(18);
      }
      if (struct.isSetBalancePrice()) {
        optionals.set(19);
      }
      if (struct.isSetReducePrice()) {
        optionals.set(20);
      }
      if (struct.isSetTaxPrice()) {
        optionals.set(21);
      }
      if (struct.isSetPayPrice()) {
        optionals.set(22);
      }
      if (struct.isSetBrandId()) {
        optionals.set(23);
      }
      if (struct.isSetCategoryId()) {
        optionals.set(24);
      }
      if (struct.isSetParentCategoryId()) {
        optionals.set(25);
      }
      if (struct.isSetSpuSkus()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetUniqKey()) {
        oprot.writeString(struct.uniqKey);
      }
      if (struct.isSetShopName()) {
        oprot.writeString(struct.shopName);
      }
      if (struct.isSetShopId()) {
        oprot.writeI32(struct.shopId);
      }
      if (struct.isSetWarehouseId()) {
        oprot.writeI32(struct.warehouseId);
      }
      if (struct.isSetWarehouseType()) {
        oprot.writeI32(struct.warehouseType);
      }
      if (struct.isSetSupplierId()) {
        oprot.writeI32(struct.supplierId);
      }
      if (struct.isSetIsSpu()) {
        oprot.writeI32(struct.isSpu);
      }
      if (struct.isSetGiftType()) {
        oprot.writeI32(struct.giftType);
      }
      if (struct.isSetItemId()) {
        oprot.writeI32(struct.itemId);
      }
      if (struct.isSetItemSize()) {
        oprot.writeString(struct.itemSize);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
      if (struct.isSetItemSalePrice()) {
        oprot.writeDouble(struct.itemSalePrice);
      }
      if (struct.isSetDealPrice()) {
        oprot.writeDouble(struct.dealPrice);
      }
      if (struct.isSetShipPrice()) {
        oprot.writeDouble(struct.shipPrice);
      }
      if (struct.isSetCouponCode()) {
        oprot.writeString(struct.couponCode);
      }
      if (struct.isSetCouponLimitType()) {
        oprot.writeI32(struct.couponLimitType);
      }
      if (struct.isSetCouponPrice()) {
        oprot.writeDouble(struct.couponPrice);
      }
      if (struct.isSetCashCouponPrice()) {
        oprot.writeDouble(struct.cashCouponPrice);
      }
      if (struct.isSetRedbagPrice()) {
        oprot.writeDouble(struct.redbagPrice);
      }
      if (struct.isSetBalancePrice()) {
        oprot.writeDouble(struct.balancePrice);
      }
      if (struct.isSetReducePrice()) {
        oprot.writeDouble(struct.reducePrice);
      }
      if (struct.isSetTaxPrice()) {
        oprot.writeDouble(struct.taxPrice);
      }
      if (struct.isSetPayPrice()) {
        oprot.writeDouble(struct.payPrice);
      }
      if (struct.isSetBrandId()) {
        oprot.writeI32(struct.brandId);
      }
      if (struct.isSetCategoryId()) {
        oprot.writeI32(struct.categoryId);
      }
      if (struct.isSetParentCategoryId()) {
        oprot.writeI32(struct.parentCategoryId);
      }
      if (struct.isSetSpuSkus()) {
        {
          oprot.writeI32(struct.spuSkus.size());
          for (TSpuSku _iter52 : struct.spuSkus)
          {
            _iter52.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOrderItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.uniqKey = iprot.readString();
        struct.setUniqKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.shopName = iprot.readString();
        struct.setShopNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.shopId = iprot.readI32();
        struct.setShopIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.warehouseId = iprot.readI32();
        struct.setWarehouseIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.warehouseType = iprot.readI32();
        struct.setWarehouseTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.supplierId = iprot.readI32();
        struct.setSupplierIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isSpu = iprot.readI32();
        struct.setIsSpuIsSet(true);
      }
      if (incoming.get(7)) {
        struct.giftType = iprot.readI32();
        struct.setGiftTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.itemId = iprot.readI32();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.itemSize = iprot.readString();
        struct.setItemSizeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.itemSalePrice = iprot.readDouble();
        struct.setItemSalePriceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dealPrice = iprot.readDouble();
        struct.setDealPriceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.shipPrice = iprot.readDouble();
        struct.setShipPriceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.couponCode = iprot.readString();
        struct.setCouponCodeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.couponLimitType = iprot.readI32();
        struct.setCouponLimitTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.couponPrice = iprot.readDouble();
        struct.setCouponPriceIsSet(true);
      }
      if (incoming.get(17)) {
        struct.cashCouponPrice = iprot.readDouble();
        struct.setCashCouponPriceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.redbagPrice = iprot.readDouble();
        struct.setRedbagPriceIsSet(true);
      }
      if (incoming.get(19)) {
        struct.balancePrice = iprot.readDouble();
        struct.setBalancePriceIsSet(true);
      }
      if (incoming.get(20)) {
        struct.reducePrice = iprot.readDouble();
        struct.setReducePriceIsSet(true);
      }
      if (incoming.get(21)) {
        struct.taxPrice = iprot.readDouble();
        struct.setTaxPriceIsSet(true);
      }
      if (incoming.get(22)) {
        struct.payPrice = iprot.readDouble();
        struct.setPayPriceIsSet(true);
      }
      if (incoming.get(23)) {
        struct.brandId = iprot.readI32();
        struct.setBrandIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.categoryId = iprot.readI32();
        struct.setCategoryIdIsSet(true);
      }
      if (incoming.get(25)) {
        struct.parentCategoryId = iprot.readI32();
        struct.setParentCategoryIdIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spuSkus = new ArrayList<TSpuSku>(_list53.size);
          TSpuSku _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new TSpuSku();
            _elem54.read(iprot);
            struct.spuSkus.add(_elem54);
          }
        }
        struct.setSpuSkusIsSet(true);
      }
    }
  }

}

