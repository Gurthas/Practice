/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.Coupon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-18")
public class TParamsPreUseCoupon implements org.apache.thrift.TBase<TParamsPreUseCoupon, TParamsPreUseCoupon._Fields>, java.io.Serializable, Cloneable, Comparable<TParamsPreUseCoupon> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TParamsPreUseCoupon");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CK_SUPERIOR_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ckSuperiorOrderCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COUPON_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("couponCodes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OP_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("opUser", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TParamsPreUseCouponStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TParamsPreUseCouponTupleSchemeFactory());
  }

  public int uid; // required
  public String ckSuperiorOrderCode; // required
  public List<String> couponCodes; // required
  public String opUser; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    CK_SUPERIOR_ORDER_CODE((short)2, "ckSuperiorOrderCode"),
    COUPON_CODES((short)3, "couponCodes"),
    OP_USER((short)4, "opUser");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // CK_SUPERIOR_ORDER_CODE
          return CK_SUPERIOR_ORDER_CODE;
        case 3: // COUPON_CODES
          return COUPON_CODES;
        case 4: // OP_USER
          return OP_USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CK_SUPERIOR_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("ckSuperiorOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUPON_CODES, new org.apache.thrift.meta_data.FieldMetaData("couponCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OP_USER, new org.apache.thrift.meta_data.FieldMetaData("opUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TParamsPreUseCoupon.class, metaDataMap);
  }

  public TParamsPreUseCoupon() {
  }

  public TParamsPreUseCoupon(
    int uid,
    String ckSuperiorOrderCode,
    List<String> couponCodes,
    String opUser)
  {
    this();
    this.uid = uid;
    setUidIsSet(true);
    this.ckSuperiorOrderCode = ckSuperiorOrderCode;
    this.couponCodes = couponCodes;
    this.opUser = opUser;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TParamsPreUseCoupon(TParamsPreUseCoupon other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uid = other.uid;
    if (other.isSetCkSuperiorOrderCode()) {
      this.ckSuperiorOrderCode = other.ckSuperiorOrderCode;
    }
    if (other.isSetCouponCodes()) {
      List<String> __this__couponCodes = new ArrayList<String>(other.couponCodes);
      this.couponCodes = __this__couponCodes;
    }
    if (other.isSetOpUser()) {
      this.opUser = other.opUser;
    }
  }

  public TParamsPreUseCoupon deepCopy() {
    return new TParamsPreUseCoupon(this);
  }

  @Override
  public void clear() {
    setUidIsSet(false);
    this.uid = 0;
    this.ckSuperiorOrderCode = null;
    this.couponCodes = null;
    this.opUser = null;
  }

  public int getUid() {
    return this.uid;
  }

  public TParamsPreUseCoupon setUid(int uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public String getCkSuperiorOrderCode() {
    return this.ckSuperiorOrderCode;
  }

  public TParamsPreUseCoupon setCkSuperiorOrderCode(String ckSuperiorOrderCode) {
    this.ckSuperiorOrderCode = ckSuperiorOrderCode;
    return this;
  }

  public void unsetCkSuperiorOrderCode() {
    this.ckSuperiorOrderCode = null;
  }

  /** Returns true if field ckSuperiorOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCkSuperiorOrderCode() {
    return this.ckSuperiorOrderCode != null;
  }

  public void setCkSuperiorOrderCodeIsSet(boolean value) {
    if (!value) {
      this.ckSuperiorOrderCode = null;
    }
  }

  public int getCouponCodesSize() {
    return (this.couponCodes == null) ? 0 : this.couponCodes.size();
  }

  public java.util.Iterator<String> getCouponCodesIterator() {
    return (this.couponCodes == null) ? null : this.couponCodes.iterator();
  }

  public void addToCouponCodes(String elem) {
    if (this.couponCodes == null) {
      this.couponCodes = new ArrayList<String>();
    }
    this.couponCodes.add(elem);
  }

  public List<String> getCouponCodes() {
    return this.couponCodes;
  }

  public TParamsPreUseCoupon setCouponCodes(List<String> couponCodes) {
    this.couponCodes = couponCodes;
    return this;
  }

  public void unsetCouponCodes() {
    this.couponCodes = null;
  }

  /** Returns true if field couponCodes is set (has been assigned a value) and false otherwise */
  public boolean isSetCouponCodes() {
    return this.couponCodes != null;
  }

  public void setCouponCodesIsSet(boolean value) {
    if (!value) {
      this.couponCodes = null;
    }
  }

  public String getOpUser() {
    return this.opUser;
  }

  public TParamsPreUseCoupon setOpUser(String opUser) {
    this.opUser = opUser;
    return this;
  }

  public void unsetOpUser() {
    this.opUser = null;
  }

  /** Returns true if field opUser is set (has been assigned a value) and false otherwise */
  public boolean isSetOpUser() {
    return this.opUser != null;
  }

  public void setOpUserIsSet(boolean value) {
    if (!value) {
      this.opUser = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Integer)value);
      }
      break;

    case CK_SUPERIOR_ORDER_CODE:
      if (value == null) {
        unsetCkSuperiorOrderCode();
      } else {
        setCkSuperiorOrderCode((String)value);
      }
      break;

    case COUPON_CODES:
      if (value == null) {
        unsetCouponCodes();
      } else {
        setCouponCodes((List<String>)value);
      }
      break;

    case OP_USER:
      if (value == null) {
        unsetOpUser();
      } else {
        setOpUser((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case CK_SUPERIOR_ORDER_CODE:
      return getCkSuperiorOrderCode();

    case COUPON_CODES:
      return getCouponCodes();

    case OP_USER:
      return getOpUser();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case CK_SUPERIOR_ORDER_CODE:
      return isSetCkSuperiorOrderCode();
    case COUPON_CODES:
      return isSetCouponCodes();
    case OP_USER:
      return isSetOpUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TParamsPreUseCoupon)
      return this.equals((TParamsPreUseCoupon)that);
    return false;
  }

  public boolean equals(TParamsPreUseCoupon that) {
    if (that == null)
      return false;

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_ckSuperiorOrderCode = true && this.isSetCkSuperiorOrderCode();
    boolean that_present_ckSuperiorOrderCode = true && that.isSetCkSuperiorOrderCode();
    if (this_present_ckSuperiorOrderCode || that_present_ckSuperiorOrderCode) {
      if (!(this_present_ckSuperiorOrderCode && that_present_ckSuperiorOrderCode))
        return false;
      if (!this.ckSuperiorOrderCode.equals(that.ckSuperiorOrderCode))
        return false;
    }

    boolean this_present_couponCodes = true && this.isSetCouponCodes();
    boolean that_present_couponCodes = true && that.isSetCouponCodes();
    if (this_present_couponCodes || that_present_couponCodes) {
      if (!(this_present_couponCodes && that_present_couponCodes))
        return false;
      if (!this.couponCodes.equals(that.couponCodes))
        return false;
    }

    boolean this_present_opUser = true && this.isSetOpUser();
    boolean that_present_opUser = true && that.isSetOpUser();
    if (this_present_opUser || that_present_opUser) {
      if (!(this_present_opUser && that_present_opUser))
        return false;
      if (!this.opUser.equals(that.opUser))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uid = true;
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_ckSuperiorOrderCode = true && (isSetCkSuperiorOrderCode());
    list.add(present_ckSuperiorOrderCode);
    if (present_ckSuperiorOrderCode)
      list.add(ckSuperiorOrderCode);

    boolean present_couponCodes = true && (isSetCouponCodes());
    list.add(present_couponCodes);
    if (present_couponCodes)
      list.add(couponCodes);

    boolean present_opUser = true && (isSetOpUser());
    list.add(present_opUser);
    if (present_opUser)
      list.add(opUser);

    return list.hashCode();
  }

  @Override
  public int compareTo(TParamsPreUseCoupon other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCkSuperiorOrderCode()).compareTo(other.isSetCkSuperiorOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCkSuperiorOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ckSuperiorOrderCode, other.ckSuperiorOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCouponCodes()).compareTo(other.isSetCouponCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCouponCodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponCodes, other.couponCodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpUser()).compareTo(other.isSetOpUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opUser, other.opUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TParamsPreUseCoupon(");
    boolean first = true;

    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ckSuperiorOrderCode:");
    if (this.ckSuperiorOrderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.ckSuperiorOrderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("couponCodes:");
    if (this.couponCodes == null) {
      sb.append("null");
    } else {
      sb.append(this.couponCodes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opUser:");
    if (this.opUser == null) {
      sb.append("null");
    } else {
      sb.append(this.opUser);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TParamsPreUseCouponStandardSchemeFactory implements SchemeFactory {
    public TParamsPreUseCouponStandardScheme getScheme() {
      return new TParamsPreUseCouponStandardScheme();
    }
  }

  private static class TParamsPreUseCouponStandardScheme extends StandardScheme<TParamsPreUseCoupon> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TParamsPreUseCoupon struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uid = iprot.readI32();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CK_SUPERIOR_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ckSuperiorOrderCode = iprot.readString();
              struct.setCkSuperiorOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUPON_CODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.couponCodes = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.couponCodes.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCouponCodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OP_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opUser = iprot.readString();
              struct.setOpUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TParamsPreUseCoupon struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(struct.uid);
      oprot.writeFieldEnd();
      if (struct.ckSuperiorOrderCode != null) {
        oprot.writeFieldBegin(CK_SUPERIOR_ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.ckSuperiorOrderCode);
        oprot.writeFieldEnd();
      }
      if (struct.couponCodes != null) {
        oprot.writeFieldBegin(COUPON_CODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.couponCodes.size()));
          for (String _iter3 : struct.couponCodes)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.opUser != null) {
        oprot.writeFieldBegin(OP_USER_FIELD_DESC);
        oprot.writeString(struct.opUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TParamsPreUseCouponTupleSchemeFactory implements SchemeFactory {
    public TParamsPreUseCouponTupleScheme getScheme() {
      return new TParamsPreUseCouponTupleScheme();
    }
  }

  private static class TParamsPreUseCouponTupleScheme extends TupleScheme<TParamsPreUseCoupon> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TParamsPreUseCoupon struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetCkSuperiorOrderCode()) {
        optionals.set(1);
      }
      if (struct.isSetCouponCodes()) {
        optionals.set(2);
      }
      if (struct.isSetOpUser()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUid()) {
        oprot.writeI32(struct.uid);
      }
      if (struct.isSetCkSuperiorOrderCode()) {
        oprot.writeString(struct.ckSuperiorOrderCode);
      }
      if (struct.isSetCouponCodes()) {
        {
          oprot.writeI32(struct.couponCodes.size());
          for (String _iter4 : struct.couponCodes)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetOpUser()) {
        oprot.writeString(struct.opUser);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TParamsPreUseCoupon struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.uid = iprot.readI32();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ckSuperiorOrderCode = iprot.readString();
        struct.setCkSuperiorOrderCodeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.couponCodes = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.couponCodes.add(_elem6);
          }
        }
        struct.setCouponCodesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.opUser = iprot.readString();
        struct.setOpUserIsSet(true);
      }
    }
  }

}

