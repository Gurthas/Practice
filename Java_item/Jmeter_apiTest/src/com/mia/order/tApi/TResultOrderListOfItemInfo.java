/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.mia.order.tApi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-16")
public class TResultOrderListOfItemInfo
		implements org.apache.thrift.TBase<TResultOrderListOfItemInfo, TResultOrderListOfItemInfo._Fields>,
		java.io.Serializable, Cloneable, Comparable<TResultOrderListOfItemInfo> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TResultOrderListOfItemInfo");

	private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"itemId", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField PIC_FIELD_DESC = new org.apache.thrift.protocol.TField("pic",
			org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"name", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"size", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"quantity", org.apache.thrift.protocol.TType.I32, (short) 5);
	private static final org.apache.thrift.protocol.TField SALE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"salePrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 6);
	private static final org.apache.thrift.protocol.TField IS_GIFT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isGift", org.apache.thrift.protocol.TType.I32, (short) 7);
	private static final org.apache.thrift.protocol.TField IS_SPU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isSpu", org.apache.thrift.protocol.TType.I32, (short) 8);
	private static final org.apache.thrift.protocol.TField IS_GROUPON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isGroupon", org.apache.thrift.protocol.TType.I32, (short) 9);
	private static final org.apache.thrift.protocol.TField PAY_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payPrice", org.apache.thrift.protocol.TType.DOUBLE, (short) 10);
	private static final org.apache.thrift.protocol.TField ITEM_RETURN_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"itemReturnTitle", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new TResultOrderListOfItemInfoStandardSchemeFactory());
		schemes.put(TupleScheme.class, new TResultOrderListOfItemInfoTupleSchemeFactory());
	}

	public int itemId; // required
	public String pic; // required
	public String name; // required
	public String size; // required
	public int quantity; // required
	public double salePrice; // required
	public int isGift; // required
	public int isSpu; // required
	public int isGroupon; // required
	public double payPrice; // required
	public String itemReturnTitle; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ITEM_ID((short) 1, "itemId"), PIC((short) 2, "pic"), NAME((short) 3, "name"), SIZE((short) 4, "size"), QUANTITY(
				(short) 5, "quantity"), SALE_PRICE((short) 6, "salePrice"), IS_GIFT((short) 7,
						"isGift"), IS_SPU((short) 8, "isSpu"), IS_GROUPON((short) 9, "isGroupon"), PAY_PRICE((short) 10,
								"payPrice"), ITEM_RETURN_TITLE((short) 11, "itemReturnTitle");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ITEM_ID
				return ITEM_ID;
			case 2: // PIC
				return PIC;
			case 3: // NAME
				return NAME;
			case 4: // SIZE
				return SIZE;
			case 5: // QUANTITY
				return QUANTITY;
			case 6: // SALE_PRICE
				return SALE_PRICE;
			case 7: // IS_GIFT
				return IS_GIFT;
			case 8: // IS_SPU
				return IS_SPU;
			case 9: // IS_GROUPON
				return IS_GROUPON;
			case 10: // PAY_PRICE
				return PAY_PRICE;
			case 11: // ITEM_RETURN_TITLE
				return ITEM_RETURN_TITLE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ITEMID_ISSET_ID = 0;
	private static final int __QUANTITY_ISSET_ID = 1;
	private static final int __SALEPRICE_ISSET_ID = 2;
	private static final int __ISGIFT_ISSET_ID = 3;
	private static final int __ISSPU_ISSET_ID = 4;
	private static final int __ISGROUPON_ISSET_ID = 5;
	private static final int __PAYPRICE_ISSET_ID = 6;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ITEM_ID,
				new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PIC,
				new org.apache.thrift.meta_data.FieldMetaData("pic", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NAME,
				new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SIZE,
				new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.QUANTITY,
				new org.apache.thrift.meta_data.FieldMetaData("quantity",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SALE_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("salePrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.IS_GIFT,
				new org.apache.thrift.meta_data.FieldMetaData("isGift", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_SPU,
				new org.apache.thrift.meta_data.FieldMetaData("isSpu", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_GROUPON,
				new org.apache.thrift.meta_data.FieldMetaData("isGroupon",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PAY_PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("payPrice",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.ITEM_RETURN_TITLE,
				new org.apache.thrift.meta_data.FieldMetaData("itemReturnTitle",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResultOrderListOfItemInfo.class, metaDataMap);
	}

	public TResultOrderListOfItemInfo() {
	}

	public TResultOrderListOfItemInfo(int itemId, String pic, String name, String size, int quantity, double salePrice,
			int isGift, int isSpu, int isGroupon, double payPrice, String itemReturnTitle) {
		this();
		this.itemId = itemId;
		setItemIdIsSet(true);
		this.pic = pic;
		this.name = name;
		this.size = size;
		this.quantity = quantity;
		setQuantityIsSet(true);
		this.salePrice = salePrice;
		setSalePriceIsSet(true);
		this.isGift = isGift;
		setIsGiftIsSet(true);
		this.isSpu = isSpu;
		setIsSpuIsSet(true);
		this.isGroupon = isGroupon;
		setIsGrouponIsSet(true);
		this.payPrice = payPrice;
		setPayPriceIsSet(true);
		this.itemReturnTitle = itemReturnTitle;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TResultOrderListOfItemInfo(TResultOrderListOfItemInfo other) {
		__isset_bitfield = other.__isset_bitfield;
		this.itemId = other.itemId;
		if (other.isSetPic()) {
			this.pic = other.pic;
		}
		if (other.isSetName()) {
			this.name = other.name;
		}
		if (other.isSetSize()) {
			this.size = other.size;
		}
		this.quantity = other.quantity;
		this.salePrice = other.salePrice;
		this.isGift = other.isGift;
		this.isSpu = other.isSpu;
		this.isGroupon = other.isGroupon;
		this.payPrice = other.payPrice;
		if (other.isSetItemReturnTitle()) {
			this.itemReturnTitle = other.itemReturnTitle;
		}
	}

	public TResultOrderListOfItemInfo deepCopy() {
		return new TResultOrderListOfItemInfo(this);
	}

	@Override
	public void clear() {
		setItemIdIsSet(false);
		this.itemId = 0;
		this.pic = null;
		this.name = null;
		this.size = null;
		setQuantityIsSet(false);
		this.quantity = 0;
		setSalePriceIsSet(false);
		this.salePrice = 0.0;
		setIsGiftIsSet(false);
		this.isGift = 0;
		setIsSpuIsSet(false);
		this.isSpu = 0;
		setIsGrouponIsSet(false);
		this.isGroupon = 0;
		setPayPriceIsSet(false);
		this.payPrice = 0.0;
		this.itemReturnTitle = null;
	}

	public int getItemId() {
		return this.itemId;
	}

	public TResultOrderListOfItemInfo setItemId(int itemId) {
		this.itemId = itemId;
		setItemIdIsSet(true);
		return this;
	}

	public void unsetItemId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
	}

	/**
	 * Returns true if field itemId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetItemId() {
		return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
	}

	public void setItemIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
	}

	public String getPic() {
		return this.pic;
	}

	public TResultOrderListOfItemInfo setPic(String pic) {
		this.pic = pic;
		return this;
	}

	public void unsetPic() {
		this.pic = null;
	}

	/**
	 * Returns true if field pic is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPic() {
		return this.pic != null;
	}

	public void setPicIsSet(boolean value) {
		if (!value) {
			this.pic = null;
		}
	}

	public String getName() {
		return this.name;
	}

	public TResultOrderListOfItemInfo setName(String name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	/**
	 * Returns true if field name is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	public String getSize() {
		return this.size;
	}

	public TResultOrderListOfItemInfo setSize(String size) {
		this.size = size;
		return this;
	}

	public void unsetSize() {
		this.size = null;
	}

	/**
	 * Returns true if field size is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSize() {
		return this.size != null;
	}

	public void setSizeIsSet(boolean value) {
		if (!value) {
			this.size = null;
		}
	}

	public int getQuantity() {
		return this.quantity;
	}

	public TResultOrderListOfItemInfo setQuantity(int quantity) {
		this.quantity = quantity;
		setQuantityIsSet(true);
		return this;
	}

	public void unsetQuantity() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
	}

	/**
	 * Returns true if field quantity is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetQuantity() {
		return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
	}

	public void setQuantityIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
	}

	public double getSalePrice() {
		return this.salePrice;
	}

	public TResultOrderListOfItemInfo setSalePrice(double salePrice) {
		this.salePrice = salePrice;
		setSalePriceIsSet(true);
		return this;
	}

	public void unsetSalePrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field salePrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSalePrice() {
		return EncodingUtils.testBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
	}

	public void setSalePriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALEPRICE_ISSET_ID, value);
	}

	public int getIsGift() {
		return this.isGift;
	}

	public TResultOrderListOfItemInfo setIsGift(int isGift) {
		this.isGift = isGift;
		setIsGiftIsSet(true);
		return this;
	}

	public void unsetIsGift() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGIFT_ISSET_ID);
	}

	/**
	 * Returns true if field isGift is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsGift() {
		return EncodingUtils.testBit(__isset_bitfield, __ISGIFT_ISSET_ID);
	}

	public void setIsGiftIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGIFT_ISSET_ID, value);
	}

	public int getIsSpu() {
		return this.isSpu;
	}

	public TResultOrderListOfItemInfo setIsSpu(int isSpu) {
		this.isSpu = isSpu;
		setIsSpuIsSet(true);
		return this;
	}

	public void unsetIsSpu() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSPU_ISSET_ID);
	}

	/**
	 * Returns true if field isSpu is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsSpu() {
		return EncodingUtils.testBit(__isset_bitfield, __ISSPU_ISSET_ID);
	}

	public void setIsSpuIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSPU_ISSET_ID, value);
	}

	public int getIsGroupon() {
		return this.isGroupon;
	}

	public TResultOrderListOfItemInfo setIsGroupon(int isGroupon) {
		this.isGroupon = isGroupon;
		setIsGrouponIsSet(true);
		return this;
	}

	public void unsetIsGroupon() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGROUPON_ISSET_ID);
	}

	/**
	 * Returns true if field isGroupon is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetIsGroupon() {
		return EncodingUtils.testBit(__isset_bitfield, __ISGROUPON_ISSET_ID);
	}

	public void setIsGrouponIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGROUPON_ISSET_ID, value);
	}

	public double getPayPrice() {
		return this.payPrice;
	}

	public TResultOrderListOfItemInfo setPayPrice(double payPrice) {
		this.payPrice = payPrice;
		setPayPriceIsSet(true);
		return this;
	}

	public void unsetPayPrice() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYPRICE_ISSET_ID);
	}

	/**
	 * Returns true if field payPrice is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPayPrice() {
		return EncodingUtils.testBit(__isset_bitfield, __PAYPRICE_ISSET_ID);
	}

	public void setPayPriceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYPRICE_ISSET_ID, value);
	}

	public String getItemReturnTitle() {
		return this.itemReturnTitle;
	}

	public TResultOrderListOfItemInfo setItemReturnTitle(String itemReturnTitle) {
		this.itemReturnTitle = itemReturnTitle;
		return this;
	}

	public void unsetItemReturnTitle() {
		this.itemReturnTitle = null;
	}

	/**
	 * Returns true if field itemReturnTitle is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSetItemReturnTitle() {
		return this.itemReturnTitle != null;
	}

	public void setItemReturnTitleIsSet(boolean value) {
		if (!value) {
			this.itemReturnTitle = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ITEM_ID:
			if (value == null) {
				unsetItemId();
			} else {
				setItemId((Integer) value);
			}
			break;

		case PIC:
			if (value == null) {
				unsetPic();
			} else {
				setPic((String) value);
			}
			break;

		case NAME:
			if (value == null) {
				unsetName();
			} else {
				setName((String) value);
			}
			break;

		case SIZE:
			if (value == null) {
				unsetSize();
			} else {
				setSize((String) value);
			}
			break;

		case QUANTITY:
			if (value == null) {
				unsetQuantity();
			} else {
				setQuantity((Integer) value);
			}
			break;

		case SALE_PRICE:
			if (value == null) {
				unsetSalePrice();
			} else {
				setSalePrice((Double) value);
			}
			break;

		case IS_GIFT:
			if (value == null) {
				unsetIsGift();
			} else {
				setIsGift((Integer) value);
			}
			break;

		case IS_SPU:
			if (value == null) {
				unsetIsSpu();
			} else {
				setIsSpu((Integer) value);
			}
			break;

		case IS_GROUPON:
			if (value == null) {
				unsetIsGroupon();
			} else {
				setIsGroupon((Integer) value);
			}
			break;

		case PAY_PRICE:
			if (value == null) {
				unsetPayPrice();
			} else {
				setPayPrice((Double) value);
			}
			break;

		case ITEM_RETURN_TITLE:
			if (value == null) {
				unsetItemReturnTitle();
			} else {
				setItemReturnTitle((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ITEM_ID:
			return getItemId();

		case PIC:
			return getPic();

		case NAME:
			return getName();

		case SIZE:
			return getSize();

		case QUANTITY:
			return getQuantity();

		case SALE_PRICE:
			return getSalePrice();

		case IS_GIFT:
			return getIsGift();

		case IS_SPU:
			return getIsSpu();

		case IS_GROUPON:
			return getIsGroupon();

		case PAY_PRICE:
			return getPayPrice();

		case ITEM_RETURN_TITLE:
			return getItemReturnTitle();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ITEM_ID:
			return isSetItemId();
		case PIC:
			return isSetPic();
		case NAME:
			return isSetName();
		case SIZE:
			return isSetSize();
		case QUANTITY:
			return isSetQuantity();
		case SALE_PRICE:
			return isSetSalePrice();
		case IS_GIFT:
			return isSetIsGift();
		case IS_SPU:
			return isSetIsSpu();
		case IS_GROUPON:
			return isSetIsGroupon();
		case PAY_PRICE:
			return isSetPayPrice();
		case ITEM_RETURN_TITLE:
			return isSetItemReturnTitle();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TResultOrderListOfItemInfo)
			return this.equals((TResultOrderListOfItemInfo) that);
		return false;
	}

	public boolean equals(TResultOrderListOfItemInfo that) {
		if (that == null)
			return false;

		boolean this_present_itemId = true;
		boolean that_present_itemId = true;
		if (this_present_itemId || that_present_itemId) {
			if (!(this_present_itemId && that_present_itemId))
				return false;
			if (this.itemId != that.itemId)
				return false;
		}

		boolean this_present_pic = true && this.isSetPic();
		boolean that_present_pic = true && that.isSetPic();
		if (this_present_pic || that_present_pic) {
			if (!(this_present_pic && that_present_pic))
				return false;
			if (!this.pic.equals(that.pic))
				return false;
		}

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!this.name.equals(that.name))
				return false;
		}

		boolean this_present_size = true && this.isSetSize();
		boolean that_present_size = true && that.isSetSize();
		if (this_present_size || that_present_size) {
			if (!(this_present_size && that_present_size))
				return false;
			if (!this.size.equals(that.size))
				return false;
		}

		boolean this_present_quantity = true;
		boolean that_present_quantity = true;
		if (this_present_quantity || that_present_quantity) {
			if (!(this_present_quantity && that_present_quantity))
				return false;
			if (this.quantity != that.quantity)
				return false;
		}

		boolean this_present_salePrice = true;
		boolean that_present_salePrice = true;
		if (this_present_salePrice || that_present_salePrice) {
			if (!(this_present_salePrice && that_present_salePrice))
				return false;
			if (this.salePrice != that.salePrice)
				return false;
		}

		boolean this_present_isGift = true;
		boolean that_present_isGift = true;
		if (this_present_isGift || that_present_isGift) {
			if (!(this_present_isGift && that_present_isGift))
				return false;
			if (this.isGift != that.isGift)
				return false;
		}

		boolean this_present_isSpu = true;
		boolean that_present_isSpu = true;
		if (this_present_isSpu || that_present_isSpu) {
			if (!(this_present_isSpu && that_present_isSpu))
				return false;
			if (this.isSpu != that.isSpu)
				return false;
		}

		boolean this_present_isGroupon = true;
		boolean that_present_isGroupon = true;
		if (this_present_isGroupon || that_present_isGroupon) {
			if (!(this_present_isGroupon && that_present_isGroupon))
				return false;
			if (this.isGroupon != that.isGroupon)
				return false;
		}

		boolean this_present_payPrice = true;
		boolean that_present_payPrice = true;
		if (this_present_payPrice || that_present_payPrice) {
			if (!(this_present_payPrice && that_present_payPrice))
				return false;
			if (this.payPrice != that.payPrice)
				return false;
		}

		boolean this_present_itemReturnTitle = true && this.isSetItemReturnTitle();
		boolean that_present_itemReturnTitle = true && that.isSetItemReturnTitle();
		if (this_present_itemReturnTitle || that_present_itemReturnTitle) {
			if (!(this_present_itemReturnTitle && that_present_itemReturnTitle))
				return false;
			if (!this.itemReturnTitle.equals(that.itemReturnTitle))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_itemId = true;
		list.add(present_itemId);
		if (present_itemId)
			list.add(itemId);

		boolean present_pic = true && (isSetPic());
		list.add(present_pic);
		if (present_pic)
			list.add(pic);

		boolean present_name = true && (isSetName());
		list.add(present_name);
		if (present_name)
			list.add(name);

		boolean present_size = true && (isSetSize());
		list.add(present_size);
		if (present_size)
			list.add(size);

		boolean present_quantity = true;
		list.add(present_quantity);
		if (present_quantity)
			list.add(quantity);

		boolean present_salePrice = true;
		list.add(present_salePrice);
		if (present_salePrice)
			list.add(salePrice);

		boolean present_isGift = true;
		list.add(present_isGift);
		if (present_isGift)
			list.add(isGift);

		boolean present_isSpu = true;
		list.add(present_isSpu);
		if (present_isSpu)
			list.add(isSpu);

		boolean present_isGroupon = true;
		list.add(present_isGroupon);
		if (present_isGroupon)
			list.add(isGroupon);

		boolean present_payPrice = true;
		list.add(present_payPrice);
		if (present_payPrice)
			list.add(payPrice);

		boolean present_itemReturnTitle = true && (isSetItemReturnTitle());
		list.add(present_itemReturnTitle);
		if (present_itemReturnTitle)
			list.add(itemReturnTitle);

		return list.hashCode();
	}

	@Override
	public int compareTo(TResultOrderListOfItemInfo other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetItemId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPic()).compareTo(other.isSetPic());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPic()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pic, other.pic);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSize()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetQuantity()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSalePrice()).compareTo(other.isSetSalePrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSalePrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salePrice, other.salePrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsGift()).compareTo(other.isSetIsGift());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsGift()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGift, other.isGift);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsSpu()).compareTo(other.isSetIsSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSpu, other.isSpu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsGroupon()).compareTo(other.isSetIsGroupon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsGroupon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGroupon, other.isGroupon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPayPrice()).compareTo(other.isSetPayPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPrice, other.payPrice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetItemReturnTitle()).compareTo(other.isSetItemReturnTitle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetItemReturnTitle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemReturnTitle, other.itemReturnTitle);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TResultOrderListOfItemInfo(");
		boolean first = true;

		sb.append("itemId:");
		sb.append(this.itemId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("pic:");
		if (this.pic == null) {
			sb.append("null");
		} else {
			sb.append(this.pic);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("name:");
		if (this.name == null) {
			sb.append("null");
		} else {
			sb.append(this.name);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("size:");
		if (this.size == null) {
			sb.append("null");
		} else {
			sb.append(this.size);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("quantity:");
		sb.append(this.quantity);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("salePrice:");
		sb.append(this.salePrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isGift:");
		sb.append(this.isGift);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isSpu:");
		sb.append(this.isSpu);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isGroupon:");
		sb.append(this.isGroupon);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payPrice:");
		sb.append(this.payPrice);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("itemReturnTitle:");
		if (this.itemReturnTitle == null) {
			sb.append("null");
		} else {
			sb.append(this.itemReturnTitle);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TResultOrderListOfItemInfoStandardSchemeFactory implements SchemeFactory {
		public TResultOrderListOfItemInfoStandardScheme getScheme() {
			return new TResultOrderListOfItemInfoStandardScheme();
		}
	}

	private static class TResultOrderListOfItemInfoStandardScheme extends StandardScheme<TResultOrderListOfItemInfo> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, TResultOrderListOfItemInfo struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ITEM_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.itemId = iprot.readI32();
						struct.setItemIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // PIC
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.pic = iprot.readString();
						struct.setPicIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.name = iprot.readString();
						struct.setNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // SIZE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.size = iprot.readString();
						struct.setSizeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // QUANTITY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.quantity = iprot.readI32();
						struct.setQuantityIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // SALE_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.salePrice = iprot.readDouble();
						struct.setSalePriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // IS_GIFT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.isGift = iprot.readI32();
						struct.setIsGiftIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // IS_SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.isSpu = iprot.readI32();
						struct.setIsSpuIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IS_GROUPON
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.isGroupon = iprot.readI32();
						struct.setIsGrouponIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // PAY_PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.payPrice = iprot.readDouble();
						struct.setPayPriceIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // ITEM_RETURN_TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.itemReturnTitle = iprot.readString();
						struct.setItemReturnTitleIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, TResultOrderListOfItemInfo struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
			oprot.writeI32(struct.itemId);
			oprot.writeFieldEnd();
			if (struct.pic != null) {
				oprot.writeFieldBegin(PIC_FIELD_DESC);
				oprot.writeString(struct.pic);
				oprot.writeFieldEnd();
			}
			if (struct.name != null) {
				oprot.writeFieldBegin(NAME_FIELD_DESC);
				oprot.writeString(struct.name);
				oprot.writeFieldEnd();
			}
			if (struct.size != null) {
				oprot.writeFieldBegin(SIZE_FIELD_DESC);
				oprot.writeString(struct.size);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
			oprot.writeI32(struct.quantity);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SALE_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.salePrice);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_GIFT_FIELD_DESC);
			oprot.writeI32(struct.isGift);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_SPU_FIELD_DESC);
			oprot.writeI32(struct.isSpu);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_GROUPON_FIELD_DESC);
			oprot.writeI32(struct.isGroupon);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PAY_PRICE_FIELD_DESC);
			oprot.writeDouble(struct.payPrice);
			oprot.writeFieldEnd();
			if (struct.itemReturnTitle != null) {
				oprot.writeFieldBegin(ITEM_RETURN_TITLE_FIELD_DESC);
				oprot.writeString(struct.itemReturnTitle);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TResultOrderListOfItemInfoTupleSchemeFactory implements SchemeFactory {
		public TResultOrderListOfItemInfoTupleScheme getScheme() {
			return new TResultOrderListOfItemInfoTupleScheme();
		}
	}

	private static class TResultOrderListOfItemInfoTupleScheme extends TupleScheme<TResultOrderListOfItemInfo> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, TResultOrderListOfItemInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetItemId()) {
				optionals.set(0);
			}
			if (struct.isSetPic()) {
				optionals.set(1);
			}
			if (struct.isSetName()) {
				optionals.set(2);
			}
			if (struct.isSetSize()) {
				optionals.set(3);
			}
			if (struct.isSetQuantity()) {
				optionals.set(4);
			}
			if (struct.isSetSalePrice()) {
				optionals.set(5);
			}
			if (struct.isSetIsGift()) {
				optionals.set(6);
			}
			if (struct.isSetIsSpu()) {
				optionals.set(7);
			}
			if (struct.isSetIsGroupon()) {
				optionals.set(8);
			}
			if (struct.isSetPayPrice()) {
				optionals.set(9);
			}
			if (struct.isSetItemReturnTitle()) {
				optionals.set(10);
			}
			oprot.writeBitSet(optionals, 11);
			if (struct.isSetItemId()) {
				oprot.writeI32(struct.itemId);
			}
			if (struct.isSetPic()) {
				oprot.writeString(struct.pic);
			}
			if (struct.isSetName()) {
				oprot.writeString(struct.name);
			}
			if (struct.isSetSize()) {
				oprot.writeString(struct.size);
			}
			if (struct.isSetQuantity()) {
				oprot.writeI32(struct.quantity);
			}
			if (struct.isSetSalePrice()) {
				oprot.writeDouble(struct.salePrice);
			}
			if (struct.isSetIsGift()) {
				oprot.writeI32(struct.isGift);
			}
			if (struct.isSetIsSpu()) {
				oprot.writeI32(struct.isSpu);
			}
			if (struct.isSetIsGroupon()) {
				oprot.writeI32(struct.isGroupon);
			}
			if (struct.isSetPayPrice()) {
				oprot.writeDouble(struct.payPrice);
			}
			if (struct.isSetItemReturnTitle()) {
				oprot.writeString(struct.itemReturnTitle);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, TResultOrderListOfItemInfo struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(11);
			if (incoming.get(0)) {
				struct.itemId = iprot.readI32();
				struct.setItemIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.pic = iprot.readString();
				struct.setPicIsSet(true);
			}
			if (incoming.get(2)) {
				struct.name = iprot.readString();
				struct.setNameIsSet(true);
			}
			if (incoming.get(3)) {
				struct.size = iprot.readString();
				struct.setSizeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.quantity = iprot.readI32();
				struct.setQuantityIsSet(true);
			}
			if (incoming.get(5)) {
				struct.salePrice = iprot.readDouble();
				struct.setSalePriceIsSet(true);
			}
			if (incoming.get(6)) {
				struct.isGift = iprot.readI32();
				struct.setIsGiftIsSet(true);
			}
			if (incoming.get(7)) {
				struct.isSpu = iprot.readI32();
				struct.setIsSpuIsSet(true);
			}
			if (incoming.get(8)) {
				struct.isGroupon = iprot.readI32();
				struct.setIsGrouponIsSet(true);
			}
			if (incoming.get(9)) {
				struct.payPrice = iprot.readDouble();
				struct.setPayPriceIsSet(true);
			}
			if (incoming.get(10)) {
				struct.itemReturnTitle = iprot.readString();
				struct.setItemReturnTitleIsSet(true);
			}
		}
	}

}
